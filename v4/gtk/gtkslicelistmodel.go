// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type SliceListModelClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *SliceListModelClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkSliceListModel` is a list model that presents a slice of another model.
//
// This is useful when implementing paging by setting the size to the number
// of elements per page and updating the offset whenever a different page is
// opened.
type SliceListModel struct {
	gobject.Object
}

var xSliceListModelGLibType func() types.GType

func SliceListModelGLibType() types.GType {
	return xSliceListModelGLibType()
}

func SliceListModelNewFromInternalPtr(ptr uintptr) *SliceListModel {
	cls := &SliceListModel{}
	cls.Ptr = ptr
	return cls
}

var xNewSliceListModel func(uintptr, uint, uint) uintptr

// Creates a new slice model.
//
// It presents the slice from @offset to offset + @size
// of the given @model.
func NewSliceListModel(ModelVar gio.ListModel, OffsetVar uint, SizeVar uint) *SliceListModel {
	var cls *SliceListModel

	cret := xNewSliceListModel(ModelVar.GoPointer(), OffsetVar, SizeVar)

	if cret == 0 {
		return nil
	}
	cls = &SliceListModel{}
	cls.Ptr = cret
	return cls
}

var xSliceListModelGetModel func(uintptr) uintptr

// Gets the model that is currently being used or %NULL if none.
func (x *SliceListModel) GetModel() *gio.ListModelBase {
	var cls *gio.ListModelBase

	cret := xSliceListModelGetModel(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gio.ListModelBase{}
	cls.Ptr = cret
	return cls
}

var xSliceListModelGetOffset func(uintptr) uint

// Gets the offset set via gtk_slice_list_model_set_offset().
func (x *SliceListModel) GetOffset() uint {

	cret := xSliceListModelGetOffset(x.GoPointer())
	return cret
}

var xSliceListModelGetSize func(uintptr) uint

// Gets the size set via gtk_slice_list_model_set_size().
func (x *SliceListModel) GetSize() uint {

	cret := xSliceListModelGetSize(x.GoPointer())
	return cret
}

var xSliceListModelSetModel func(uintptr, uintptr)

// Sets the model to show a slice of.
//
// The model's item type must conform to @self's item type.
func (x *SliceListModel) SetModel(ModelVar gio.ListModel) {

	xSliceListModelSetModel(x.GoPointer(), ModelVar.GoPointer())

}

var xSliceListModelSetOffset func(uintptr, uint)

// Sets the offset into the original model for this slice.
//
// If the offset is too large for the sliced model,
// @self will end up empty.
func (x *SliceListModel) SetOffset(OffsetVar uint) {

	xSliceListModelSetOffset(x.GoPointer(), OffsetVar)

}

var xSliceListModelSetSize func(uintptr, uint)

// Sets the maximum size. @self will never have more items
// than @size.
//
// It can however have fewer items if the offset is too large
// or the model sliced from doesn't have enough items.
func (x *SliceListModel) SetSize(SizeVar uint) {

	xSliceListModelSetSize(x.GoPointer(), SizeVar)

}

func (c *SliceListModel) GoPointer() uintptr {
	return c.Ptr
}

func (c *SliceListModel) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// See also: g_list_model_get_n_items()
func (x *SliceListModel) GetItem(PositionVar uint) uintptr {

	cret := gio.XGListModelGetItem(x.GoPointer(), PositionVar)
	return cret
}

// Gets the type of the items in @list.
//
// All items returned from g_list_model_get_item() are of the type
// returned by this function, or a subtype, or if the type is an
// interface, they are an implementation of that interface.
//
// The item type of a #GListModel can not change during the life of the
// model.
func (x *SliceListModel) GetItemType() types.GType {

	cret := gio.XGListModelGetItemType(x.GoPointer())
	return cret
}

// Gets the number of items in @list.
//
// Depending on the model implementation, calling this function may be
// less efficient than iterating the list with increasing values for
// @position until g_list_model_get_item() returns %NULL.
func (x *SliceListModel) GetNItems() uint {

	cret := gio.XGListModelGetNItems(x.GoPointer())
	return cret
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// This function is meant to be used by language bindings in place
// of g_list_model_get_item().
//
// See also: g_list_model_get_n_items()
func (x *SliceListModel) GetObject(PositionVar uint) *gobject.Object {
	var cls *gobject.Object

	cret := gio.XGListModelGetObject(x.GoPointer(), PositionVar)

	if cret == 0 {
		return nil
	}
	cls = &gobject.Object{}
	cls.Ptr = cret
	return cls
}

// Emits the #GListModel::items-changed signal on @list.
//
// This function should only be called by classes implementing
// #GListModel. It has to be called after the internal representation
// of @list has been updated, because handlers connected to this signal
// might query the new state of the list.
//
// Implementations must only make changes to the model (as visible to
// its consumer) in places that will not cause problems for that
// consumer.  For models that are driven directly by a write API (such
// as #GListStore), changes can be reported in response to uses of that
// API.  For models that represent remote data, changes should only be
// made from a fresh mainloop dispatch.  It is particularly not
// permitted to make changes in response to a call to the #GListModel
// consumer API.
//
// Stated another way: in general, it is assumed that code making a
// series of accesses to the model via the API, without returning to the
// mainloop, and without calling other code, will continue to view the
// same contents of the model.
func (x *SliceListModel) ItemsChanged(PositionVar uint, RemovedVar uint, AddedVar uint) {

	gio.XGListModelItemsChanged(x.GoPointer(), PositionVar, RemovedVar, AddedVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xSliceListModelGLibType, lib, "gtk_slice_list_model_get_type")

	core.PuregoSafeRegister(&xNewSliceListModel, lib, "gtk_slice_list_model_new")

	core.PuregoSafeRegister(&xSliceListModelGetModel, lib, "gtk_slice_list_model_get_model")
	core.PuregoSafeRegister(&xSliceListModelGetOffset, lib, "gtk_slice_list_model_get_offset")
	core.PuregoSafeRegister(&xSliceListModelGetSize, lib, "gtk_slice_list_model_get_size")
	core.PuregoSafeRegister(&xSliceListModelSetModel, lib, "gtk_slice_list_model_set_model")
	core.PuregoSafeRegister(&xSliceListModelSetOffset, lib, "gtk_slice_list_model_set_offset")
	core.PuregoSafeRegister(&xSliceListModelSetSize, lib, "gtk_slice_list_model_set_size")

}
