// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// The list of functions that can be implemented for the `GtkShortcutManager`
// interface.
//
// Note that no function is mandatory to implement, the default implementation
// will work fine.
type ShortcutManagerInterface struct {
	GIface uintptr
}

func (x *ShortcutManagerInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// The `GtkShortcutManager` interface is used to implement
// shortcut scopes.
//
// This is important for [iface@Gtk.Native] widgets that have their
// own surface, since the event controllers that are used to implement
// managed and global scopes are limited to the same native.
//
// Examples for widgets implementing `GtkShortcutManager` are
// [class@Gtk.Window] and [class@Gtk.Popover].
//
// Every widget that implements `GtkShortcutManager` will be used as a
// %GTK_SHORTCUT_SCOPE_MANAGED.
type ShortcutManager interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
}

var xShortcutManagerGLibType func() types.GType

func ShortcutManagerGLibType() types.GType {
	return xShortcutManagerGLibType()
}

type ShortcutManagerBase struct {
	Ptr uintptr
}

func (x *ShortcutManagerBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *ShortcutManagerBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}
