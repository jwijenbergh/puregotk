// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type TreeListRowSorterClass struct {
	ParentClass uintptr
}

func (x *TreeListRowSorterClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkTreeListRowSorter` is a special-purpose sorter that will apply a given
// sorter to the levels in a tree.
//
// Here is an example for setting up a column view with a tree model and
// a `GtkTreeListSorter`:
//
// ```c
// column_sorter = gtk_column_view_get_sorter (view);
// sorter = gtk_tree_list_row_sorter_new (g_object_ref (column_sorter));
// sort_model = gtk_sort_list_model_new (tree_model, sorter);
// selection = gtk_single_selection_new (sort_model);
// gtk_column_view_set_model (view, G_LIST_MODEL (selection));
// ```
type TreeListRowSorter struct {
	Sorter
}

var xTreeListRowSorterGLibType func() types.GType

func TreeListRowSorterGLibType() types.GType {
	return xTreeListRowSorterGLibType()
}

func TreeListRowSorterNewFromInternalPtr(ptr uintptr) *TreeListRowSorter {
	cls := &TreeListRowSorter{}
	cls.Ptr = ptr
	return cls
}

var xNewTreeListRowSorter func(uintptr) uintptr

// Create a special-purpose sorter that applies the sorting
// of @sorter to the levels of a `GtkTreeListModel`.
//
// Note that this sorter relies on [property@Gtk.TreeListModel:passthrough]
// being %FALSE as it can only sort [class@Gtk.TreeListRow]s.
func NewTreeListRowSorter(SorterVar *Sorter) *TreeListRowSorter {
	var cls *TreeListRowSorter

	cret := xNewTreeListRowSorter(SorterVar.GoPointer())

	if cret == 0 {
		return nil
	}
	cls = &TreeListRowSorter{}
	cls.Ptr = cret
	return cls
}

var xTreeListRowSorterGetSorter func(uintptr) uintptr

// Returns the sorter used by @self.
func (x *TreeListRowSorter) GetSorter() *Sorter {
	var cls *Sorter

	cret := xTreeListRowSorterGetSorter(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Sorter{}
	cls.Ptr = cret
	return cls
}

var xTreeListRowSorterSetSorter func(uintptr, uintptr)

// Sets the sorter to use for items with the same parent.
//
// This sorter will be passed the [property@Gtk.TreeListRow:item] of
// the tree list rows passed to @self.
func (x *TreeListRowSorter) SetSorter(SorterVar *Sorter) {

	xTreeListRowSorterSetSorter(x.GoPointer(), SorterVar.GoPointer())

}

func (c *TreeListRowSorter) GoPointer() uintptr {
	return c.Ptr
}

func (c *TreeListRowSorter) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xTreeListRowSorterGLibType, lib, "gtk_tree_list_row_sorter_get_type")

	core.PuregoSafeRegister(&xNewTreeListRowSorter, lib, "gtk_tree_list_row_sorter_new")

	core.PuregoSafeRegister(&xTreeListRowSorterGetSorter, lib, "gtk_tree_list_row_sorter_get_sorter")
	core.PuregoSafeRegister(&xTreeListRowSorterSetSorter, lib, "gtk_tree_list_row_sorter_set_sorter")

}
