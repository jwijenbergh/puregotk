// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/pango"
)

// The `GtkFontButton` allows to open a font chooser dialog to change
// the font.
//
// ![An example GtkFontButton](font-button.png)
//
// It is suitable widget for selecting a font in a preference dialog.
//
// # CSS nodes
//
// ```
// fontbutton
// ╰── button.font
//
//	╰── [content]
//
// ```
//
// `GtkFontButton` has a single CSS node with name fontbutton which
// contains a button node with the .font style class.
type FontButton struct {
	Widget
}

func FontButtonNewFromInternalPtr(ptr uintptr) *FontButton {
	cls := &FontButton{}
	cls.Ptr = ptr
	return cls
}

var xNewFontButton func() uintptr

// Creates a new font picker widget.
func NewFontButton() *FontButton {
	var cls *FontButton

	cret := xNewFontButton()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &FontButton{}
	cls.Ptr = cret
	return cls
}

var xNewFontButtonWithFont func(string) uintptr

// Creates a new font picker widget showing the given font.
func NewFontButtonWithFont(FontnameVar string) *FontButton {
	var cls *FontButton

	cret := xNewFontButtonWithFont(FontnameVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &FontButton{}
	cls.Ptr = cret
	return cls
}

var xFontButtonGetModal func(uintptr) bool

// Gets whether the dialog is modal.
func (x *FontButton) GetModal() bool {

	cret := xFontButtonGetModal(x.GoPointer())
	return cret
}

var xFontButtonGetTitle func(uintptr) string

// Retrieves the title of the font chooser dialog.
func (x *FontButton) GetTitle() string {

	cret := xFontButtonGetTitle(x.GoPointer())
	return cret
}

var xFontButtonGetUseFont func(uintptr) bool

// Returns whether the selected font is used in the label.
func (x *FontButton) GetUseFont() bool {

	cret := xFontButtonGetUseFont(x.GoPointer())
	return cret
}

var xFontButtonGetUseSize func(uintptr) bool

// Returns whether the selected size is used in the label.
func (x *FontButton) GetUseSize() bool {

	cret := xFontButtonGetUseSize(x.GoPointer())
	return cret
}

var xFontButtonSetModal func(uintptr, bool)

// Sets whether the dialog should be modal.
func (x *FontButton) SetModal(ModalVar bool) {

	xFontButtonSetModal(x.GoPointer(), ModalVar)

}

var xFontButtonSetTitle func(uintptr, string)

// Sets the title for the font chooser dialog.
func (x *FontButton) SetTitle(TitleVar string) {

	xFontButtonSetTitle(x.GoPointer(), TitleVar)

}

var xFontButtonSetUseFont func(uintptr, bool)

// If @use_font is %TRUE, the font name will be written
// using the selected font.
func (x *FontButton) SetUseFont(UseFontVar bool) {

	xFontButtonSetUseFont(x.GoPointer(), UseFontVar)

}

var xFontButtonSetUseSize func(uintptr, bool)

// If @use_size is %TRUE, the font name will be written using
// the selected size.
func (x *FontButton) SetUseSize(UseSizeVar bool) {

	xFontButtonSetUseSize(x.GoPointer(), UseSizeVar)

}

func (c *FontButton) GoPointer() uintptr {
	return c.Ptr
}

func (c *FontButton) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted to when the font button is activated.
//
// The `::activate` signal on `GtkFontButton` is an action signal and
// emitting it causes the button to present its dialog.
func (x *FontButton) ConnectActivate(cb *func(FontButton)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "activate", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := FontButton{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "activate", cbRefPtr)
}

// Emitted when the user selects a font.
//
// When handling this signal, use [method@Gtk.FontChooser.get_font]
// to find out which font was just selected.
//
// Note that this signal is only emitted when the user changes the font.
// If you need to react to programmatic font changes as well, use
// the notify::font signal.
func (x *FontButton) ConnectFontSet(cb *func(FontButton)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "font-set", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := FontButton{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "font-set", cbRefPtr)
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *FontButton) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *FontButton) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *FontButton) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *FontButton) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *FontButton) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *FontButton) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *FontButton) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *FontButton) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *FontButton) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *FontButton) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *FontButton) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

// Gets the currently-selected font name.
//
// Note that this can be a different string than what you set with
// [method@Gtk.FontChooser.set_font], as the font chooser widget may
// normalize font names and thus return a string with a different
// structure. For example, “Helvetica Italic Bold 12” could be
// normalized to “Helvetica Bold Italic 12”.
//
// Use [method@Pango.FontDescription.equal] if you want to compare two
// font descriptions.
func (x *FontButton) GetFont() string {

	cret := XGtkFontChooserGetFont(x.GoPointer())
	return cret
}

// Gets the currently-selected font.
//
// Note that this can be a different string than what you set with
// [method@Gtk.FontChooser.set_font], as the font chooser widget may
// normalize font names and thus return a string with a different
// structure. For example, “Helvetica Italic Bold 12” could be
// normalized to “Helvetica Bold Italic 12”.
//
// Use [method@Pango.FontDescription.equal] if you want to compare two
// font descriptions.
func (x *FontButton) GetFontDesc() *pango.FontDescription {

	cret := XGtkFontChooserGetFontDesc(x.GoPointer())
	return cret
}

// Gets the `PangoFontFace` representing the selected font group
// details (i.e. family, slant, weight, width, etc).
//
// If the selected font is not installed, returns %NULL.
func (x *FontButton) GetFontFace() *pango.FontFace {
	var cls *pango.FontFace

	cret := XGtkFontChooserGetFontFace(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &pango.FontFace{}
	cls.Ptr = cret
	return cls
}

// Gets the `PangoFontFamily` representing the selected font family.
//
// Font families are a collection of font faces.
//
// If the selected font is not installed, returns %NULL.
func (x *FontButton) GetFontFamily() *pango.FontFamily {
	var cls *pango.FontFamily

	cret := XGtkFontChooserGetFontFamily(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &pango.FontFamily{}
	cls.Ptr = cret
	return cls
}

// Gets the currently-selected font features.
//
// The format of the returned string is compatible with the
// [CSS font-feature-settings property](https://www.w3.org/TR/css-fonts-4/#font-rend-desc).
// It can be passed to [func@Pango.AttrFontFeatures.new].
func (x *FontButton) GetFontFeatures() string {

	cret := XGtkFontChooserGetFontFeatures(x.GoPointer())
	return cret
}

// Gets the custom font map of this font chooser widget,
// or %NULL if it does not have one.
func (x *FontButton) GetFontMap() *pango.FontMap {
	var cls *pango.FontMap

	cret := XGtkFontChooserGetFontMap(x.GoPointer())

	if cret == 0 {
		return nil
	}
	cls = &pango.FontMap{}
	cls.Ptr = cret
	return cls
}

// The selected font size.
func (x *FontButton) GetFontSize() int {

	cret := XGtkFontChooserGetFontSize(x.GoPointer())
	return cret
}

// Gets the language that is used for font features.
func (x *FontButton) GetLanguage() string {

	cret := XGtkFontChooserGetLanguage(x.GoPointer())
	return cret
}

// Returns the current level of granularity for selecting fonts.
func (x *FontButton) GetLevel() FontChooserLevel {

	cret := XGtkFontChooserGetLevel(x.GoPointer())
	return cret
}

// Gets the text displayed in the preview area.
func (x *FontButton) GetPreviewText() string {

	cret := XGtkFontChooserGetPreviewText(x.GoPointer())
	return cret
}

// Returns whether the preview entry is shown or not.
func (x *FontButton) GetShowPreviewEntry() bool {

	cret := XGtkFontChooserGetShowPreviewEntry(x.GoPointer())
	return cret
}

// Adds a filter function that decides which fonts to display
// in the font chooser.
func (x *FontButton) SetFilterFunc(FilterVar *FontFilterFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {

	XGtkFontChooserSetFilterFunc(x.GoPointer(), glib.NewCallback(FilterVar), UserDataVar, glib.NewCallback(DestroyVar))

}

// Sets the currently-selected font.
func (x *FontButton) SetFont(FontnameVar string) {

	XGtkFontChooserSetFont(x.GoPointer(), FontnameVar)

}

// Sets the currently-selected font from @font_desc.
func (x *FontButton) SetFontDesc(FontDescVar *pango.FontDescription) {

	XGtkFontChooserSetFontDesc(x.GoPointer(), FontDescVar)

}

// Sets a custom font map to use for this font chooser widget.
//
// A custom font map can be used to present application-specific
// fonts instead of or in addition to the normal system fonts.
//
// ```c
// FcConfig *config;
// PangoFontMap *fontmap;
//
// config = FcInitLoadConfigAndFonts ();
// FcConfigAppFontAddFile (config, my_app_font_file);
//
// fontmap = pango_cairo_font_map_new_for_font_type (CAIRO_FONT_TYPE_FT);
// pango_fc_font_map_set_config (PANGO_FC_FONT_MAP (fontmap), config);
//
// gtk_font_chooser_set_font_map (font_chooser, fontmap);
// ```
//
// Note that other GTK widgets will only be able to use the
// application-specific font if it is present in the font map they use:
//
// ```c
// context = gtk_widget_get_pango_context (label);
// pango_context_set_font_map (context, fontmap);
// ```
func (x *FontButton) SetFontMap(FontmapVar *pango.FontMap) {

	XGtkFontChooserSetFontMap(x.GoPointer(), FontmapVar.GoPointer())

}

// Sets the language to use for font features.
func (x *FontButton) SetLanguage(LanguageVar string) {

	XGtkFontChooserSetLanguage(x.GoPointer(), LanguageVar)

}

// Sets the desired level of granularity for selecting fonts.
func (x *FontButton) SetLevel(LevelVar FontChooserLevel) {

	XGtkFontChooserSetLevel(x.GoPointer(), LevelVar)

}

// Sets the text displayed in the preview area.
//
// The @text is used to show how the selected font looks.
func (x *FontButton) SetPreviewText(TextVar string) {

	XGtkFontChooserSetPreviewText(x.GoPointer(), TextVar)

}

// Shows or hides the editable preview entry.
func (x *FontButton) SetShowPreviewEntry(ShowPreviewEntryVar bool) {

	XGtkFontChooserSetShowPreviewEntry(x.GoPointer(), ShowPreviewEntryVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewFontButton, lib, "gtk_font_button_new")
	core.PuregoSafeRegister(&xNewFontButtonWithFont, lib, "gtk_font_button_new_with_font")

	core.PuregoSafeRegister(&xFontButtonGetModal, lib, "gtk_font_button_get_modal")
	core.PuregoSafeRegister(&xFontButtonGetTitle, lib, "gtk_font_button_get_title")
	core.PuregoSafeRegister(&xFontButtonGetUseFont, lib, "gtk_font_button_get_use_font")
	core.PuregoSafeRegister(&xFontButtonGetUseSize, lib, "gtk_font_button_get_use_size")
	core.PuregoSafeRegister(&xFontButtonSetModal, lib, "gtk_font_button_set_modal")
	core.PuregoSafeRegister(&xFontButtonSetTitle, lib, "gtk_font_button_set_title")
	core.PuregoSafeRegister(&xFontButtonSetUseFont, lib, "gtk_font_button_set_use_font")
	core.PuregoSafeRegister(&xFontButtonSetUseSize, lib, "gtk_font_button_set_use_size")

}
