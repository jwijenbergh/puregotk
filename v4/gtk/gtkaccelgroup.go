// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
)

var xAcceleratorGetDefaultModMask func() gdk.ModifierType

// Gets the modifier mask.
//
// The modifier mask determines which modifiers are considered significant
// for keyboard accelerators. This includes all keyboard modifiers except
// for %GDK_LOCK_MASK.
func AcceleratorGetDefaultModMask() gdk.ModifierType {

	cret := xAcceleratorGetDefaultModMask()
	return cret
}

var xAcceleratorGetLabel func(uint, gdk.ModifierType) string

// Converts an accelerator keyval and modifier mask into a string
// which can be used to represent the accelerator to the user.
func AcceleratorGetLabel(AcceleratorKeyVar uint, AcceleratorModsVar gdk.ModifierType) string {

	cret := xAcceleratorGetLabel(AcceleratorKeyVar, AcceleratorModsVar)
	return cret
}

var xAcceleratorGetLabelWithKeycode func(uintptr, uint, uint, gdk.ModifierType) string

// Converts an accelerator keyval and modifier mask
// into a string that can be displayed to the user.
//
// The string may be translated.
//
// This function is similar to [func@Gtk.accelerator_get_label],
// but handling keycodes. This is only useful for system-level
// components, applications should use [func@Gtk.accelerator_get_label]
// instead.
func AcceleratorGetLabelWithKeycode(DisplayVar *gdk.Display, AcceleratorKeyVar uint, KeycodeVar uint, AcceleratorModsVar gdk.ModifierType) string {

	cret := xAcceleratorGetLabelWithKeycode(DisplayVar.GoPointer(), AcceleratorKeyVar, KeycodeVar, AcceleratorModsVar)
	return cret
}

var xAcceleratorName func(uint, gdk.ModifierType) string

// Converts an accelerator keyval and modifier mask into a string
// parseable by gtk_accelerator_parse().
//
// For example, if you pass in %GDK_KEY_q and %GDK_CONTROL_MASK,
// this function returns `&lt;Control&gt;q`.
//
// If you need to display accelerators in the user interface,
// see [func@Gtk.accelerator_get_label].
func AcceleratorName(AcceleratorKeyVar uint, AcceleratorModsVar gdk.ModifierType) string {

	cret := xAcceleratorName(AcceleratorKeyVar, AcceleratorModsVar)
	return cret
}

var xAcceleratorNameWithKeycode func(uintptr, uint, uint, gdk.ModifierType) string

// Converts an accelerator keyval and modifier mask
// into a string parseable by gtk_accelerator_parse_with_keycode().
//
// This is similar to [func@Gtk.accelerator_name] but handling keycodes.
// This is only useful for system-level components, applications
// should use [func@Gtk.accelerator_name] instead.
func AcceleratorNameWithKeycode(DisplayVar *gdk.Display, AcceleratorKeyVar uint, KeycodeVar uint, AcceleratorModsVar gdk.ModifierType) string {

	cret := xAcceleratorNameWithKeycode(DisplayVar.GoPointer(), AcceleratorKeyVar, KeycodeVar, AcceleratorModsVar)
	return cret
}

var xAcceleratorParse func(string, uint, *gdk.ModifierType) bool

// Parses a string representing an accelerator.
//
// The format looks like “`&lt;Control&gt;a`” or “`&lt;Shift&gt;&lt;Alt&gt;F1`”.
//
// The parser is fairly liberal and allows lower or upper case, and also
// abbreviations such as “`&lt;Ctl&gt;`” and “`&lt;Ctrl&gt;`”.
//
// Key names are parsed using [func@Gdk.keyval_from_name]. For character keys
// the name is not the symbol, but the lowercase name, e.g. one would use
// “`&lt;Ctrl&gt;minus`” instead of “`&lt;Ctrl&gt;-`”.
//
// Modifiers are enclosed in angular brackets `&lt;&gt;`, and match the
// [flags@Gdk.ModifierType] mask:
//
// - `&lt;Shift&gt;` for `GDK_SHIFT_MASK`
// - `&lt;Ctrl&gt;` for `GDK_CONTROL_MASK`
// - `&lt;Alt&gt;` for `GDK_ALT_MASK`
// - `&lt;Meta&gt;` for `GDK_META_MASK`
// - `&lt;Super&gt;` for `GDK_SUPER_MASK`
// - `&lt;Hyper&gt;` for `GDK_HYPER_MASK`
//
// If the parse operation fails, @accelerator_key and @accelerator_mods will
// be set to 0 (zero).
func AcceleratorParse(AcceleratorVar string, AcceleratorKeyVar uint, AcceleratorModsVar *gdk.ModifierType) bool {

	cret := xAcceleratorParse(AcceleratorVar, AcceleratorKeyVar, AcceleratorModsVar)
	return cret
}

var xAcceleratorParseWithKeycode func(string, uintptr, uint, []uint, *gdk.ModifierType) bool

// Parses a string representing an accelerator.
//
// This is similar to [func@Gtk.accelerator_parse] but handles keycodes as
// well. This is only useful for system-level components, applications should
// use [func@Gtk.accelerator_parse] instead.
//
// If @accelerator_codes is given and the result stored in it is non-%NULL,
// the result must be freed with g_free().
//
// If a keycode is present in the accelerator and no @accelerator_codes
// is given, the parse will fail.
//
// If the parse fails, @accelerator_key, @accelerator_mods and
// @accelerator_codes will be set to 0 (zero).
func AcceleratorParseWithKeycode(AcceleratorVar string, DisplayVar *gdk.Display, AcceleratorKeyVar uint, AcceleratorCodesVar []uint, AcceleratorModsVar *gdk.ModifierType) bool {

	cret := xAcceleratorParseWithKeycode(AcceleratorVar, DisplayVar.GoPointer(), AcceleratorKeyVar, AcceleratorCodesVar, AcceleratorModsVar)
	return cret
}

var xAcceleratorValid func(uint, gdk.ModifierType) bool

// Determines whether a given keyval and modifier mask constitute
// a valid keyboard accelerator.
//
// For example, the %GDK_KEY_a keyval plus %GDK_CONTROL_MASK mark is valid,
// and matches the “Ctrl+a” accelerator. But, you can't, for instance, use
// the %GDK_KEY_Control_L keyval as an accelerator.
func AcceleratorValid(KeyvalVar uint, ModifiersVar gdk.ModifierType) bool {

	cret := xAcceleratorValid(KeyvalVar, ModifiersVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xAcceleratorGetDefaultModMask, lib, "gtk_accelerator_get_default_mod_mask")
	core.PuregoSafeRegister(&xAcceleratorGetLabel, lib, "gtk_accelerator_get_label")
	core.PuregoSafeRegister(&xAcceleratorGetLabelWithKeycode, lib, "gtk_accelerator_get_label_with_keycode")
	core.PuregoSafeRegister(&xAcceleratorName, lib, "gtk_accelerator_name")
	core.PuregoSafeRegister(&xAcceleratorNameWithKeycode, lib, "gtk_accelerator_name_with_keycode")
	core.PuregoSafeRegister(&xAcceleratorParse, lib, "gtk_accelerator_parse")
	core.PuregoSafeRegister(&xAcceleratorParseWithKeycode, lib, "gtk_accelerator_parse_with_keycode")
	core.PuregoSafeRegister(&xAcceleratorValid, lib, "gtk_accelerator_valid")

}
