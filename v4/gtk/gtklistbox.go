// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

// Called for list boxes that are bound to a `GListModel` with
// gtk_list_box_bind_model() for each item that gets added to the model.
//
// If the widget returned is not a #GtkListBoxRow widget, then the widget
// will be inserted as the child of an intermediate #GtkListBoxRow.
type ListBoxCreateWidgetFunc func(uintptr, uintptr) uintptr

// Will be called whenever the row changes or is added and lets you control
// if the row should be visible or not.
type ListBoxFilterFunc func(uintptr, uintptr) bool

// A function used by gtk_list_box_selected_foreach().
//
// It will be called on every selected child of the @box.
type ListBoxForeachFunc func(uintptr, uintptr, uintptr)

// Compare two rows to determine which should be first.
type ListBoxSortFunc func(uintptr, uintptr, uintptr) int

// Whenever @row changes or which row is before @row changes this
// is called, which lets you update the header on @row.
//
// You may remove or set a new one via [method@Gtk.ListBoxRow.set_header]
// or just change the state of the current header widget.
type ListBoxUpdateHeaderFunc func(uintptr, uintptr, uintptr)

type ListBoxRowClass struct {
	ParentClass uintptr

	Padding [8]uintptr
}

func (x *ListBoxRowClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkListBox` is a vertical list.
//
// A `GtkListBox` only contains `GtkListBoxRow` children. These rows can
// by dynamically sorted and filtered, and headers can be added dynamically
// depending on the row content. It also allows keyboard and mouse navigation
// and selection like a typical list.
//
// Using `GtkListBox` is often an alternative to `GtkTreeView`, especially
// when the list contents has a more complicated layout than what is allowed
// by a `GtkCellRenderer`, or when the contents is interactive (i.e. has a
// button in it).
//
// Although a `GtkListBox` must have only `GtkListBoxRow` children, you can
// add any kind of widget to it via [method@Gtk.ListBox.prepend],
// [method@Gtk.ListBox.append] and [method@Gtk.ListBox.insert] and a
// `GtkListBoxRow` widget will automatically be inserted between the list
// and the widget.
//
// `GtkListBoxRows` can be marked as activatable or selectable. If a row is
// activatable, [signal@Gtk.ListBox::row-activated] will be emitted for it when
// the user tries to activate it. If it is selectable, the row will be marked
// as selected when the user tries to select it.
//
// # GtkListBox as GtkBuildable
//
// The `GtkListBox` implementation of the `GtkBuildable` interface supports
// setting a child as the placeholder by specifying “placeholder” as the “type”
// attribute of a &lt;child&gt; element. See [method@Gtk.ListBox.set_placeholder]
// for info.
//
// # CSS nodes
//
// |[&lt;!-- language="plain" --&gt;
// list[.separators][.rich-list][.navigation-sidebar]
// ╰── row[.activatable]
// ]|
//
// `GtkListBox` uses a single CSS node named list. It may carry the .separators
// style class, when the [property@Gtk.ListBox:show-separators] property is set.
// Each `GtkListBoxRow` uses a single CSS node named row. The row nodes get the
// .activatable style class added when appropriate.
//
// The main list node may also carry style classes to select
// the style of [list presentation](section-list-widget.html#list-styles):
// .rich-list, .navigation-sidebar or .data-table.
//
// # Accessibility
//
// `GtkListBox` uses the %GTK_ACCESSIBLE_ROLE_LIST role and `GtkListBoxRow` uses
// the %GTK_ACCESSIBLE_ROLE_LIST_ITEM role.
type ListBox struct {
	Widget
}

func ListBoxNewFromInternalPtr(ptr uintptr) *ListBox {
	cls := &ListBox{}
	cls.Ptr = ptr
	return cls
}

var xNewListBox func() uintptr

// Creates a new `GtkListBox` container.
func NewListBox() *ListBox {
	var cls *ListBox

	cret := xNewListBox()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ListBox{}
	cls.Ptr = cret
	return cls
}

var xListBoxAppend func(uintptr, uintptr)

// Append a widget to the list.
//
// If a sort function is set, the widget will
// actually be inserted at the calculated position.
func (x *ListBox) Append(ChildVar *Widget) {

	xListBoxAppend(x.GoPointer(), ChildVar.GoPointer())

}

var xListBoxBindModel func(uintptr, uintptr, uintptr, uintptr, uintptr)

// Binds @model to @box.
//
// If @box was already bound to a model, that previous binding is
// destroyed.
//
// The contents of @box are cleared and then filled with widgets that
// represent items from @model. @box is updated whenever @model changes.
// If @model is %NULL, @box is left empty.
//
// It is undefined to add or remove widgets directly (for example, with
// [method@Gtk.ListBox.insert]) while @box is bound to a model.
//
// Note that using a model is incompatible with the filtering and sorting
// functionality in `GtkListBox`. When using a model, filtering and sorting
// should be implemented by the model.
func (x *ListBox) BindModel(ModelVar gio.ListModel, CreateWidgetFuncVar *ListBoxCreateWidgetFunc, UserDataVar uintptr, UserDataFreeFuncVar *glib.DestroyNotify) {

	xListBoxBindModel(x.GoPointer(), ModelVar.GoPointer(), glib.NewCallback(CreateWidgetFuncVar), UserDataVar, glib.NewCallback(UserDataFreeFuncVar))

}

var xListBoxDragHighlightRow func(uintptr, uintptr)

// Add a drag highlight to a row.
//
// This is a helper function for implementing DnD onto a `GtkListBox`.
// The passed in @row will be highlighted by setting the
// %GTK_STATE_FLAG_DROP_ACTIVE state and any previously highlighted
// row will be unhighlighted.
//
// The row will also be unhighlighted when the widget gets
// a drag leave event.
func (x *ListBox) DragHighlightRow(RowVar *ListBoxRow) {

	xListBoxDragHighlightRow(x.GoPointer(), RowVar.GoPointer())

}

var xListBoxDragUnhighlightRow func(uintptr)

// If a row has previously been highlighted via gtk_list_box_drag_highlight_row(),
// it will have the highlight removed.
func (x *ListBox) DragUnhighlightRow() {

	xListBoxDragUnhighlightRow(x.GoPointer())

}

var xListBoxGetActivateOnSingleClick func(uintptr) bool

// Returns whether rows activate on single clicks.
func (x *ListBox) GetActivateOnSingleClick() bool {

	cret := xListBoxGetActivateOnSingleClick(x.GoPointer())
	return cret
}

var xListBoxGetAdjustment func(uintptr) uintptr

// Gets the adjustment (if any) that the widget uses to
// for vertical scrolling.
func (x *ListBox) GetAdjustment() *Adjustment {
	var cls *Adjustment

	cret := xListBoxGetAdjustment(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Adjustment{}
	cls.Ptr = cret
	return cls
}

var xListBoxGetRowAtIndex func(uintptr, int) uintptr

// Gets the n-th child in the list (not counting headers).
//
// If @index_ is negative or larger than the number of items in the
// list, %NULL is returned.
func (x *ListBox) GetRowAtIndex(IndexVar int) *ListBoxRow {
	var cls *ListBoxRow

	cret := xListBoxGetRowAtIndex(x.GoPointer(), IndexVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ListBoxRow{}
	cls.Ptr = cret
	return cls
}

var xListBoxGetRowAtY func(uintptr, int) uintptr

// Gets the row at the @y position.
func (x *ListBox) GetRowAtY(YVar int) *ListBoxRow {
	var cls *ListBoxRow

	cret := xListBoxGetRowAtY(x.GoPointer(), YVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ListBoxRow{}
	cls.Ptr = cret
	return cls
}

var xListBoxGetSelectedRow func(uintptr) uintptr

// Gets the selected row, or %NULL if no rows are selected.
//
// Note that the box may allow multiple selection, in which
// case you should use [method@Gtk.ListBox.selected_foreach] to
// find all selected rows.
func (x *ListBox) GetSelectedRow() *ListBoxRow {
	var cls *ListBoxRow

	cret := xListBoxGetSelectedRow(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ListBoxRow{}
	cls.Ptr = cret
	return cls
}

var xListBoxGetSelectedRows func(uintptr) *glib.List

// Creates a list of all selected children.
func (x *ListBox) GetSelectedRows() *glib.List {

	cret := xListBoxGetSelectedRows(x.GoPointer())
	return cret
}

var xListBoxGetSelectionMode func(uintptr) SelectionMode

// Gets the selection mode of the listbox.
func (x *ListBox) GetSelectionMode() SelectionMode {

	cret := xListBoxGetSelectionMode(x.GoPointer())
	return cret
}

var xListBoxGetShowSeparators func(uintptr) bool

// Returns whether the list box should show separators
// between rows.
func (x *ListBox) GetShowSeparators() bool {

	cret := xListBoxGetShowSeparators(x.GoPointer())
	return cret
}

var xListBoxInsert func(uintptr, uintptr, int)

// Insert the @child into the @box at @position.
//
// If a sort function is
// set, the widget will actually be inserted at the calculated position.
//
// If @position is -1, or larger than the total number of items in the
// @box, then the @child will be appended to the end.
func (x *ListBox) Insert(ChildVar *Widget, PositionVar int) {

	xListBoxInsert(x.GoPointer(), ChildVar.GoPointer(), PositionVar)

}

var xListBoxInvalidateFilter func(uintptr)

// Update the filtering for all rows.
//
// Call this when result
// of the filter function on the @box is changed due
// to an external factor. For instance, this would be used
// if the filter function just looked for a specific search
// string and the entry with the search string has changed.
func (x *ListBox) InvalidateFilter() {

	xListBoxInvalidateFilter(x.GoPointer())

}

var xListBoxInvalidateHeaders func(uintptr)

// Update the separators for all rows.
//
// Call this when result
// of the header function on the @box is changed due
// to an external factor.
func (x *ListBox) InvalidateHeaders() {

	xListBoxInvalidateHeaders(x.GoPointer())

}

var xListBoxInvalidateSort func(uintptr)

// Update the sorting for all rows.
//
// Call this when result
// of the sort function on the @box is changed due
// to an external factor.
func (x *ListBox) InvalidateSort() {

	xListBoxInvalidateSort(x.GoPointer())

}

var xListBoxPrepend func(uintptr, uintptr)

// Prepend a widget to the list.
//
// If a sort function is set, the widget will
// actually be inserted at the calculated position.
func (x *ListBox) Prepend(ChildVar *Widget) {

	xListBoxPrepend(x.GoPointer(), ChildVar.GoPointer())

}

var xListBoxRemove func(uintptr, uintptr)

// Removes a child from @box.
func (x *ListBox) Remove(ChildVar *Widget) {

	xListBoxRemove(x.GoPointer(), ChildVar.GoPointer())

}

var xListBoxSelectAll func(uintptr)

// Select all children of @box, if the selection mode allows it.
func (x *ListBox) SelectAll() {

	xListBoxSelectAll(x.GoPointer())

}

var xListBoxSelectRow func(uintptr, uintptr)

// Make @row the currently selected row.
func (x *ListBox) SelectRow(RowVar *ListBoxRow) {

	xListBoxSelectRow(x.GoPointer(), RowVar.GoPointer())

}

var xListBoxSelectedForeach func(uintptr, uintptr, uintptr)

// Calls a function for each selected child.
//
// Note that the selection cannot be modified from within this function.
func (x *ListBox) SelectedForeach(FuncVar *ListBoxForeachFunc, DataVar uintptr) {

	xListBoxSelectedForeach(x.GoPointer(), glib.NewCallback(FuncVar), DataVar)

}

var xListBoxSetActivateOnSingleClick func(uintptr, bool)

// If @single is %TRUE, rows will be activated when you click on them,
// otherwise you need to double-click.
func (x *ListBox) SetActivateOnSingleClick(SingleVar bool) {

	xListBoxSetActivateOnSingleClick(x.GoPointer(), SingleVar)

}

var xListBoxSetAdjustment func(uintptr, uintptr)

// Sets the adjustment (if any) that the widget uses to
// for vertical scrolling.
//
// For instance, this is used to get the page size for
// PageUp/Down key handling.
//
// In the normal case when the @box is packed inside
// a `GtkScrolledWindow` the adjustment from that will
// be picked up automatically, so there is no need
// to manually do that.
func (x *ListBox) SetAdjustment(AdjustmentVar *Adjustment) {

	xListBoxSetAdjustment(x.GoPointer(), AdjustmentVar.GoPointer())

}

var xListBoxSetFilterFunc func(uintptr, uintptr, uintptr, uintptr)

// By setting a filter function on the @box one can decide dynamically which
// of the rows to show.
//
// For instance, to implement a search function on a list that
// filters the original list to only show the matching rows.
//
// The @filter_func will be called for each row after the call, and
// it will continue to be called each time a row changes (via
// [method@Gtk.ListBoxRow.changed]) or when [method@Gtk.ListBox.invalidate_filter]
// is called.
//
// Note that using a filter function is incompatible with using a model
// (see [method@Gtk.ListBox.bind_model]).
func (x *ListBox) SetFilterFunc(FilterFuncVar *ListBoxFilterFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {

	xListBoxSetFilterFunc(x.GoPointer(), glib.NewCallback(FilterFuncVar), UserDataVar, glib.NewCallback(DestroyVar))

}

var xListBoxSetHeaderFunc func(uintptr, uintptr, uintptr, uintptr)

// Sets a header function.
//
// By setting a header function on the @box one can dynamically add headers
// in front of rows, depending on the contents of the row and its position
// in the list.
//
// For instance, one could use it to add headers in front of the first item
// of a new kind, in a list sorted by the kind.
//
// The @update_header can look at the current header widget using
// [method@Gtk.ListBoxRow.get_header] and either update the state of the widget
// as needed, or set a new one using [method@Gtk.ListBoxRow.set_header]. If no
// header is needed, set the header to %NULL.
//
// Note that you may get many calls @update_header to this for a particular
// row when e.g. changing things that don’t affect the header. In this case
// it is important for performance to not blindly replace an existing header
// with an identical one.
//
// The @update_header function will be called for each row after the call,
// and it will continue to be called each time a row changes (via
// [method@Gtk.ListBoxRow.changed]) and when the row before changes (either
// by [method@Gtk.ListBoxRow.changed] on the previous row, or when the previous
// row becomes a different row). It is also called for all rows when
// [method@Gtk.ListBox.invalidate_headers] is called.
func (x *ListBox) SetHeaderFunc(UpdateHeaderVar *ListBoxUpdateHeaderFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {

	xListBoxSetHeaderFunc(x.GoPointer(), glib.NewCallback(UpdateHeaderVar), UserDataVar, glib.NewCallback(DestroyVar))

}

var xListBoxSetPlaceholder func(uintptr, uintptr)

// Sets the placeholder widget that is shown in the list when
// it doesn't display any visible children.
func (x *ListBox) SetPlaceholder(PlaceholderVar *Widget) {

	xListBoxSetPlaceholder(x.GoPointer(), PlaceholderVar.GoPointer())

}

var xListBoxSetSelectionMode func(uintptr, SelectionMode)

// Sets how selection works in the listbox.
func (x *ListBox) SetSelectionMode(ModeVar SelectionMode) {

	xListBoxSetSelectionMode(x.GoPointer(), ModeVar)

}

var xListBoxSetShowSeparators func(uintptr, bool)

// Sets whether the list box should show separators
// between rows.
func (x *ListBox) SetShowSeparators(ShowSeparatorsVar bool) {

	xListBoxSetShowSeparators(x.GoPointer(), ShowSeparatorsVar)

}

var xListBoxSetSortFunc func(uintptr, uintptr, uintptr, uintptr)

// Sets a sort function.
//
// By setting a sort function on the @box one can dynamically reorder
// the rows of the list, based on the contents of the rows.
//
// The @sort_func will be called for each row after the call, and will
// continue to be called each time a row changes (via
// [method@Gtk.ListBoxRow.changed]) and when [method@Gtk.ListBox.invalidate_sort]
// is called.
//
// Note that using a sort function is incompatible with using a model
// (see [method@Gtk.ListBox.bind_model]).
func (x *ListBox) SetSortFunc(SortFuncVar *ListBoxSortFunc, UserDataVar uintptr, DestroyVar *glib.DestroyNotify) {

	xListBoxSetSortFunc(x.GoPointer(), glib.NewCallback(SortFuncVar), UserDataVar, glib.NewCallback(DestroyVar))

}

var xListBoxUnselectAll func(uintptr)

// Unselect all children of @box, if the selection mode allows it.
func (x *ListBox) UnselectAll() {

	xListBoxUnselectAll(x.GoPointer())

}

var xListBoxUnselectRow func(uintptr, uintptr)

// Unselects a single row of @box, if the selection mode allows it.
func (x *ListBox) UnselectRow(RowVar *ListBoxRow) {

	xListBoxUnselectRow(x.GoPointer(), RowVar.GoPointer())

}

func (c *ListBox) GoPointer() uintptr {
	return c.Ptr
}

func (c *ListBox) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func (x *ListBox) ConnectActivateCursorRow(cb *func(ListBox)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "activate-cursor-row", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := ListBox{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "activate-cursor-row", cbRefPtr)
}

func (x *ListBox) ConnectMoveCursor(cb *func(ListBox, MovementStep, int, bool, bool)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "move-cursor", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, ObjectVarp MovementStep, P0Varp int, P1Varp bool, P2Varp bool) {
		fa := ListBox{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, ObjectVarp, P0Varp, P1Varp, P2Varp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "move-cursor", cbRefPtr)
}

// Emitted when a row has been activated by the user.
func (x *ListBox) ConnectRowActivated(cb *func(ListBox, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "row-activated", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, RowVarp uintptr) {
		fa := ListBox{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, RowVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "row-activated", cbRefPtr)
}

// Emitted when a new row is selected, or (with a %NULL @row)
// when the selection is cleared.
//
// When the @box is using %GTK_SELECTION_MULTIPLE, this signal will not
// give you the full picture of selection changes, and you should use
// the [signal@Gtk.ListBox::selected-rows-changed] signal instead.
func (x *ListBox) ConnectRowSelected(cb *func(ListBox, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "row-selected", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, RowVarp uintptr) {
		fa := ListBox{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, RowVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "row-selected", cbRefPtr)
}

// Emitted to select all children of the box, if the selection
// mode permits it.
//
// This is a [keybinding signal](class.SignalAction.html).
//
// The default binding for this signal is &lt;kbd&gt;Ctrl&lt;/kbd&gt;-&lt;kbd&gt;a&lt;/kbd&gt;.
func (x *ListBox) ConnectSelectAll(cb *func(ListBox)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "select-all", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := ListBox{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "select-all", cbRefPtr)
}

// Emitted when the set of selected rows changes.
func (x *ListBox) ConnectSelectedRowsChanged(cb *func(ListBox)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "selected-rows-changed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := ListBox{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "selected-rows-changed", cbRefPtr)
}

func (x *ListBox) ConnectToggleCursorRow(cb *func(ListBox)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "toggle-cursor-row", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := ListBox{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "toggle-cursor-row", cbRefPtr)
}

// Emitted to unselect all children of the box, if the selection
// mode permits it.
//
// This is a [keybinding signal](class.SignalAction.html).
//
// The default binding for this signal is
// &lt;kbd&gt;Ctrl&lt;/kbd&gt;-&lt;kbd&gt;Shift&lt;/kbd&gt;-&lt;kbd&gt;a&lt;/kbd&gt;.
func (x *ListBox) ConnectUnselectAll(cb *func(ListBox)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "unselect-all", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := ListBox{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "unselect-all", cbRefPtr)
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *ListBox) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *ListBox) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *ListBox) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *ListBox) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *ListBox) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ListBox) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *ListBox) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ListBox) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *ListBox) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ListBox) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *ListBox) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

// `GtkListBoxRow` is the kind of widget that can be added to a `GtkListBox`.
type ListBoxRow struct {
	Widget
}

func ListBoxRowNewFromInternalPtr(ptr uintptr) *ListBoxRow {
	cls := &ListBoxRow{}
	cls.Ptr = ptr
	return cls
}

var xNewListBoxRow func() uintptr

// Creates a new `GtkListBoxRow`.
func NewListBoxRow() *ListBoxRow {
	var cls *ListBoxRow

	cret := xNewListBoxRow()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ListBoxRow{}
	cls.Ptr = cret
	return cls
}

var xListBoxRowChanged func(uintptr)

// Marks @row as changed, causing any state that depends on this
// to be updated.
//
// This affects sorting, filtering and headers.
//
// Note that calls to this method must be in sync with the data
// used for the row functions. For instance, if the list is
// mirroring some external data set, and *two* rows changed in the
// external data set then when you call gtk_list_box_row_changed()
// on the first row the sort function must only read the new data
// for the first of the two changed rows, otherwise the resorting
// of the rows will be wrong.
//
// This generally means that if you don’t fully control the data
// model you have to duplicate the data that affects the listbox
// row functions into the row widgets themselves. Another alternative
// is to call [method@Gtk.ListBox.invalidate_sort] on any model change,
// but that is more expensive.
func (x *ListBoxRow) Changed() {

	xListBoxRowChanged(x.GoPointer())

}

var xListBoxRowGetActivatable func(uintptr) bool

// Gets whether the row is activatable.
func (x *ListBoxRow) GetActivatable() bool {

	cret := xListBoxRowGetActivatable(x.GoPointer())
	return cret
}

var xListBoxRowGetChild func(uintptr) uintptr

// Gets the child widget of @row.
func (x *ListBoxRow) GetChild() *Widget {
	var cls *Widget

	cret := xListBoxRowGetChild(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xListBoxRowGetHeader func(uintptr) uintptr

// Returns the current header of the @row.
//
// This can be used
// in a [callback@Gtk.ListBoxUpdateHeaderFunc] to see if
// there is a header set already, and if so to update
// the state of it.
func (x *ListBoxRow) GetHeader() *Widget {
	var cls *Widget

	cret := xListBoxRowGetHeader(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xListBoxRowGetIndex func(uintptr) int

// Gets the current index of the @row in its `GtkListBox` container.
func (x *ListBoxRow) GetIndex() int {

	cret := xListBoxRowGetIndex(x.GoPointer())
	return cret
}

var xListBoxRowGetSelectable func(uintptr) bool

// Gets whether the row can be selected.
func (x *ListBoxRow) GetSelectable() bool {

	cret := xListBoxRowGetSelectable(x.GoPointer())
	return cret
}

var xListBoxRowIsSelected func(uintptr) bool

// Returns whether the child is currently selected in its
// `GtkListBox` container.
func (x *ListBoxRow) IsSelected() bool {

	cret := xListBoxRowIsSelected(x.GoPointer())
	return cret
}

var xListBoxRowSetActivatable func(uintptr, bool)

// Set whether the row is activatable.
func (x *ListBoxRow) SetActivatable(ActivatableVar bool) {

	xListBoxRowSetActivatable(x.GoPointer(), ActivatableVar)

}

var xListBoxRowSetChild func(uintptr, uintptr)

// Sets the child widget of @self.
func (x *ListBoxRow) SetChild(ChildVar *Widget) {

	xListBoxRowSetChild(x.GoPointer(), ChildVar.GoPointer())

}

var xListBoxRowSetHeader func(uintptr, uintptr)

// Sets the current header of the @row.
//
// This is only allowed to be called
// from a [callback@Gtk.ListBoxUpdateHeaderFunc].
// It will replace any existing header in the row,
// and be shown in front of the row in the listbox.
func (x *ListBoxRow) SetHeader(HeaderVar *Widget) {

	xListBoxRowSetHeader(x.GoPointer(), HeaderVar.GoPointer())

}

var xListBoxRowSetSelectable func(uintptr, bool)

// Set whether the row can be selected.
func (x *ListBoxRow) SetSelectable(SelectableVar bool) {

	xListBoxRowSetSelectable(x.GoPointer(), SelectableVar)

}

func (c *ListBoxRow) GoPointer() uintptr {
	return c.Ptr
}

func (c *ListBoxRow) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// This is a keybinding signal, which will cause this row to be activated.
//
// If you want to be notified when the user activates a row (by key or not),
// use the [signal@Gtk.ListBox::row-activated] signal on the row’s parent
// `GtkListBox`.
func (x *ListBoxRow) ConnectActivate(cb *func(ListBoxRow)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "activate", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := ListBoxRow{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "activate", cbRefPtr)
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *ListBoxRow) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *ListBoxRow) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *ListBoxRow) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *ListBoxRow) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *ListBoxRow) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ListBoxRow) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *ListBoxRow) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ListBoxRow) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *ListBoxRow) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ListBoxRow) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the action name for @actionable.
func (x *ListBoxRow) GetActionName() string {

	cret := XGtkActionableGetActionName(x.GoPointer())
	return cret
}

// Gets the current target value of @actionable.
func (x *ListBoxRow) GetActionTargetValue() *glib.Variant {

	cret := XGtkActionableGetActionTargetValue(x.GoPointer())
	return cret
}

// Specifies the name of the action with which this widget should be
// associated.
//
// If @action_name is %NULL then the widget will be unassociated from
// any previous action.
//
// Usually this function is used when the widget is located (or will be
// located) within the hierarchy of a `GtkApplicationWindow`.
//
// Names are of the form “win.save” or “app.quit” for actions on the
// containing [class@ApplicationWindow] or its associated [class@Application],
// respectively. This is the same form used for actions in the [class@Gio.Menu]
// associated with the window.
func (x *ListBoxRow) SetActionName(ActionNameVar string) {

	XGtkActionableSetActionName(x.GoPointer(), ActionNameVar)

}

// Sets the target of an actionable widget.
//
// This is a convenience function that calls [ctor@GLib.Variant.new] for
// @format_string and uses the result to call
// [method@Gtk.Actionable.set_action_target_value].
//
// If you are setting a string-valued target and want to set
// the action name at the same time, you can use
// [method@Gtk.Actionable.set_detailed_action_name].
func (x *ListBoxRow) SetActionTarget(FormatStringVar string, varArgs ...interface{}) {

	XGtkActionableSetActionTarget(x.GoPointer(), FormatStringVar, varArgs...)

}

// Sets the target value of an actionable widget.
//
// If @target_value is %NULL then the target value is unset.
//
// The target value has two purposes. First, it is used as the parameter
// to activation of the action associated with the `GtkActionable` widget.
// Second, it is used to determine if the widget should be rendered as
// “active” — the widget is active if the state is equal to the given target.
//
// Consider the example of associating a set of buttons with a [iface@Gio.Action]
// with string state in a typical “radio button” situation. Each button
// will be associated with the same action, but with a different target
// value for that action. Clicking on a particular button will activate
// the action with the target of that button, which will typically cause
// the action’s state to change to that value. Since the action’s state
// is now equal to the target value of the button, the button will now
// be rendered as active (and the other buttons, with different targets,
// rendered inactive).
func (x *ListBoxRow) SetActionTargetValue(TargetValueVar *glib.Variant) {

	XGtkActionableSetActionTargetValue(x.GoPointer(), TargetValueVar)

}

// Sets the action-name and associated string target value of an
// actionable widget.
//
// @detailed_action_name is a string in the format accepted by
// [func@Gio.Action.parse_detailed_name].
func (x *ListBoxRow) SetDetailedActionName(DetailedActionNameVar string) {

	XGtkActionableSetDetailedActionName(x.GoPointer(), DetailedActionNameVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *ListBoxRow) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewListBox, lib, "gtk_list_box_new")

	core.PuregoSafeRegister(&xListBoxAppend, lib, "gtk_list_box_append")
	core.PuregoSafeRegister(&xListBoxBindModel, lib, "gtk_list_box_bind_model")
	core.PuregoSafeRegister(&xListBoxDragHighlightRow, lib, "gtk_list_box_drag_highlight_row")
	core.PuregoSafeRegister(&xListBoxDragUnhighlightRow, lib, "gtk_list_box_drag_unhighlight_row")
	core.PuregoSafeRegister(&xListBoxGetActivateOnSingleClick, lib, "gtk_list_box_get_activate_on_single_click")
	core.PuregoSafeRegister(&xListBoxGetAdjustment, lib, "gtk_list_box_get_adjustment")
	core.PuregoSafeRegister(&xListBoxGetRowAtIndex, lib, "gtk_list_box_get_row_at_index")
	core.PuregoSafeRegister(&xListBoxGetRowAtY, lib, "gtk_list_box_get_row_at_y")
	core.PuregoSafeRegister(&xListBoxGetSelectedRow, lib, "gtk_list_box_get_selected_row")
	core.PuregoSafeRegister(&xListBoxGetSelectedRows, lib, "gtk_list_box_get_selected_rows")
	core.PuregoSafeRegister(&xListBoxGetSelectionMode, lib, "gtk_list_box_get_selection_mode")
	core.PuregoSafeRegister(&xListBoxGetShowSeparators, lib, "gtk_list_box_get_show_separators")
	core.PuregoSafeRegister(&xListBoxInsert, lib, "gtk_list_box_insert")
	core.PuregoSafeRegister(&xListBoxInvalidateFilter, lib, "gtk_list_box_invalidate_filter")
	core.PuregoSafeRegister(&xListBoxInvalidateHeaders, lib, "gtk_list_box_invalidate_headers")
	core.PuregoSafeRegister(&xListBoxInvalidateSort, lib, "gtk_list_box_invalidate_sort")
	core.PuregoSafeRegister(&xListBoxPrepend, lib, "gtk_list_box_prepend")
	core.PuregoSafeRegister(&xListBoxRemove, lib, "gtk_list_box_remove")
	core.PuregoSafeRegister(&xListBoxSelectAll, lib, "gtk_list_box_select_all")
	core.PuregoSafeRegister(&xListBoxSelectRow, lib, "gtk_list_box_select_row")
	core.PuregoSafeRegister(&xListBoxSelectedForeach, lib, "gtk_list_box_selected_foreach")
	core.PuregoSafeRegister(&xListBoxSetActivateOnSingleClick, lib, "gtk_list_box_set_activate_on_single_click")
	core.PuregoSafeRegister(&xListBoxSetAdjustment, lib, "gtk_list_box_set_adjustment")
	core.PuregoSafeRegister(&xListBoxSetFilterFunc, lib, "gtk_list_box_set_filter_func")
	core.PuregoSafeRegister(&xListBoxSetHeaderFunc, lib, "gtk_list_box_set_header_func")
	core.PuregoSafeRegister(&xListBoxSetPlaceholder, lib, "gtk_list_box_set_placeholder")
	core.PuregoSafeRegister(&xListBoxSetSelectionMode, lib, "gtk_list_box_set_selection_mode")
	core.PuregoSafeRegister(&xListBoxSetShowSeparators, lib, "gtk_list_box_set_show_separators")
	core.PuregoSafeRegister(&xListBoxSetSortFunc, lib, "gtk_list_box_set_sort_func")
	core.PuregoSafeRegister(&xListBoxUnselectAll, lib, "gtk_list_box_unselect_all")
	core.PuregoSafeRegister(&xListBoxUnselectRow, lib, "gtk_list_box_unselect_row")

	core.PuregoSafeRegister(&xNewListBoxRow, lib, "gtk_list_box_row_new")

	core.PuregoSafeRegister(&xListBoxRowChanged, lib, "gtk_list_box_row_changed")
	core.PuregoSafeRegister(&xListBoxRowGetActivatable, lib, "gtk_list_box_row_get_activatable")
	core.PuregoSafeRegister(&xListBoxRowGetChild, lib, "gtk_list_box_row_get_child")
	core.PuregoSafeRegister(&xListBoxRowGetHeader, lib, "gtk_list_box_row_get_header")
	core.PuregoSafeRegister(&xListBoxRowGetIndex, lib, "gtk_list_box_row_get_index")
	core.PuregoSafeRegister(&xListBoxRowGetSelectable, lib, "gtk_list_box_row_get_selectable")
	core.PuregoSafeRegister(&xListBoxRowIsSelected, lib, "gtk_list_box_row_is_selected")
	core.PuregoSafeRegister(&xListBoxRowSetActivatable, lib, "gtk_list_box_row_set_activatable")
	core.PuregoSafeRegister(&xListBoxRowSetChild, lib, "gtk_list_box_row_set_child")
	core.PuregoSafeRegister(&xListBoxRowSetHeader, lib, "gtk_list_box_row_set_header")
	core.PuregoSafeRegister(&xListBoxRowSetSelectable, lib, "gtk_list_box_row_set_selectable")

}
