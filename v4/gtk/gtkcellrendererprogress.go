// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// Renders numbers as progress bars
//
// `GtkCellRendererProgress` renders a numeric value as a progress par in a cell.
// Additionally, it can display a text on top of the progress bar.
type CellRendererProgress struct {
	CellRenderer
}

var xCellRendererProgressGLibType func() types.GType

func CellRendererProgressGLibType() types.GType {
	return xCellRendererProgressGLibType()
}

func CellRendererProgressNewFromInternalPtr(ptr uintptr) *CellRendererProgress {
	cls := &CellRendererProgress{}
	cls.Ptr = ptr
	return cls
}

var xNewCellRendererProgress func() uintptr

// Creates a new `GtkCellRendererProgress`.
func NewCellRendererProgress() *CellRendererProgress {
	var cls *CellRendererProgress

	cret := xNewCellRendererProgress()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &CellRendererProgress{}
	cls.Ptr = cret
	return cls
}

func (c *CellRendererProgress) GoPointer() uintptr {
	return c.Ptr
}

func (c *CellRendererProgress) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the orientation of the @orientable.
func (x *CellRendererProgress) GetOrientation() Orientation {

	cret := XGtkOrientableGetOrientation(x.GoPointer())
	return cret
}

// Sets the orientation of the @orientable.
func (x *CellRendererProgress) SetOrientation(OrientationVar Orientation) {

	XGtkOrientableSetOrientation(x.GoPointer(), OrientationVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xCellRendererProgressGLibType, lib, "gtk_cell_renderer_progress_get_type")

	core.PuregoSafeRegister(&xNewCellRendererProgress, lib, "gtk_cell_renderer_progress_new")

}
