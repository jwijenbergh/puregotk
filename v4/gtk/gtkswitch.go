// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// `GtkSwitch` is a "light switch" that has two states: on or off.
//
// ![An example GtkSwitch](switch.png)
//
// The user can control which state should be active by clicking the
// empty area, or by dragging the handle.
//
// `GtkSwitch` can also handle situations where the underlying state
// changes with a delay. See [signal@GtkSwitch::state-set] for details.
//
// # CSS nodes
//
// ```
// switch
// ├── label
// ├── label
// ╰── slider
// ```
//
// `GtkSwitch` has four css nodes, the main node with the name switch and
// subnodes for the slider and the on and off labels. Neither of them is
// using any style classes.
//
// # Accessibility
//
// `GtkSwitch` uses the %GTK_ACCESSIBLE_ROLE_SWITCH role.
type Switch struct {
	Widget
}

var xSwitchGLibType func() types.GType

func SwitchGLibType() types.GType {
	return xSwitchGLibType()
}

func SwitchNewFromInternalPtr(ptr uintptr) *Switch {
	cls := &Switch{}
	cls.Ptr = ptr
	return cls
}

var xNewSwitch func() uintptr

// Creates a new `GtkSwitch` widget.
func NewSwitch() *Switch {
	var cls *Switch

	cret := xNewSwitch()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Switch{}
	cls.Ptr = cret
	return cls
}

var xSwitchGetActive func(uintptr) bool

// Gets whether the `GtkSwitch` is in its “on” or “off” state.
func (x *Switch) GetActive() bool {

	cret := xSwitchGetActive(x.GoPointer())
	return cret
}

var xSwitchGetState func(uintptr) bool

// Gets the underlying state of the `GtkSwitch`.
func (x *Switch) GetState() bool {

	cret := xSwitchGetState(x.GoPointer())
	return cret
}

var xSwitchSetActive func(uintptr, bool)

// Changes the state of @self to the desired one.
func (x *Switch) SetActive(IsActiveVar bool) {

	xSwitchSetActive(x.GoPointer(), IsActiveVar)

}

var xSwitchSetState func(uintptr, bool)

// Sets the underlying state of the `GtkSwitch`.
//
// Normally, this is the same as [property@Gtk.Switch:active], unless
// the switch is set up for delayed state changes. This function is
// typically called from a [signal@Gtk.Switch::state-set] signal handler.
//
// See [signal@Gtk.Switch::state-set] for details.
func (x *Switch) SetState(StateVar bool) {

	xSwitchSetState(x.GoPointer(), StateVar)

}

func (c *Switch) GoPointer() uintptr {
	return c.Ptr
}

func (c *Switch) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted to animate the switch.
//
// Applications should never connect to this signal,
// but use the [property@Gtk.Switch:active] property.
func (x *Switch) ConnectActivate(cb *func(Switch)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "activate", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := Switch{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "activate", cbRefPtr)
}

// Emitted to change the underlying state.
//
// The ::state-set signal is emitted when the user changes the switch
// position. The default handler keeps the state in sync with the
// [property@Gtk.Switch:active] property.
//
// To implement delayed state change, applications can connect to this
// signal, initiate the change of the underlying state, and call
// [method@Gtk.Switch.set_state] when the underlying state change is
// complete. The signal handler should return %TRUE to prevent the
// default handler from running.
//
// Visually, the underlying state is represented by the trough color of
// the switch, while the [property@Gtk.Switch:active] property is
// represented by the position of the switch.
func (x *Switch) ConnectStateSet(cb *func(Switch, bool) bool) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "state-set", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, StateVarp bool) bool {
		fa := Switch{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa, StateVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "state-set", cbRefPtr)
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *Switch) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *Switch) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *Switch) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *Switch) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *Switch) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Switch) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *Switch) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Switch) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *Switch) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Switch) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the action name for @actionable.
func (x *Switch) GetActionName() string {

	cret := XGtkActionableGetActionName(x.GoPointer())
	return cret
}

// Gets the current target value of @actionable.
func (x *Switch) GetActionTargetValue() *glib.Variant {

	cret := XGtkActionableGetActionTargetValue(x.GoPointer())
	return cret
}

// Specifies the name of the action with which this widget should be
// associated.
//
// If @action_name is %NULL then the widget will be unassociated from
// any previous action.
//
// Usually this function is used when the widget is located (or will be
// located) within the hierarchy of a `GtkApplicationWindow`.
//
// Names are of the form “win.save” or “app.quit” for actions on the
// containing [class@ApplicationWindow] or its associated [class@Application],
// respectively. This is the same form used for actions in the [class@Gio.Menu]
// associated with the window.
func (x *Switch) SetActionName(ActionNameVar string) {

	XGtkActionableSetActionName(x.GoPointer(), ActionNameVar)

}

// Sets the target of an actionable widget.
//
// This is a convenience function that calls [ctor@GLib.Variant.new] for
// @format_string and uses the result to call
// [method@Gtk.Actionable.set_action_target_value].
//
// If you are setting a string-valued target and want to set
// the action name at the same time, you can use
// [method@Gtk.Actionable.set_detailed_action_name].
func (x *Switch) SetActionTarget(FormatStringVar string, varArgs ...interface{}) {

	XGtkActionableSetActionTarget(x.GoPointer(), FormatStringVar, varArgs...)

}

// Sets the target value of an actionable widget.
//
// If @target_value is %NULL then the target value is unset.
//
// The target value has two purposes. First, it is used as the parameter
// to activation of the action associated with the `GtkActionable` widget.
// Second, it is used to determine if the widget should be rendered as
// “active” — the widget is active if the state is equal to the given target.
//
// Consider the example of associating a set of buttons with a [iface@Gio.Action]
// with string state in a typical “radio button” situation. Each button
// will be associated with the same action, but with a different target
// value for that action. Clicking on a particular button will activate
// the action with the target of that button, which will typically cause
// the action’s state to change to that value. Since the action’s state
// is now equal to the target value of the button, the button will now
// be rendered as active (and the other buttons, with different targets,
// rendered inactive).
func (x *Switch) SetActionTargetValue(TargetValueVar *glib.Variant) {

	XGtkActionableSetActionTargetValue(x.GoPointer(), TargetValueVar)

}

// Sets the action-name and associated string target value of an
// actionable widget.
//
// @detailed_action_name is a string in the format accepted by
// [func@Gio.Action.parse_detailed_name].
func (x *Switch) SetDetailedActionName(DetailedActionNameVar string) {

	XGtkActionableSetDetailedActionName(x.GoPointer(), DetailedActionNameVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *Switch) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xSwitchGLibType, lib, "gtk_switch_get_type")

	core.PuregoSafeRegister(&xNewSwitch, lib, "gtk_switch_new")

	core.PuregoSafeRegister(&xSwitchGetActive, lib, "gtk_switch_get_active")
	core.PuregoSafeRegister(&xSwitchGetState, lib, "gtk_switch_get_state")
	core.PuregoSafeRegister(&xSwitchSetActive, lib, "gtk_switch_set_active")
	core.PuregoSafeRegister(&xSwitchSetState, lib, "gtk_switch_set_state")

}
