// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type CssProviderClass struct {
}

func (x *CssProviderClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type CssProviderPrivate struct {
}

func (x *CssProviderPrivate) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkCssProvider` is an object implementing the `GtkStyleProvider` interface
// for CSS.
//
// It is able to parse CSS-like input in order to style widgets.
//
// An application can make GTK parse a specific CSS style sheet by calling
// [method@Gtk.CssProvider.load_from_file] or
// [method@Gtk.CssProvider.load_from_resource]
// and adding the provider with [method@Gtk.StyleContext.add_provider] or
// [func@Gtk.StyleContext.add_provider_for_display].
//
// In addition, certain files will be read when GTK is initialized.
// First, the file `$XDG_CONFIG_HOME/gtk-4.0/gtk.css` is loaded if it
// exists. Then, GTK loads the first existing file among
// `XDG_DATA_HOME/themes/THEME/gtk-VERSION/gtk-VARIANT.css`,
// `$HOME/.themes/THEME/gtk-VERSION/gtk-VARIANT.css`,
// `$XDG_DATA_DIRS/themes/THEME/gtk-VERSION/gtk-VARIANT.css` and
// `DATADIR/share/themes/THEME/gtk-VERSION/gtk-VARIANT.css`,
// where `THEME` is the name of the current theme (see the
// [property@Gtk.Settings:gtk-theme-name] setting), `VARIANT` is the
// variant to load (see the
// [property@Gtk.Settings:gtk-application-prefer-dark-theme] setting),
// `DATADIR` is the prefix configured when GTK was compiled (unless
// overridden by the `GTK_DATA_PREFIX` environment variable), and
// `VERSION` is the GTK version number. If no file is found for the
// current version, GTK tries older versions all the way back to 4.0.
//
// To track errors while loading CSS, connect to the
// [signal@Gtk.CssProvider::parsing-error] signal.
type CssProvider struct {
	gobject.Object
}

var xCssProviderGLibType func() types.GType

func CssProviderGLibType() types.GType {
	return xCssProviderGLibType()
}

func CssProviderNewFromInternalPtr(ptr uintptr) *CssProvider {
	cls := &CssProvider{}
	cls.Ptr = ptr
	return cls
}

var xNewCssProvider func() uintptr

// Returns a newly created `GtkCssProvider`.
func NewCssProvider() *CssProvider {
	var cls *CssProvider

	cret := xNewCssProvider()

	if cret == 0 {
		return nil
	}
	cls = &CssProvider{}
	cls.Ptr = cret
	return cls
}

var xCssProviderLoadFromData func(uintptr, string, int)

// Loads @data into @css_provider.
//
// This clears any previously loaded information.
func (x *CssProvider) LoadFromData(DataVar string, LengthVar int) {

	xCssProviderLoadFromData(x.GoPointer(), DataVar, LengthVar)

}

var xCssProviderLoadFromFile func(uintptr, uintptr)

// Loads the data contained in @file into @css_provider.
//
// This clears any previously loaded information.
func (x *CssProvider) LoadFromFile(FileVar gio.File) {

	xCssProviderLoadFromFile(x.GoPointer(), FileVar.GoPointer())

}

var xCssProviderLoadFromPath func(uintptr, string)

// Loads the data contained in @path into @css_provider.
//
// This clears any previously loaded information.
func (x *CssProvider) LoadFromPath(PathVar string) {

	xCssProviderLoadFromPath(x.GoPointer(), PathVar)

}

var xCssProviderLoadFromResource func(uintptr, string)

// Loads the data contained in the resource at @resource_path into
// the @css_provider.
//
// This clears any previously loaded information.
func (x *CssProvider) LoadFromResource(ResourcePathVar string) {

	xCssProviderLoadFromResource(x.GoPointer(), ResourcePathVar)

}

var xCssProviderLoadNamed func(uintptr, string, string)

// Loads a theme from the usual theme paths.
//
// The actual process of finding the theme might change between
// releases, but it is guaranteed that this function uses the same
// mechanism to load the theme that GTK uses for loading its own theme.
func (x *CssProvider) LoadNamed(NameVar string, VariantVar string) {

	xCssProviderLoadNamed(x.GoPointer(), NameVar, VariantVar)

}

var xCssProviderToString func(uintptr) string

// Converts the @provider into a string representation in CSS
// format.
//
// Using [method@Gtk.CssProvider.load_from_data] with the return
// value from this function on a new provider created with
// [ctor@Gtk.CssProvider.new] will basically create a duplicate
// of this @provider.
func (x *CssProvider) ToString() string {

	cret := xCssProviderToString(x.GoPointer())
	return cret
}

func (c *CssProvider) GoPointer() uintptr {
	return c.Ptr
}

func (c *CssProvider) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Signals that a parsing error occurred.
//
// The @path, @line and @position describe the actual location of
// the error as accurately as possible.
//
// Parsing errors are never fatal, so the parsing will resume after
// the error. Errors may however cause parts of the given data or
// even all of it to not be parsed at all. So it is a useful idea
// to check that the parsing succeeds by connecting to this signal.
//
// Note that this signal may be emitted at any time as the css provider
// may opt to defer parsing parts or all of the input to a later time
// than when a loading function was called.
func (x *CssProvider) ConnectParsingError(cb *func(CssProvider, uintptr, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "parsing-error", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, SectionVarp uintptr, ErrorVarp uintptr) {
		fa := CssProvider{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, SectionVarp, ErrorVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "parsing-error", cbRefPtr)
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xCssProviderGLibType, lib, "gtk_css_provider_get_type")

	core.PuregoSafeRegister(&xNewCssProvider, lib, "gtk_css_provider_new")

	core.PuregoSafeRegister(&xCssProviderLoadFromData, lib, "gtk_css_provider_load_from_data")
	core.PuregoSafeRegister(&xCssProviderLoadFromFile, lib, "gtk_css_provider_load_from_file")
	core.PuregoSafeRegister(&xCssProviderLoadFromPath, lib, "gtk_css_provider_load_from_path")
	core.PuregoSafeRegister(&xCssProviderLoadFromResource, lib, "gtk_css_provider_load_from_resource")
	core.PuregoSafeRegister(&xCssProviderLoadNamed, lib, "gtk_css_provider_load_named")
	core.PuregoSafeRegister(&xCssProviderToString, lib, "gtk_css_provider_to_string")

}
