// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type AnyFilterClass struct {
	_ structs.HostLayout
}

func (x *AnyFilterClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type EveryFilterClass struct {
	_ structs.HostLayout
}

func (x *EveryFilterClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type MultiFilterClass struct {
	_ structs.HostLayout
}

func (x *MultiFilterClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkAnyFilter` matches an item when at least one of its filters matches.
//
// To add filters to a `GtkAnyFilter`, use [method@Gtk.MultiFilter.append].
type AnyFilter struct {
	MultiFilter
}

var xAnyFilterGLibType func() types.GType

func AnyFilterGLibType() types.GType {
	return xAnyFilterGLibType()
}

func AnyFilterNewFromInternalPtr(ptr uintptr) *AnyFilter {
	cls := &AnyFilter{}
	cls.Ptr = ptr
	return cls
}

var xNewAnyFilter func() uintptr

// Creates a new empty "any" filter.
//
// Use [method@Gtk.MultiFilter.append] to add filters to it.
//
// This filter matches an item if any of the filters added to it
// matches the item. In particular, this means that if no filter
// has been added to it, the filter matches no item.
func NewAnyFilter() *AnyFilter {
	var cls *AnyFilter

	cret := xNewAnyFilter()

	if cret == 0 {
		return nil
	}
	cls = &AnyFilter{}
	cls.Ptr = cret
	return cls
}

func (c *AnyFilter) GoPointer() uintptr {
	return c.Ptr
}

func (c *AnyFilter) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// See also: g_list_model_get_n_items()
func (x *AnyFilter) GetItem(PositionVar uint) uintptr {

	cret := gio.XGListModelGetItem(x.GoPointer(), PositionVar)
	return cret
}

// Gets the type of the items in @list.
//
// All items returned from g_list_model_get_item() are of the type
// returned by this function, or a subtype, or if the type is an
// interface, they are an implementation of that interface.
//
// The item type of a #GListModel can not change during the life of the
// model.
func (x *AnyFilter) GetItemType() types.GType {

	cret := gio.XGListModelGetItemType(x.GoPointer())
	return cret
}

// Gets the number of items in @list.
//
// Depending on the model implementation, calling this function may be
// less efficient than iterating the list with increasing values for
// @position until g_list_model_get_item() returns %NULL.
func (x *AnyFilter) GetNItems() uint {

	cret := gio.XGListModelGetNItems(x.GoPointer())
	return cret
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// This function is meant to be used by language bindings in place
// of g_list_model_get_item().
//
// See also: g_list_model_get_n_items()
func (x *AnyFilter) GetObject(PositionVar uint) *gobject.Object {
	var cls *gobject.Object

	cret := gio.XGListModelGetObject(x.GoPointer(), PositionVar)

	if cret == 0 {
		return nil
	}
	cls = &gobject.Object{}
	cls.Ptr = cret
	return cls
}

// Emits the #GListModel::items-changed signal on @list.
//
// This function should only be called by classes implementing
// #GListModel. It has to be called after the internal representation
// of @list has been updated, because handlers connected to this signal
// might query the new state of the list.
//
// Implementations must only make changes to the model (as visible to
// its consumer) in places that will not cause problems for that
// consumer.  For models that are driven directly by a write API (such
// as #GListStore), changes can be reported in response to uses of that
// API.  For models that represent remote data, changes should only be
// made from a fresh mainloop dispatch.  It is particularly not
// permitted to make changes in response to a call to the #GListModel
// consumer API.
//
// Stated another way: in general, it is assumed that code making a
// series of accesses to the model via the API, without returning to the
// mainloop, and without calling other code, will continue to view the
// same contents of the model.
func (x *AnyFilter) ItemsChanged(PositionVar uint, RemovedVar uint, AddedVar uint) {

	gio.XGListModelItemsChanged(x.GoPointer(), PositionVar, RemovedVar, AddedVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *AnyFilter) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

// `GtkEveryFilter` matches an item when each of its filters matches.
//
// To add filters to a `GtkEveryFilter`, use [method@Gtk.MultiFilter.append].
type EveryFilter struct {
	MultiFilter
}

var xEveryFilterGLibType func() types.GType

func EveryFilterGLibType() types.GType {
	return xEveryFilterGLibType()
}

func EveryFilterNewFromInternalPtr(ptr uintptr) *EveryFilter {
	cls := &EveryFilter{}
	cls.Ptr = ptr
	return cls
}

var xNewEveryFilter func() uintptr

// Creates a new empty "every" filter.
//
// Use [method@Gtk.MultiFilter.append] to add filters to it.
//
// This filter matches an item if each of the filters added to it
// matches the item. In particular, this means that if no filter
// has been added to it, the filter matches every item.
func NewEveryFilter() *EveryFilter {
	var cls *EveryFilter

	cret := xNewEveryFilter()

	if cret == 0 {
		return nil
	}
	cls = &EveryFilter{}
	cls.Ptr = cret
	return cls
}

func (c *EveryFilter) GoPointer() uintptr {
	return c.Ptr
}

func (c *EveryFilter) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// See also: g_list_model_get_n_items()
func (x *EveryFilter) GetItem(PositionVar uint) uintptr {

	cret := gio.XGListModelGetItem(x.GoPointer(), PositionVar)
	return cret
}

// Gets the type of the items in @list.
//
// All items returned from g_list_model_get_item() are of the type
// returned by this function, or a subtype, or if the type is an
// interface, they are an implementation of that interface.
//
// The item type of a #GListModel can not change during the life of the
// model.
func (x *EveryFilter) GetItemType() types.GType {

	cret := gio.XGListModelGetItemType(x.GoPointer())
	return cret
}

// Gets the number of items in @list.
//
// Depending on the model implementation, calling this function may be
// less efficient than iterating the list with increasing values for
// @position until g_list_model_get_item() returns %NULL.
func (x *EveryFilter) GetNItems() uint {

	cret := gio.XGListModelGetNItems(x.GoPointer())
	return cret
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// This function is meant to be used by language bindings in place
// of g_list_model_get_item().
//
// See also: g_list_model_get_n_items()
func (x *EveryFilter) GetObject(PositionVar uint) *gobject.Object {
	var cls *gobject.Object

	cret := gio.XGListModelGetObject(x.GoPointer(), PositionVar)

	if cret == 0 {
		return nil
	}
	cls = &gobject.Object{}
	cls.Ptr = cret
	return cls
}

// Emits the #GListModel::items-changed signal on @list.
//
// This function should only be called by classes implementing
// #GListModel. It has to be called after the internal representation
// of @list has been updated, because handlers connected to this signal
// might query the new state of the list.
//
// Implementations must only make changes to the model (as visible to
// its consumer) in places that will not cause problems for that
// consumer.  For models that are driven directly by a write API (such
// as #GListStore), changes can be reported in response to uses of that
// API.  For models that represent remote data, changes should only be
// made from a fresh mainloop dispatch.  It is particularly not
// permitted to make changes in response to a call to the #GListModel
// consumer API.
//
// Stated another way: in general, it is assumed that code making a
// series of accesses to the model via the API, without returning to the
// mainloop, and without calling other code, will continue to view the
// same contents of the model.
func (x *EveryFilter) ItemsChanged(PositionVar uint, RemovedVar uint, AddedVar uint) {

	gio.XGListModelItemsChanged(x.GoPointer(), PositionVar, RemovedVar, AddedVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *EveryFilter) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

// `GtkMultiFilter` is the base class for filters that combine multiple filters.
type MultiFilter struct {
	Filter
}

var xMultiFilterGLibType func() types.GType

func MultiFilterGLibType() types.GType {
	return xMultiFilterGLibType()
}

func MultiFilterNewFromInternalPtr(ptr uintptr) *MultiFilter {
	cls := &MultiFilter{}
	cls.Ptr = ptr
	return cls
}

var xMultiFilterAppend func(uintptr, uintptr)

// Adds a @filter to @self to use for matching.
func (x *MultiFilter) Append(FilterVar *Filter) {

	xMultiFilterAppend(x.GoPointer(), FilterVar.GoPointer())

}

var xMultiFilterRemove func(uintptr, uint)

// Removes the filter at the given @position from the list of filters used
// by @self.
//
// If @position is larger than the number of filters, nothing happens and
// the function returns.
func (x *MultiFilter) Remove(PositionVar uint) {

	xMultiFilterRemove(x.GoPointer(), PositionVar)

}

func (c *MultiFilter) GoPointer() uintptr {
	return c.Ptr
}

func (c *MultiFilter) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// See also: g_list_model_get_n_items()
func (x *MultiFilter) GetItem(PositionVar uint) uintptr {

	cret := gio.XGListModelGetItem(x.GoPointer(), PositionVar)
	return cret
}

// Gets the type of the items in @list.
//
// All items returned from g_list_model_get_item() are of the type
// returned by this function, or a subtype, or if the type is an
// interface, they are an implementation of that interface.
//
// The item type of a #GListModel can not change during the life of the
// model.
func (x *MultiFilter) GetItemType() types.GType {

	cret := gio.XGListModelGetItemType(x.GoPointer())
	return cret
}

// Gets the number of items in @list.
//
// Depending on the model implementation, calling this function may be
// less efficient than iterating the list with increasing values for
// @position until g_list_model_get_item() returns %NULL.
func (x *MultiFilter) GetNItems() uint {

	cret := gio.XGListModelGetNItems(x.GoPointer())
	return cret
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// This function is meant to be used by language bindings in place
// of g_list_model_get_item().
//
// See also: g_list_model_get_n_items()
func (x *MultiFilter) GetObject(PositionVar uint) *gobject.Object {
	var cls *gobject.Object

	cret := gio.XGListModelGetObject(x.GoPointer(), PositionVar)

	if cret == 0 {
		return nil
	}
	cls = &gobject.Object{}
	cls.Ptr = cret
	return cls
}

// Emits the #GListModel::items-changed signal on @list.
//
// This function should only be called by classes implementing
// #GListModel. It has to be called after the internal representation
// of @list has been updated, because handlers connected to this signal
// might query the new state of the list.
//
// Implementations must only make changes to the model (as visible to
// its consumer) in places that will not cause problems for that
// consumer.  For models that are driven directly by a write API (such
// as #GListStore), changes can be reported in response to uses of that
// API.  For models that represent remote data, changes should only be
// made from a fresh mainloop dispatch.  It is particularly not
// permitted to make changes in response to a call to the #GListModel
// consumer API.
//
// Stated another way: in general, it is assumed that code making a
// series of accesses to the model via the API, without returning to the
// mainloop, and without calling other code, will continue to view the
// same contents of the model.
func (x *MultiFilter) ItemsChanged(PositionVar uint, RemovedVar uint, AddedVar uint) {

	gio.XGListModelItemsChanged(x.GoPointer(), PositionVar, RemovedVar, AddedVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *MultiFilter) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xAnyFilterGLibType, lib, "gtk_any_filter_get_type")

	core.PuregoSafeRegister(&xNewAnyFilter, lib, "gtk_any_filter_new")

	core.PuregoSafeRegister(&xEveryFilterGLibType, lib, "gtk_every_filter_get_type")

	core.PuregoSafeRegister(&xNewEveryFilter, lib, "gtk_every_filter_new")

	core.PuregoSafeRegister(&xMultiFilterGLibType, lib, "gtk_multi_filter_get_type")

	core.PuregoSafeRegister(&xMultiFilterAppend, lib, "gtk_multi_filter_append")
	core.PuregoSafeRegister(&xMultiFilterRemove, lib, "gtk_multi_filter_remove")

}
