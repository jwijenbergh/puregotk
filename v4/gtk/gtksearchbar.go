// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

// `GtkSearchBar` is a container made to have a search entry.
//
// ![An example GtkSearchBar](search-bar.png)
//
// It can also contain additional widgets, such as drop-down menus,
// or buttons.  The search bar would appear when a search is started
// through typing on the keyboard, or the application’s search mode
// is toggled on.
//
// For keyboard presses to start a search, the search bar must be told
// of a widget to capture key events from through
// [method@Gtk.SearchBar.set_key_capture_widget]. This widget will
// typically be the top-level window, or a parent container of the
// search bar. Common shortcuts such as Ctrl+F should be handled as an
// application action, or through the menu items.
//
// You will also need to tell the search bar about which entry you
// are using as your search entry using [method@Gtk.SearchBar.connect_entry].
//
// ## Creating a search bar
//
// The following example shows you how to create a more complex search
// entry.
//
// [A simple example](https://gitlab.gnome.org/GNOME/gtk/tree/main/examples/search-bar.c)
//
// # CSS nodes
//
// ```
// searchbar
// ╰── revealer
//
//	╰── box
//	     ├── [child]
//	     ╰── [button.close]
//
// ```
//
// `GtkSearchBar` has a main CSS node with name searchbar. It has a child
// node with name revealer that contains a node with name box. The box node
// contains both the CSS node of the child widget as well as an optional button
// node which gets the .close style class applied.
//
// # Accessibility
//
// `GtkSearchBar` uses the %GTK_ACCESSIBLE_ROLE_SEARCH role.
type SearchBar struct {
	Widget
}

func SearchBarNewFromInternalPtr(ptr uintptr) *SearchBar {
	cls := &SearchBar{}
	cls.Ptr = ptr
	return cls
}

var xNewSearchBar func() uintptr

// Creates a `GtkSearchBar`.
//
// You will need to tell it about which widget is going to be your text
// entry using [method@Gtk.SearchBar.connect_entry].
func NewSearchBar() *SearchBar {
	var cls *SearchBar

	cret := xNewSearchBar()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &SearchBar{}
	cls.Ptr = cret
	return cls
}

var xSearchBarConnectEntry func(uintptr, uintptr)

// Connects the `GtkEditable widget passed as the one to be used in
// this search bar.
//
// The entry should be a descendant of the search bar. Calling this
// function manually is only required if the entry isn’t the direct
// child of the search bar (as in our main example).
func (x *SearchBar) ConnectEntry(EntryVar Editable) {

	xSearchBarConnectEntry(x.GoPointer(), EntryVar.GoPointer())

}

var xSearchBarGetChild func(uintptr) uintptr

// Gets the child widget of @bar.
func (x *SearchBar) GetChild() *Widget {
	var cls *Widget

	cret := xSearchBarGetChild(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xSearchBarGetKeyCaptureWidget func(uintptr) uintptr

// Gets the widget that @bar is capturing key events from.
func (x *SearchBar) GetKeyCaptureWidget() *Widget {
	var cls *Widget

	cret := xSearchBarGetKeyCaptureWidget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xSearchBarGetSearchMode func(uintptr) bool

// Returns whether the search mode is on or off.
func (x *SearchBar) GetSearchMode() bool {

	cret := xSearchBarGetSearchMode(x.GoPointer())
	return cret
}

var xSearchBarGetShowCloseButton func(uintptr) bool

// Returns whether the close button is shown.
func (x *SearchBar) GetShowCloseButton() bool {

	cret := xSearchBarGetShowCloseButton(x.GoPointer())
	return cret
}

var xSearchBarSetChild func(uintptr, uintptr)

// Sets the child widget of @bar.
func (x *SearchBar) SetChild(ChildVar *Widget) {

	xSearchBarSetChild(x.GoPointer(), ChildVar.GoPointer())

}

var xSearchBarSetKeyCaptureWidget func(uintptr, uintptr)

// Sets @widget as the widget that @bar will capture key events
// from.
//
// If key events are handled by the search bar, the bar will
// be shown, and the entry populated with the entered text.
//
// Note that despite the name of this function, the events
// are only 'captured' in the bubble phase, which means that
// editable child widgets of @widget will receive text input
// before it gets captured. If that is not desired, you can
// capture and forward the events yourself with
// [method@Gtk.EventControllerKey.forward].
func (x *SearchBar) SetKeyCaptureWidget(WidgetVar *Widget) {

	xSearchBarSetKeyCaptureWidget(x.GoPointer(), WidgetVar.GoPointer())

}

var xSearchBarSetSearchMode func(uintptr, bool)

// Switches the search mode on or off.
func (x *SearchBar) SetSearchMode(SearchModeVar bool) {

	xSearchBarSetSearchMode(x.GoPointer(), SearchModeVar)

}

var xSearchBarSetShowCloseButton func(uintptr, bool)

// Shows or hides the close button.
//
// Applications that already have a “search” toggle button should not
// show a close button in their search bar, as it duplicates the role
// of the toggle button.
func (x *SearchBar) SetShowCloseButton(VisibleVar bool) {

	xSearchBarSetShowCloseButton(x.GoPointer(), VisibleVar)

}

func (c *SearchBar) GoPointer() uintptr {
	return c.Ptr
}

func (c *SearchBar) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *SearchBar) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *SearchBar) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *SearchBar) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *SearchBar) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *SearchBar) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *SearchBar) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *SearchBar) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *SearchBar) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *SearchBar) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *SearchBar) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *SearchBar) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewSearchBar, lib, "gtk_search_bar_new")

	core.PuregoSafeRegister(&xSearchBarConnectEntry, lib, "gtk_search_bar_connect_entry")
	core.PuregoSafeRegister(&xSearchBarGetChild, lib, "gtk_search_bar_get_child")
	core.PuregoSafeRegister(&xSearchBarGetKeyCaptureWidget, lib, "gtk_search_bar_get_key_capture_widget")
	core.PuregoSafeRegister(&xSearchBarGetSearchMode, lib, "gtk_search_bar_get_search_mode")
	core.PuregoSafeRegister(&xSearchBarGetShowCloseButton, lib, "gtk_search_bar_get_show_close_button")
	core.PuregoSafeRegister(&xSearchBarSetChild, lib, "gtk_search_bar_set_child")
	core.PuregoSafeRegister(&xSearchBarSetKeyCaptureWidget, lib, "gtk_search_bar_set_key_capture_widget")
	core.PuregoSafeRegister(&xSearchBarSetSearchMode, lib, "gtk_search_bar_set_search_mode")
	core.PuregoSafeRegister(&xSearchBarSetShowCloseButton, lib, "gtk_search_bar_set_show_close_button")

}
