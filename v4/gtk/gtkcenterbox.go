// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type CenterBoxClass struct {
}

func (x *CenterBoxClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkCenterBox` arranges three children in a row, keeping the middle child
// centered as well as possible.
//
// ![An example GtkCenterBox](centerbox.png)
//
// To add children to `GtkCenterBox`, use [method@Gtk.CenterBox.set_start_widget],
// [method@Gtk.CenterBox.set_center_widget] and
// [method@Gtk.CenterBox.set_end_widget].
//
// The sizing and positioning of children can be influenced with the
// align and expand properties of the children.
//
// # GtkCenterBox as GtkBuildable
//
// The `GtkCenterBox` implementation of the `GtkBuildable` interface
// supports placing children in the 3 positions by specifying “start”, “center”
// or “end” as the “type” attribute of a &lt;child&gt; element.
//
// # CSS nodes
//
// `GtkCenterBox` uses a single CSS node with the name “box”,
//
// The first child of the `GtkCenterBox` will be allocated depending on the
// text direction, i.e. in left-to-right layouts it will be allocated on the
// left and in right-to-left layouts on the right.
//
// In vertical orientation, the nodes of the children are arranged from top to
// bottom.
//
// # Accessibility
//
// `GtkCenterBox` uses the %GTK_ACCESSIBLE_ROLE_GROUP role.
type CenterBox struct {
	Widget
}

var xCenterBoxGLibType func() types.GType

func CenterBoxGLibType() types.GType {
	return xCenterBoxGLibType()
}

func CenterBoxNewFromInternalPtr(ptr uintptr) *CenterBox {
	cls := &CenterBox{}
	cls.Ptr = ptr
	return cls
}

var xNewCenterBox func() uintptr

// Creates a new `GtkCenterBox`.
func NewCenterBox() *CenterBox {
	var cls *CenterBox

	cret := xNewCenterBox()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &CenterBox{}
	cls.Ptr = cret
	return cls
}

var xCenterBoxGetBaselinePosition func(uintptr) BaselinePosition

// Gets the value set by gtk_center_box_set_baseline_position().
func (x *CenterBox) GetBaselinePosition() BaselinePosition {

	cret := xCenterBoxGetBaselinePosition(x.GoPointer())
	return cret
}

var xCenterBoxGetCenterWidget func(uintptr) uintptr

// Gets the center widget, or %NULL if there is none.
func (x *CenterBox) GetCenterWidget() *Widget {
	var cls *Widget

	cret := xCenterBoxGetCenterWidget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xCenterBoxGetEndWidget func(uintptr) uintptr

// Gets the end widget, or %NULL if there is none.
func (x *CenterBox) GetEndWidget() *Widget {
	var cls *Widget

	cret := xCenterBoxGetEndWidget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xCenterBoxGetStartWidget func(uintptr) uintptr

// Gets the start widget, or %NULL if there is none.
func (x *CenterBox) GetStartWidget() *Widget {
	var cls *Widget

	cret := xCenterBoxGetStartWidget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xCenterBoxSetBaselinePosition func(uintptr, BaselinePosition)

// Sets the baseline position of a center box.
//
// This affects only horizontal boxes with at least one baseline
// aligned child. If there is more vertical space available than
// requested, and the baseline is not allocated by the parent then
// @position is used to allocate the baseline wrt. the extra space
// available.
func (x *CenterBox) SetBaselinePosition(PositionVar BaselinePosition) {

	xCenterBoxSetBaselinePosition(x.GoPointer(), PositionVar)

}

var xCenterBoxSetCenterWidget func(uintptr, uintptr)

// Sets the center widget.
//
// To remove the existing center widget, pas %NULL.
func (x *CenterBox) SetCenterWidget(ChildVar *Widget) {

	xCenterBoxSetCenterWidget(x.GoPointer(), ChildVar.GoPointer())

}

var xCenterBoxSetEndWidget func(uintptr, uintptr)

// Sets the end widget.
//
// To remove the existing end widget, pass %NULL.
func (x *CenterBox) SetEndWidget(ChildVar *Widget) {

	xCenterBoxSetEndWidget(x.GoPointer(), ChildVar.GoPointer())

}

var xCenterBoxSetStartWidget func(uintptr, uintptr)

// Sets the start widget.
//
// To remove the existing start widget, pass %NULL.
func (x *CenterBox) SetStartWidget(ChildVar *Widget) {

	xCenterBoxSetStartWidget(x.GoPointer(), ChildVar.GoPointer())

}

func (c *CenterBox) GoPointer() uintptr {
	return c.Ptr
}

func (c *CenterBox) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *CenterBox) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *CenterBox) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *CenterBox) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *CenterBox) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *CenterBox) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *CenterBox) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *CenterBox) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *CenterBox) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *CenterBox) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *CenterBox) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *CenterBox) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

// Retrieves the orientation of the @orientable.
func (x *CenterBox) GetOrientation() Orientation {

	cret := XGtkOrientableGetOrientation(x.GoPointer())
	return cret
}

// Sets the orientation of the @orientable.
func (x *CenterBox) SetOrientation(OrientationVar Orientation) {

	XGtkOrientableSetOrientation(x.GoPointer(), OrientationVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xCenterBoxGLibType, lib, "gtk_center_box_get_type")

	core.PuregoSafeRegister(&xNewCenterBox, lib, "gtk_center_box_new")

	core.PuregoSafeRegister(&xCenterBoxGetBaselinePosition, lib, "gtk_center_box_get_baseline_position")
	core.PuregoSafeRegister(&xCenterBoxGetCenterWidget, lib, "gtk_center_box_get_center_widget")
	core.PuregoSafeRegister(&xCenterBoxGetEndWidget, lib, "gtk_center_box_get_end_widget")
	core.PuregoSafeRegister(&xCenterBoxGetStartWidget, lib, "gtk_center_box_get_start_widget")
	core.PuregoSafeRegister(&xCenterBoxSetBaselinePosition, lib, "gtk_center_box_set_baseline_position")
	core.PuregoSafeRegister(&xCenterBoxSetCenterWidget, lib, "gtk_center_box_set_center_widget")
	core.PuregoSafeRegister(&xCenterBoxSetEndWidget, lib, "gtk_center_box_set_end_widget")
	core.PuregoSafeRegister(&xCenterBoxSetStartWidget, lib, "gtk_center_box_set_start_widget")

}
