// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// `GtkPopoverMenuBar` presents a horizontal bar of items that pop
// up popover menus when clicked.
//
// ![An example GtkPopoverMenuBar](menubar.png)
//
// The only way to create instances of `GtkPopoverMenuBar` is
// from a `GMenuModel`.
//
// # CSS nodes
//
// ```
// menubar
// ├── item[.active]
// ┊   ╰── popover
// ╰── item
//
//	╰── popover
//
// ```
//
// `GtkPopoverMenuBar` has a single CSS node with name menubar, below which
// each item has its CSS node, and below that the corresponding popover.
//
// The item whose popover is currently open gets the .active
// style class.
//
// # Accessibility
//
// `GtkPopoverMenuBar` uses the %GTK_ACCESSIBLE_ROLE_MENU_BAR role,
// the menu items use the %GTK_ACCESSIBLE_ROLE_MENU_ITEM role and
// the menus use the %GTK_ACCESSIBLE_ROLE_MENU role.
type PopoverMenuBar struct {
	Widget
}

var xPopoverMenuBarGLibType func() types.GType

func PopoverMenuBarGLibType() types.GType {
	return xPopoverMenuBarGLibType()
}

func PopoverMenuBarNewFromInternalPtr(ptr uintptr) *PopoverMenuBar {
	cls := &PopoverMenuBar{}
	cls.Ptr = ptr
	return cls
}

var xNewPopoverMenuBarFromModel func(uintptr) uintptr

// Creates a `GtkPopoverMenuBar` from a `GMenuModel`.
func NewPopoverMenuBarFromModel(ModelVar *gio.MenuModel) *PopoverMenuBar {
	var cls *PopoverMenuBar

	cret := xNewPopoverMenuBarFromModel(ModelVar.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &PopoverMenuBar{}
	cls.Ptr = cret
	return cls
}

var xPopoverMenuBarAddChild func(uintptr, uintptr, string) bool

// Adds a custom widget to a generated menubar.
//
// For this to work, the menu model of @bar must have an
// item with a `custom` attribute that matches @id.
func (x *PopoverMenuBar) AddChild(ChildVar *Widget, IdVar string) bool {

	cret := xPopoverMenuBarAddChild(x.GoPointer(), ChildVar.GoPointer(), IdVar)
	return cret
}

var xPopoverMenuBarGetMenuModel func(uintptr) uintptr

// Returns the model from which the contents of @bar are taken.
func (x *PopoverMenuBar) GetMenuModel() *gio.MenuModel {
	var cls *gio.MenuModel

	cret := xPopoverMenuBarGetMenuModel(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gio.MenuModel{}
	cls.Ptr = cret
	return cls
}

var xPopoverMenuBarRemoveChild func(uintptr, uintptr) bool

// Removes a widget that has previously been added with
// gtk_popover_menu_bar_add_child().
func (x *PopoverMenuBar) RemoveChild(ChildVar *Widget) bool {

	cret := xPopoverMenuBarRemoveChild(x.GoPointer(), ChildVar.GoPointer())
	return cret
}

var xPopoverMenuBarSetMenuModel func(uintptr, uintptr)

// Sets a menu model from which @bar should take
// its contents.
func (x *PopoverMenuBar) SetMenuModel(ModelVar *gio.MenuModel) {

	xPopoverMenuBarSetMenuModel(x.GoPointer(), ModelVar.GoPointer())

}

func (c *PopoverMenuBar) GoPointer() uintptr {
	return c.Ptr
}

func (c *PopoverMenuBar) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *PopoverMenuBar) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *PopoverMenuBar) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *PopoverMenuBar) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *PopoverMenuBar) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *PopoverMenuBar) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PopoverMenuBar) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *PopoverMenuBar) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PopoverMenuBar) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *PopoverMenuBar) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PopoverMenuBar) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *PopoverMenuBar) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xPopoverMenuBarGLibType, lib, "gtk_popover_menu_bar_get_type")

	core.PuregoSafeRegister(&xNewPopoverMenuBarFromModel, lib, "gtk_popover_menu_bar_new_from_model")

	core.PuregoSafeRegister(&xPopoverMenuBarAddChild, lib, "gtk_popover_menu_bar_add_child")
	core.PuregoSafeRegister(&xPopoverMenuBarGetMenuModel, lib, "gtk_popover_menu_bar_get_menu_model")
	core.PuregoSafeRegister(&xPopoverMenuBarRemoveChild, lib, "gtk_popover_menu_bar_remove_child")
	core.PuregoSafeRegister(&xPopoverMenuBarSetMenuModel, lib, "gtk_popover_menu_bar_set_menu_model")

}
