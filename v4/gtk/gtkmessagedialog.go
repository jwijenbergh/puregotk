// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gsk"
)

type MessageDialogClass struct {
	_ structs.HostLayout
}

func (x *MessageDialogClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// Prebuilt sets of buttons for `GtkDialog`.
//
// If none of these choices are appropriate, simply use
// %GTK_BUTTONS_NONE and call [method@Gtk.Dialog.add_buttons].
//
// &gt; Please note that %GTK_BUTTONS_OK, %GTK_BUTTONS_YES_NO
// &gt; and %GTK_BUTTONS_OK_CANCEL are discouraged by the
// &gt; [GNOME Human Interface Guidelines](http://library.gnome.org/devel/hig-book/stable/).
type ButtonsType int

var xButtonsTypeGLibType func() types.GType

func ButtonsTypeGLibType() types.GType {
	return xButtonsTypeGLibType()
}

const (

	// no buttons at all
	ButtonsNoneValue ButtonsType = 0
	// an OK button
	ButtonsOkValue ButtonsType = 1
	// a Close button
	ButtonsCloseValue ButtonsType = 2
	// a Cancel button
	ButtonsCancelValue ButtonsType = 3
	// Yes and No buttons
	ButtonsYesNoValue ButtonsType = 4
	// OK and Cancel buttons
	ButtonsOkCancelValue ButtonsType = 5
)

// `GtkMessageDialog` presents a dialog with some message text.
//
// ![An example GtkMessageDialog](messagedialog.png)
//
// It’s simply a convenience widget; you could construct the equivalent of
// `GtkMessageDialog` from `GtkDialog` without too much effort, but
// `GtkMessageDialog` saves typing.
//
// The easiest way to do a modal message dialog is to use the %GTK_DIALOG_MODAL
// flag, which will call [method@Gtk.Window.set_modal] internally. The dialog will
// prevent interaction with the parent window until it's hidden or destroyed.
// You can use the [signal@Gtk.Dialog::response] signal to know when the user
// dismissed the dialog.
//
// An example for using a modal dialog:
// ```c
// GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_MODAL;
// dialog = gtk_message_dialog_new (parent_window,
//
//	flags,
//	GTK_MESSAGE_ERROR,
//	GTK_BUTTONS_CLOSE,
//	"Error reading “%s”: %s",
//	filename,
//	g_strerror (errno));
//
// // Destroy the dialog when the user responds to it
// // (e.g. clicks a button)
//
// g_signal_connect (dialog, "response",
//
//	G_CALLBACK (gtk_window_destroy),
//	NULL);
//
// ```
//
// You might do a non-modal `GtkMessageDialog` simply by omitting the
// %GTK_DIALOG_MODAL flag:
//
// ```c
// GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
// dialog = gtk_message_dialog_new (parent_window,
//
//	flags,
//	GTK_MESSAGE_ERROR,
//	GTK_BUTTONS_CLOSE,
//	"Error reading “%s”: %s",
//	filename,
//	g_strerror (errno));
//
// // Destroy the dialog when the user responds to it
// // (e.g. clicks a button)
// g_signal_connect (dialog, "response",
//
//	G_CALLBACK (gtk_window_destroy),
//	NULL);
//
// ```
//
// # GtkMessageDialog as GtkBuildable
//
// The `GtkMessageDialog` implementation of the `GtkBuildable` interface exposes
// the message area as an internal child with the name “message_area”.
type MessageDialog struct {
	Dialog
}

var xMessageDialogGLibType func() types.GType

func MessageDialogGLibType() types.GType {
	return xMessageDialogGLibType()
}

func MessageDialogNewFromInternalPtr(ptr uintptr) *MessageDialog {
	cls := &MessageDialog{}
	cls.Ptr = ptr
	return cls
}

var xNewMessageDialog func(uintptr, DialogFlags, MessageType, ButtonsType, string, ...interface{}) uintptr

// Creates a new message dialog.
//
// This is a simple dialog with some text the user may want to see.
// When the user clicks a button a “response” signal is emitted with
// response IDs from [enum@Gtk.ResponseType]. See [class@Gtk.Dialog]
// for more details.
func NewMessageDialog(ParentVar *Window, FlagsVar DialogFlags, TypeVar MessageType, ButtonsVar ButtonsType, MessageFormatVar string, varArgs ...interface{}) *MessageDialog {
	var cls *MessageDialog

	cret := xNewMessageDialog(ParentVar.GoPointer(), FlagsVar, TypeVar, ButtonsVar, MessageFormatVar, varArgs...)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &MessageDialog{}
	cls.Ptr = cret
	return cls
}

var xNewMessageDialogWithMarkup func(uintptr, DialogFlags, MessageType, ButtonsType, string, ...interface{}) uintptr

// Creates a new message dialog.
//
// This is a simple dialog with some text that is marked up with
// Pango markup. When the user clicks a button a “response” signal
// is emitted with response IDs from [enum@Gtk.ResponseType]. See
// [class@Gtk.Dialog] for more details.
//
// Special XML characters in the printf() arguments passed to this
// function will automatically be escaped as necessary.
// (See g_markup_printf_escaped() for how this is implemented.)
// Usually this is what you want, but if you have an existing
// Pango markup string that you want to use literally as the
// label, then you need to use [method@Gtk.MessageDialog.set_markup]
// instead, since you can’t pass the markup string either
// as the format (it might contain “%” characters) or as a string
// argument.
//
// ```c
// GtkWidget *dialog;
// GtkDialogFlags flags = GTK_DIALOG_DESTROY_WITH_PARENT;
// dialog = gtk_message_dialog_new (parent_window,
//
//	flags,
//	GTK_MESSAGE_ERROR,
//	GTK_BUTTONS_CLOSE,
//	NULL);
//
// gtk_message_dialog_set_markup (GTK_MESSAGE_DIALOG (dialog),
//
//	markup);
//
// ```
func NewMessageDialogWithMarkup(ParentVar *Window, FlagsVar DialogFlags, TypeVar MessageType, ButtonsVar ButtonsType, MessageFormatVar string, varArgs ...interface{}) *MessageDialog {
	var cls *MessageDialog

	cret := xNewMessageDialogWithMarkup(ParentVar.GoPointer(), FlagsVar, TypeVar, ButtonsVar, MessageFormatVar, varArgs...)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &MessageDialog{}
	cls.Ptr = cret
	return cls
}

var xMessageDialogFormatSecondaryMarkup func(uintptr, string, ...interface{})

// Sets the secondary text of the message dialog.
//
// The @message_format is assumed to contain Pango markup.
//
// Due to an oversight, this function does not escape special
// XML characters like [ctor@Gtk.MessageDialog.new_with_markup]
// does. Thus, if the arguments may contain special XML characters,
// you should use g_markup_printf_escaped() to escape it.
//
// ```c
// char *msg;
//
// msg = g_markup_printf_escaped (message_format, ...);
// gtk_message_dialog_format_secondary_markup (message_dialog,
//
//	"%s", msg);
//
// g_free (msg);
// ```
func (x *MessageDialog) FormatSecondaryMarkup(MessageFormatVar string, varArgs ...interface{}) {

	xMessageDialogFormatSecondaryMarkup(x.GoPointer(), MessageFormatVar, varArgs...)

}

var xMessageDialogFormatSecondaryText func(uintptr, string, ...interface{})

// Sets the secondary text of the message dialog.
func (x *MessageDialog) FormatSecondaryText(MessageFormatVar string, varArgs ...interface{}) {

	xMessageDialogFormatSecondaryText(x.GoPointer(), MessageFormatVar, varArgs...)

}

var xMessageDialogGetMessageArea func(uintptr) uintptr

// Returns the message area of the dialog.
//
// This is the box where the dialog’s primary and secondary labels
// are packed. You can add your own extra content to that box and it
// will appear below those labels. See [method@Gtk.Dialog.get_content_area]
// for the corresponding function in the parent [class@Gtk.Dialog].
func (x *MessageDialog) GetMessageArea() *Widget {
	var cls *Widget

	cret := xMessageDialogGetMessageArea(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xMessageDialogSetMarkup func(uintptr, string)

// Sets the text of the message dialog.
func (x *MessageDialog) SetMarkup(StrVar string) {

	xMessageDialogSetMarkup(x.GoPointer(), StrVar)

}

func (c *MessageDialog) GoPointer() uintptr {
	return c.Ptr
}

func (c *MessageDialog) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *MessageDialog) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *MessageDialog) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *MessageDialog) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *MessageDialog) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *MessageDialog) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *MessageDialog) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *MessageDialog) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *MessageDialog) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *MessageDialog) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *MessageDialog) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *MessageDialog) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

// Returns the renderer that is used for this `GtkNative`.
func (x *MessageDialog) GetRenderer() *gsk.Renderer {
	var cls *gsk.Renderer

	cret := XGtkNativeGetRenderer(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gsk.Renderer{}
	cls.Ptr = cret
	return cls
}

// Returns the surface of this `GtkNative`.
func (x *MessageDialog) GetSurface() *gdk.Surface {
	var cls *gdk.Surface

	cret := XGtkNativeGetSurface(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gdk.Surface{}
	cls.Ptr = cret
	return cls
}

// Retrieves the surface transform of @self.
//
// This is the translation from @self's surface coordinates into
// @self's widget coordinates.
func (x *MessageDialog) GetSurfaceTransform(XVar float64, YVar float64) {

	XGtkNativeGetSurfaceTransform(x.GoPointer(), XVar, YVar)

}

// Realizes a `GtkNative`.
//
// This should only be used by subclasses.
func (x *MessageDialog) Realize() {

	XGtkNativeRealize(x.GoPointer())

}

// Unrealizes a `GtkNative`.
//
// This should only be used by subclasses.
func (x *MessageDialog) Unrealize() {

	XGtkNativeUnrealize(x.GoPointer())

}

// Returns the display that this `GtkRoot` is on.
func (x *MessageDialog) GetDisplay() *gdk.Display {
	var cls *gdk.Display

	cret := XGtkRootGetDisplay(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gdk.Display{}
	cls.Ptr = cret
	return cls
}

// Retrieves the current focused widget within the root.
//
// Note that this is the widget that would have the focus
// if the root is active; if the root is not focused then
// `gtk_widget_has_focus (widget)` will be %FALSE for the
// widget.
func (x *MessageDialog) GetFocus() *Widget {
	var cls *Widget

	cret := XGtkRootGetFocus(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

// If @focus is not the current focus widget, and is focusable, sets
// it as the focus widget for the root.
//
// If @focus is %NULL, unsets the focus widget for the root.
//
// To set the focus to a particular widget in the root, it is usually
// more convenient to use [method@Gtk.Widget.grab_focus] instead of
// this function.
func (x *MessageDialog) SetFocus(FocusVar *Widget) {

	XGtkRootSetFocus(x.GoPointer(), FocusVar.GoPointer())

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xButtonsTypeGLibType, lib, "gtk_buttons_type_get_type")

	core.PuregoSafeRegister(&xMessageDialogGLibType, lib, "gtk_message_dialog_get_type")

	core.PuregoSafeRegister(&xNewMessageDialog, lib, "gtk_message_dialog_new")
	core.PuregoSafeRegister(&xNewMessageDialogWithMarkup, lib, "gtk_message_dialog_new_with_markup")

	core.PuregoSafeRegister(&xMessageDialogFormatSecondaryMarkup, lib, "gtk_message_dialog_format_secondary_markup")
	core.PuregoSafeRegister(&xMessageDialogFormatSecondaryText, lib, "gtk_message_dialog_format_secondary_text")
	core.PuregoSafeRegister(&xMessageDialogGetMessageArea, lib, "gtk_message_dialog_get_message_area")
	core.PuregoSafeRegister(&xMessageDialogSetMarkup, lib, "gtk_message_dialog_set_markup")

}
