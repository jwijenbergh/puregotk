// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type GesturePanClass struct {
	_ structs.HostLayout
}

func (x *GesturePanClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkGesturePan` is a `GtkGesture` for pan gestures.
//
// These are drags that are locked to happen along one axis. The axis
// that a `GtkGesturePan` handles is defined at construct time, and
// can be changed through [method@Gtk.GesturePan.set_orientation].
//
// When the gesture starts to be recognized, `GtkGesturePan` will
// attempt to determine as early as possible whether the sequence
// is moving in the expected direction, and denying the sequence if
// this does not happen.
//
// Once a panning gesture along the expected axis is recognized,
// the [signal@Gtk.GesturePan::pan] signal will be emitted as input
// events are received, containing the offset in the given axis.
type GesturePan struct {
	GestureDrag
}

var xGesturePanGLibType func() types.GType

func GesturePanGLibType() types.GType {
	return xGesturePanGLibType()
}

func GesturePanNewFromInternalPtr(ptr uintptr) *GesturePan {
	cls := &GesturePan{}
	cls.Ptr = ptr
	return cls
}

var xNewGesturePan func(Orientation) uintptr

// Returns a newly created `GtkGesture` that recognizes pan gestures.
func NewGesturePan(OrientationVar Orientation) *GesturePan {
	var cls *GesturePan

	cret := xNewGesturePan(OrientationVar)

	if cret == 0 {
		return nil
	}
	cls = &GesturePan{}
	cls.Ptr = cret
	return cls
}

var xGesturePanGetOrientation func(uintptr) Orientation

// Returns the orientation of the pan gestures that this @gesture expects.
func (x *GesturePan) GetOrientation() Orientation {

	cret := xGesturePanGetOrientation(x.GoPointer())
	return cret
}

var xGesturePanSetOrientation func(uintptr, Orientation)

// Sets the orientation to be expected on pan gestures.
func (x *GesturePan) SetOrientation(OrientationVar Orientation) {

	xGesturePanSetOrientation(x.GoPointer(), OrientationVar)

}

func (c *GesturePan) GoPointer() uintptr {
	return c.Ptr
}

func (c *GesturePan) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted once a panning gesture along the expected axis is detected.
func (x *GesturePan) ConnectPan(cb *func(GesturePan, PanDirection, float64)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "pan", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, DirectionVarp PanDirection, OffsetVarp float64) {
		fa := GesturePan{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, DirectionVarp, OffsetVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "pan", cbRefPtr)
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xGesturePanGLibType, lib, "gtk_gesture_pan_get_type")

	core.PuregoSafeRegister(&xNewGesturePan, lib, "gtk_gesture_pan_new")

	core.PuregoSafeRegister(&xGesturePanGetOrientation, lib, "gtk_gesture_pan_get_orientation")
	core.PuregoSafeRegister(&xGesturePanSetOrientation, lib, "gtk_gesture_pan_set_orientation")

}
