// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type IMContextSimpleClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *IMContextSimpleClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type IMContextSimplePrivate struct {
	_ structs.HostLayout
}

func (x *IMContextSimplePrivate) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

const (
	MAX_COMPOSE_LEN int = 7
)

// `GtkIMContextSimple` is an input method supporting table-based input methods.
//
// ## Compose sequences
//
// `GtkIMContextSimple` reads compose sequences from the first of the
// following files that is found: ~/.config/gtk-4.0/Compose, ~/.XCompose,
// /usr/share/X11/locale/$locale/Compose (for locales that have a nontrivial
// Compose file). The syntax of these files is described in the Compose(5)
// manual page.
//
// If none of these files is found, `GtkIMContextSimple` uses a built-in table
// of compose sequences that is derived from the X11 Compose files.
//
// Note that compose sequences typically start with the Compose_key, which is
// often not available as a dedicated key on keyboards. Keyboard layouts may
// map this keysym to other keys, such as the right Control key.
//
// ## Unicode characters
//
// `GtkIMContextSimple` also supports numeric entry of Unicode characters
// by typing &lt;kbd&gt;Ctrl&lt;/kbd&gt;-&lt;kbd&gt;Shift&lt;/kbd&gt;-&lt;kbd&gt;u&lt;/kbd&gt;, followed by a
// hexadecimal Unicode codepoint.
//
// For example,
//
//	Ctrl-Shift-u 1 2 3 Enter
//
// yields U+0123 LATIN SMALL LETTER G WITH CEDILLA, i.e. ฤฃ.
//
// ## Dead keys
//
// `GtkIMContextSimple` supports dead keys. For example, typing
//
//	   dead_acute a
//
//	yields U+00E! LATIN SMALL LETTER_A WITH ACUTE, i.e. รก. Note that this
//	depends on the keyboard layout including dead keys.
type IMContextSimple struct {
	IMContext
}

var xIMContextSimpleGLibType func() types.GType

func IMContextSimpleGLibType() types.GType {
	return xIMContextSimpleGLibType()
}

func IMContextSimpleNewFromInternalPtr(ptr uintptr) *IMContextSimple {
	cls := &IMContextSimple{}
	cls.Ptr = ptr
	return cls
}

var xNewIMContextSimple func() uintptr

// Creates a new `GtkIMContextSimple`.
func NewIMContextSimple() *IMContextSimple {
	var cls *IMContextSimple

	cret := xNewIMContextSimple()

	if cret == 0 {
		return nil
	}
	cls = &IMContextSimple{}
	cls.Ptr = cret
	return cls
}

var xIMContextSimpleAddComposeFile func(uintptr, string)

// Adds an additional table from the X11 compose file.
func (x *IMContextSimple) AddComposeFile(ComposeFileVar string) {

	xIMContextSimpleAddComposeFile(x.GoPointer(), ComposeFileVar)

}

var xIMContextSimpleAddTable func(uintptr, []uint16, int, int)

// Adds an additional table to search to the input context.
// Each row of the table consists of @max_seq_len key symbols
// followed by two #guint16 interpreted as the high and low
// words of a #gunicode value. Tables are searched starting
// from the last added.
//
// The table must be sorted in dictionary order on the
// numeric value of the key symbol fields. (Values beyond
// the length of the sequence should be zero.)
func (x *IMContextSimple) AddTable(DataVar []uint16, MaxSeqLenVar int, NSeqsVar int) {

	xIMContextSimpleAddTable(x.GoPointer(), DataVar, MaxSeqLenVar, NSeqsVar)

}

func (c *IMContextSimple) GoPointer() uintptr {
	return c.Ptr
}

func (c *IMContextSimple) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xIMContextSimpleGLibType, lib, "gtk_im_context_simple_get_type")

	core.PuregoSafeRegister(&xNewIMContextSimple, lib, "gtk_im_context_simple_new")

	core.PuregoSafeRegister(&xIMContextSimpleAddComposeFile, lib, "gtk_im_context_simple_add_compose_file")
	core.PuregoSafeRegister(&xIMContextSimpleAddTable, lib, "gtk_im_context_simple_add_table")

}
