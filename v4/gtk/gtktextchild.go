// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type TextChildAnchorClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *TextChildAnchorClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A `GtkTextChildAnchor` is a spot in a `GtkTextBuffer` where child widgets can
// be “anchored”.
//
// The anchor can have multiple widgets anchored, to allow for multiple views.
type TextChildAnchor struct {
	gobject.Object
}

var xTextChildAnchorGLibType func() types.GType

func TextChildAnchorGLibType() types.GType {
	return xTextChildAnchorGLibType()
}

func TextChildAnchorNewFromInternalPtr(ptr uintptr) *TextChildAnchor {
	cls := &TextChildAnchor{}
	cls.Ptr = ptr
	return cls
}

var xNewTextChildAnchor func() uintptr

// Creates a new `GtkTextChildAnchor`.
//
// Usually you would then insert it into a `GtkTextBuffer` with
// [method@Gtk.TextBuffer.insert_child_anchor]. To perform the
// creation and insertion in one step, use the convenience
// function [method@Gtk.TextBuffer.create_child_anchor].
func NewTextChildAnchor() *TextChildAnchor {
	var cls *TextChildAnchor

	cret := xNewTextChildAnchor()

	if cret == 0 {
		return nil
	}
	cls = &TextChildAnchor{}
	cls.Ptr = cret
	return cls
}

var xNewTextChildAnchorWithReplacement func(string) uintptr

// Creates a new `GtkTextChildAnchor` with the given replacement character.
//
// Usually you would then insert it into a `GtkTextBuffer` with
// [method@Gtk.TextBuffer.insert_child_anchor].
func NewTextChildAnchorWithReplacement(CharacterVar string) *TextChildAnchor {
	var cls *TextChildAnchor

	cret := xNewTextChildAnchorWithReplacement(CharacterVar)

	if cret == 0 {
		return nil
	}
	cls = &TextChildAnchor{}
	cls.Ptr = cret
	return cls
}

var xTextChildAnchorGetDeleted func(uintptr) bool

// Determines whether a child anchor has been deleted from
// the buffer.
//
// Keep in mind that the child anchor will be unreferenced
// when removed from the buffer, so you need to hold your own
// reference (with g_object_ref()) if you plan to use this
// function — otherwise all deleted child anchors will also
// be finalized.
func (x *TextChildAnchor) GetDeleted() bool {

	cret := xTextChildAnchorGetDeleted(x.GoPointer())
	return cret
}

var xTextChildAnchorGetWidgets func(uintptr, uint) uintptr

// Gets a list of all widgets anchored at this child anchor.
//
// The order in which the widgets are returned is not defined.
func (x *TextChildAnchor) GetWidgets(OutLenVar uint) uintptr {

	cret := xTextChildAnchorGetWidgets(x.GoPointer(), OutLenVar)
	return cret
}

func (c *TextChildAnchor) GoPointer() uintptr {
	return c.Ptr
}

func (c *TextChildAnchor) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xTextChildAnchorGLibType, lib, "gtk_text_child_anchor_get_type")

	core.PuregoSafeRegister(&xNewTextChildAnchor, lib, "gtk_text_child_anchor_new")
	core.PuregoSafeRegister(&xNewTextChildAnchorWithReplacement, lib, "gtk_text_child_anchor_new_with_replacement")

	core.PuregoSafeRegister(&xTextChildAnchorGetDeleted, lib, "gtk_text_child_anchor_get_deleted")
	core.PuregoSafeRegister(&xTextChildAnchorGetWidgets, lib, "gtk_text_child_anchor_get_widgets")

}
