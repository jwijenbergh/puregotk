// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type ButtonClass struct {
	ParentClass uintptr

	Padding [8]uintptr
}

func (x *ButtonClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type ButtonPrivate struct {
}

func (x *ButtonPrivate) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// The `GtkButton` widget is generally used to trigger a callback function that is
// called when the button is pressed.
//
// ![An example GtkButton](button.png)
//
// The `GtkButton` widget can hold any valid child widget. That is, it can hold
// almost any other standard `GtkWidget`. The most commonly used child is the
// `GtkLabel`.
//
// # CSS nodes
//
// `GtkButton` has a single CSS node with name button. The node will get the
// style classes .image-button or .text-button, if the content is just an
// image or label, respectively. It may also receive the .flat style class.
// When activating a button via the keyboard, the button will temporarily
// gain the .keyboard-activating style class.
//
// Other style classes that are commonly used with `GtkButton` include
// .suggested-action and .destructive-action. In special cases, buttons
// can be made round by adding the .circular style class.
//
// Button-like widgets like [class@Gtk.ToggleButton], [class@Gtk.MenuButton],
// [class@Gtk.VolumeButton], [class@Gtk.LockButton], [class@Gtk.ColorButton]
// or [class@Gtk.FontButton] use style classes such as .toggle, .popup, .scale,
// .lock, .color on the button node to differentiate themselves from a plain
// `GtkButton`.
//
// # Accessibility
//
// `GtkButton` uses the %GTK_ACCESSIBLE_ROLE_BUTTON role.
type Button struct {
	Widget
}

var xButtonGLibType func() types.GType

func ButtonGLibType() types.GType {
	return xButtonGLibType()
}

func ButtonNewFromInternalPtr(ptr uintptr) *Button {
	cls := &Button{}
	cls.Ptr = ptr
	return cls
}

var xNewButton func() uintptr

// Creates a new `GtkButton` widget.
//
// To add a child widget to the button, use [method@Gtk.Button.set_child].
func NewButton() *Button {
	var cls *Button

	cret := xNewButton()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Button{}
	cls.Ptr = cret
	return cls
}

var xNewButtonFromIconName func(string) uintptr

// Creates a new button containing an icon from the current icon theme.
//
// If the icon name isn’t known, a “broken image” icon will be
// displayed instead. If the current icon theme is changed, the icon
// will be updated appropriately.
func NewButtonFromIconName(IconNameVar string) *Button {
	var cls *Button

	cret := xNewButtonFromIconName(IconNameVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Button{}
	cls.Ptr = cret
	return cls
}

var xNewButtonWithLabel func(string) uintptr

// Creates a `GtkButton` widget with a `GtkLabel` child.
func NewButtonWithLabel(LabelVar string) *Button {
	var cls *Button

	cret := xNewButtonWithLabel(LabelVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Button{}
	cls.Ptr = cret
	return cls
}

var xNewButtonWithMnemonic func(string) uintptr

// Creates a new `GtkButton` containing a label.
//
// If characters in @label are preceded by an underscore, they are underlined.
// If you need a literal underscore character in a label, use “__” (two
// underscores). The first underlined character represents a keyboard
// accelerator called a mnemonic. Pressing Alt and that key activates the button.
func NewButtonWithMnemonic(LabelVar string) *Button {
	var cls *Button

	cret := xNewButtonWithMnemonic(LabelVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Button{}
	cls.Ptr = cret
	return cls
}

var xButtonGetChild func(uintptr) uintptr

// Gets the child widget of @button.
func (x *Button) GetChild() *Widget {
	var cls *Widget

	cret := xButtonGetChild(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xButtonGetHasFrame func(uintptr) bool

// Returns whether the button has a frame.
func (x *Button) GetHasFrame() bool {

	cret := xButtonGetHasFrame(x.GoPointer())
	return cret
}

var xButtonGetIconName func(uintptr) string

// Returns the icon name of the button.
//
// If the icon name has not been set with [method@Gtk.Button.set_icon_name]
// the return value will be %NULL. This will be the case if you create
// an empty button with [ctor@Gtk.Button.new] to use as a container.
func (x *Button) GetIconName() string {

	cret := xButtonGetIconName(x.GoPointer())
	return cret
}

var xButtonGetLabel func(uintptr) string

// Fetches the text from the label of the button.
//
// If the label text has not been set with [method@Gtk.Button.set_label]
// the return value will be %NULL. This will be the case if you create
// an empty button with [ctor@Gtk.Button.new] to use as a container.
func (x *Button) GetLabel() string {

	cret := xButtonGetLabel(x.GoPointer())
	return cret
}

var xButtonGetUseUnderline func(uintptr) bool

// gets whether underlines are interpreted as mnemonics.
//
// See [method@Gtk.Button.set_use_underline].
func (x *Button) GetUseUnderline() bool {

	cret := xButtonGetUseUnderline(x.GoPointer())
	return cret
}

var xButtonSetChild func(uintptr, uintptr)

// Sets the child widget of @button.
//
// Note that by using this API, you take full responsibility for setting
// up the proper accessibility label and description information for @button.
// Most likely, you'll either set the accessibility label or description
// for @button explicitly, or you'll set a labelled-by or described-by
// relations from @child to @button.
func (x *Button) SetChild(ChildVar *Widget) {

	xButtonSetChild(x.GoPointer(), ChildVar.GoPointer())

}

var xButtonSetHasFrame func(uintptr, bool)

// Sets the style of the button.
//
// Buttons can has a flat appearance or have a frame drawn around them.
func (x *Button) SetHasFrame(HasFrameVar bool) {

	xButtonSetHasFrame(x.GoPointer(), HasFrameVar)

}

var xButtonSetIconName func(uintptr, string)

// Adds a `GtkImage` with the given icon name as a child.
//
// If @button already contains a child widget, that child widget will
// be removed and replaced with the image.
func (x *Button) SetIconName(IconNameVar string) {

	xButtonSetIconName(x.GoPointer(), IconNameVar)

}

var xButtonSetLabel func(uintptr, string)

// Sets the text of the label of the button to @label.
//
// This will also clear any previously set labels.
func (x *Button) SetLabel(LabelVar string) {

	xButtonSetLabel(x.GoPointer(), LabelVar)

}

var xButtonSetUseUnderline func(uintptr, bool)

// Sets whether to use underlines as mnemonics.
//
// If true, an underline in the text of the button label indicates
// the next character should be used for the mnemonic accelerator key.
func (x *Button) SetUseUnderline(UseUnderlineVar bool) {

	xButtonSetUseUnderline(x.GoPointer(), UseUnderlineVar)

}

func (c *Button) GoPointer() uintptr {
	return c.Ptr
}

func (c *Button) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted to animate press then release.
//
// This is an action signal. Applications should never connect
// to this signal, but use the [signal@Gtk.Button::clicked] signal.
func (x *Button) ConnectActivate(cb *func(Button)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "activate", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := Button{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "activate", cbRefPtr)
}

// Emitted when the button has been activated (pressed and released).
func (x *Button) ConnectClicked(cb *func(Button)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "clicked", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := Button{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "clicked", cbRefPtr)
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *Button) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *Button) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *Button) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *Button) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *Button) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Button) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *Button) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Button) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *Button) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Button) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the action name for @actionable.
func (x *Button) GetActionName() string {

	cret := XGtkActionableGetActionName(x.GoPointer())
	return cret
}

// Gets the current target value of @actionable.
func (x *Button) GetActionTargetValue() *glib.Variant {

	cret := XGtkActionableGetActionTargetValue(x.GoPointer())
	return cret
}

// Specifies the name of the action with which this widget should be
// associated.
//
// If @action_name is %NULL then the widget will be unassociated from
// any previous action.
//
// Usually this function is used when the widget is located (or will be
// located) within the hierarchy of a `GtkApplicationWindow`.
//
// Names are of the form “win.save” or “app.quit” for actions on the
// containing [class@ApplicationWindow] or its associated [class@Application],
// respectively. This is the same form used for actions in the [class@Gio.Menu]
// associated with the window.
func (x *Button) SetActionName(ActionNameVar string) {

	XGtkActionableSetActionName(x.GoPointer(), ActionNameVar)

}

// Sets the target of an actionable widget.
//
// This is a convenience function that calls [ctor@GLib.Variant.new] for
// @format_string and uses the result to call
// [method@Gtk.Actionable.set_action_target_value].
//
// If you are setting a string-valued target and want to set
// the action name at the same time, you can use
// [method@Gtk.Actionable.set_detailed_action_name].
func (x *Button) SetActionTarget(FormatStringVar string, varArgs ...interface{}) {

	XGtkActionableSetActionTarget(x.GoPointer(), FormatStringVar, varArgs...)

}

// Sets the target value of an actionable widget.
//
// If @target_value is %NULL then the target value is unset.
//
// The target value has two purposes. First, it is used as the parameter
// to activation of the action associated with the `GtkActionable` widget.
// Second, it is used to determine if the widget should be rendered as
// “active” — the widget is active if the state is equal to the given target.
//
// Consider the example of associating a set of buttons with a [iface@Gio.Action]
// with string state in a typical “radio button” situation. Each button
// will be associated with the same action, but with a different target
// value for that action. Clicking on a particular button will activate
// the action with the target of that button, which will typically cause
// the action’s state to change to that value. Since the action’s state
// is now equal to the target value of the button, the button will now
// be rendered as active (and the other buttons, with different targets,
// rendered inactive).
func (x *Button) SetActionTargetValue(TargetValueVar *glib.Variant) {

	XGtkActionableSetActionTargetValue(x.GoPointer(), TargetValueVar)

}

// Sets the action-name and associated string target value of an
// actionable widget.
//
// @detailed_action_name is a string in the format accepted by
// [func@Gio.Action.parse_detailed_name].
func (x *Button) SetDetailedActionName(DetailedActionNameVar string) {

	XGtkActionableSetDetailedActionName(x.GoPointer(), DetailedActionNameVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *Button) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xButtonGLibType, lib, "gtk_button_get_type")

	core.PuregoSafeRegister(&xNewButton, lib, "gtk_button_new")
	core.PuregoSafeRegister(&xNewButtonFromIconName, lib, "gtk_button_new_from_icon_name")
	core.PuregoSafeRegister(&xNewButtonWithLabel, lib, "gtk_button_new_with_label")
	core.PuregoSafeRegister(&xNewButtonWithMnemonic, lib, "gtk_button_new_with_mnemonic")

	core.PuregoSafeRegister(&xButtonGetChild, lib, "gtk_button_get_child")
	core.PuregoSafeRegister(&xButtonGetHasFrame, lib, "gtk_button_get_has_frame")
	core.PuregoSafeRegister(&xButtonGetIconName, lib, "gtk_button_get_icon_name")
	core.PuregoSafeRegister(&xButtonGetLabel, lib, "gtk_button_get_label")
	core.PuregoSafeRegister(&xButtonGetUseUnderline, lib, "gtk_button_get_use_underline")
	core.PuregoSafeRegister(&xButtonSetChild, lib, "gtk_button_set_child")
	core.PuregoSafeRegister(&xButtonSetHasFrame, lib, "gtk_button_set_has_frame")
	core.PuregoSafeRegister(&xButtonSetIconName, lib, "gtk_button_set_icon_name")
	core.PuregoSafeRegister(&xButtonSetLabel, lib, "gtk_button_set_label")
	core.PuregoSafeRegister(&xButtonSetUseUnderline, lib, "gtk_button_set_use_underline")

}
