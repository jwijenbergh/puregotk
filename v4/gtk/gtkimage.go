// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gdkpixbuf"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// Describes the image data representation used by a [class@Gtk.Image].
//
// If you want to get the image from the widget, you can only get the
// currently-stored representation; for instance, if the gtk_image_get_storage_type()
// returns %GTK_IMAGE_PAINTABLE, then you can call gtk_image_get_paintable().
//
// For empty images, you can request any storage type (call any of the "get"
// functions), but they will all return %NULL values.
type ImageType int

var xImageTypeGLibType func() types.GType

func ImageTypeGLibType() types.GType {
	return xImageTypeGLibType()
}

const (

	// there is no image displayed by the widget
	ImageEmptyValue ImageType = 0
	// the widget contains a named icon
	ImageIconNameValue ImageType = 1
	// the widget contains a `GIcon`
	ImageGiconValue ImageType = 2
	// the widget contains a `GdkPaintable`
	ImagePaintableValue ImageType = 3
)

// The `GtkImage` widget displays an image.
//
// ![An example GtkImage](image.png)
//
// Various kinds of object can be displayed as an image; most typically,
// you would load a `GdkTexture` from a file, using the convenience function
// [ctor@Gtk.Image.new_from_file], for instance:
//
// ```c
// GtkWidget *image = gtk_image_new_from_file ("myfile.png");
// ```
//
// If the file isn’t loaded successfully, the image will contain a
// “broken image” icon similar to that used in many web browsers.
//
// If you want to handle errors in loading the file yourself,
// for example by displaying an error message, then load the image with
// [ctor@Gdk.Texture.new_from_file], then create the `GtkImage` with
// [ctor@Gtk.Image.new_from_paintable].
//
// Sometimes an application will want to avoid depending on external data
// files, such as image files. See the documentation of `GResource` inside
// GIO, for details. In this case, [property@Gtk.Image:resource],
// [ctor@Gtk.Image.new_from_resource], and [method@Gtk.Image.set_from_resource]
// should be used.
//
// `GtkImage` displays its image as an icon, with a size that is determined
// by the application. See [class@Gtk.Picture] if you want to show an image
// at is actual size.
//
// ## CSS nodes
//
// `GtkImage` has a single CSS node with the name `image`. The style classes
// `.normal-icons` or `.large-icons` may appear, depending on the
// [property@Gtk.Image:icon-size] property.
//
// ## Accessibility
//
// `GtkImage` uses the `GTK_ACCESSIBLE_ROLE_IMG` role.
type Image struct {
	Widget
}

var xImageGLibType func() types.GType

func ImageGLibType() types.GType {
	return xImageGLibType()
}

func ImageNewFromInternalPtr(ptr uintptr) *Image {
	cls := &Image{}
	cls.Ptr = ptr
	return cls
}

var xNewImage func() uintptr

// Creates a new empty `GtkImage` widget.
func NewImage() *Image {
	var cls *Image

	cret := xNewImage()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Image{}
	cls.Ptr = cret
	return cls
}

var xNewImageFromFile func(string) uintptr

// Creates a new `GtkImage` displaying the file @filename.
//
// If the file isn’t found or can’t be loaded, the resulting `GtkImage`
// will display a “broken image” icon. This function never returns %NULL,
// it always returns a valid `GtkImage` widget.
//
// If you need to detect failures to load the file, use
// [ctor@Gdk.Texture.new_from_file] to load the file yourself,
// then create the `GtkImage` from the texture.
//
// The storage type (see [method@Gtk.Image.get_storage_type])
// of the returned image is not defined, it will be whatever
// is appropriate for displaying the file.
func NewImageFromFile(FilenameVar string) *Image {
	var cls *Image

	cret := xNewImageFromFile(FilenameVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Image{}
	cls.Ptr = cret
	return cls
}

var xNewImageFromGicon func(uintptr) uintptr

// Creates a `GtkImage` displaying an icon from the current icon theme.
//
// If the icon name isn’t known, a “broken image” icon will be
// displayed instead. If the current icon theme is changed, the icon
// will be updated appropriately.
func NewImageFromGicon(IconVar gio.Icon) *Image {
	var cls *Image

	cret := xNewImageFromGicon(IconVar.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Image{}
	cls.Ptr = cret
	return cls
}

var xNewImageFromIconName func(string) uintptr

// Creates a `GtkImage` displaying an icon from the current icon theme.
//
// If the icon name isn’t known, a “broken image” icon will be
// displayed instead. If the current icon theme is changed, the icon
// will be updated appropriately.
func NewImageFromIconName(IconNameVar string) *Image {
	var cls *Image

	cret := xNewImageFromIconName(IconNameVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Image{}
	cls.Ptr = cret
	return cls
}

var xNewImageFromPaintable func(uintptr) uintptr

// Creates a new `GtkImage` displaying @paintable.
//
// The `GtkImage` does not assume a reference to the paintable; you still
// need to unref it if you own references. `GtkImage` will add its own
// reference rather than adopting yours.
//
// The `GtkImage` will track changes to the @paintable and update
// its size and contents in response to it.
func NewImageFromPaintable(PaintableVar gdk.Paintable) *Image {
	var cls *Image

	cret := xNewImageFromPaintable(PaintableVar.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Image{}
	cls.Ptr = cret
	return cls
}

var xNewImageFromPixbuf func(uintptr) uintptr

// Creates a new `GtkImage` displaying @pixbuf.
//
// The `GtkImage` does not assume a reference to the pixbuf; you still
// need to unref it if you own references. `GtkImage` will add its own
// reference rather than adopting yours.
//
// This is a helper for [ctor@Gtk.Image.new_from_paintable], and you can't
// get back the exact pixbuf once this is called, only a texture.
//
// Note that this function just creates an `GtkImage` from the pixbuf.
// The `GtkImage` created will not react to state changes. Should you
// want that, you should use [ctor@Gtk.Image.new_from_icon_name].
func NewImageFromPixbuf(PixbufVar *gdkpixbuf.Pixbuf) *Image {
	var cls *Image

	cret := xNewImageFromPixbuf(PixbufVar.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Image{}
	cls.Ptr = cret
	return cls
}

var xNewImageFromResource func(string) uintptr

// Creates a new `GtkImage` displaying the resource file @resource_path.
//
// If the file isn’t found or can’t be loaded, the resulting `GtkImage` will
// display a “broken image” icon. This function never returns %NULL,
// it always returns a valid `GtkImage` widget.
//
// If you need to detect failures to load the file, use
// [ctor@GdkPixbuf.Pixbuf.new_from_file] to load the file yourself,
// then create the `GtkImage` from the pixbuf.
//
// The storage type (see [method@Gtk.Image.get_storage_type]) of
// the returned image is not defined, it will be whatever is
// appropriate for displaying the file.
func NewImageFromResource(ResourcePathVar string) *Image {
	var cls *Image

	cret := xNewImageFromResource(ResourcePathVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Image{}
	cls.Ptr = cret
	return cls
}

var xImageClear func(uintptr)

// Resets the image to be empty.
func (x *Image) Clear() {

	xImageClear(x.GoPointer())

}

var xImageGetGicon func(uintptr) uintptr

// Gets the `GIcon` being displayed by the `GtkImage`.
//
// The storage type of the image must be %GTK_IMAGE_EMPTY or
// %GTK_IMAGE_GICON (see [method@Gtk.Image.get_storage_type]).
// The caller of this function does not own a reference to the
// returned `GIcon`.
func (x *Image) GetGicon() *gio.IconBase {
	var cls *gio.IconBase

	cret := xImageGetGicon(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gio.IconBase{}
	cls.Ptr = cret
	return cls
}

var xImageGetIconName func(uintptr) string

// Gets the icon name and size being displayed by the `GtkImage`.
//
// The storage type of the image must be %GTK_IMAGE_EMPTY or
// %GTK_IMAGE_ICON_NAME (see [method@Gtk.Image.get_storage_type]).
// The returned string is owned by the `GtkImage` and should not
// be freed.
func (x *Image) GetIconName() string {

	cret := xImageGetIconName(x.GoPointer())
	return cret
}

var xImageGetIconSize func(uintptr) IconSize

// Gets the icon size used by the @image when rendering icons.
func (x *Image) GetIconSize() IconSize {

	cret := xImageGetIconSize(x.GoPointer())
	return cret
}

var xImageGetPaintable func(uintptr) uintptr

// Gets the image `GdkPaintable` being displayed by the `GtkImage`.
//
// The storage type of the image must be %GTK_IMAGE_EMPTY or
// %GTK_IMAGE_PAINTABLE (see [method@Gtk.Image.get_storage_type]).
// The caller of this function does not own a reference to the
// returned paintable.
func (x *Image) GetPaintable() *gdk.PaintableBase {
	var cls *gdk.PaintableBase

	cret := xImageGetPaintable(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gdk.PaintableBase{}
	cls.Ptr = cret
	return cls
}

var xImageGetPixelSize func(uintptr) int

// Gets the pixel size used for named icons.
func (x *Image) GetPixelSize() int {

	cret := xImageGetPixelSize(x.GoPointer())
	return cret
}

var xImageGetStorageType func(uintptr) ImageType

// Gets the type of representation being used by the `GtkImage`
// to store image data.
//
// If the `GtkImage` has no image data, the return value will
// be %GTK_IMAGE_EMPTY.
func (x *Image) GetStorageType() ImageType {

	cret := xImageGetStorageType(x.GoPointer())
	return cret
}

var xImageSetFromFile func(uintptr, string)

// Sets a `GtkImage` to show a file.
//
// See [ctor@Gtk.Image.new_from_file] for details.
func (x *Image) SetFromFile(FilenameVar string) {

	xImageSetFromFile(x.GoPointer(), FilenameVar)

}

var xImageSetFromGicon func(uintptr, uintptr)

// Sets a `GtkImage` to show a `GIcon`.
//
// See [ctor@Gtk.Image.new_from_gicon] for details.
func (x *Image) SetFromGicon(IconVar gio.Icon) {

	xImageSetFromGicon(x.GoPointer(), IconVar.GoPointer())

}

var xImageSetFromIconName func(uintptr, string)

// Sets a `GtkImage` to show a named icon.
//
// See [ctor@Gtk.Image.new_from_icon_name] for details.
func (x *Image) SetFromIconName(IconNameVar string) {

	xImageSetFromIconName(x.GoPointer(), IconNameVar)

}

var xImageSetFromPaintable func(uintptr, uintptr)

// Sets a `GtkImage` to show a `GdkPaintable`.
//
// See [ctor@Gtk.Image.new_from_paintable] for details.
func (x *Image) SetFromPaintable(PaintableVar gdk.Paintable) {

	xImageSetFromPaintable(x.GoPointer(), PaintableVar.GoPointer())

}

var xImageSetFromPixbuf func(uintptr, uintptr)

// Sets a `GtkImage` to show a `GdkPixbuf`.
//
// See [ctor@Gtk.Image.new_from_pixbuf] for details.
//
// Note: This is a helper for [method@Gtk.Image.set_from_paintable],
// and you can't get back the exact pixbuf once this is called,
// only a paintable.
func (x *Image) SetFromPixbuf(PixbufVar *gdkpixbuf.Pixbuf) {

	xImageSetFromPixbuf(x.GoPointer(), PixbufVar.GoPointer())

}

var xImageSetFromResource func(uintptr, string)

// Sets a `GtkImage` to show a resource.
//
// See [ctor@Gtk.Image.new_from_resource] for details.
func (x *Image) SetFromResource(ResourcePathVar string) {

	xImageSetFromResource(x.GoPointer(), ResourcePathVar)

}

var xImageSetIconSize func(uintptr, IconSize)

// Suggests an icon size to the theme for named icons.
func (x *Image) SetIconSize(IconSizeVar IconSize) {

	xImageSetIconSize(x.GoPointer(), IconSizeVar)

}

var xImageSetPixelSize func(uintptr, int)

// Sets the pixel size to use for named icons.
//
// If the pixel size is set to a value != -1, it is used instead
// of the icon size set by [method@Gtk.Image.set_from_icon_name].
func (x *Image) SetPixelSize(PixelSizeVar int) {

	xImageSetPixelSize(x.GoPointer(), PixelSizeVar)

}

func (c *Image) GoPointer() uintptr {
	return c.Ptr
}

func (c *Image) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *Image) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *Image) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *Image) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *Image) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *Image) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Image) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *Image) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Image) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *Image) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Image) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *Image) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xImageTypeGLibType, lib, "gtk_image_type_get_type")

	core.PuregoSafeRegister(&xImageGLibType, lib, "gtk_image_get_type")

	core.PuregoSafeRegister(&xNewImage, lib, "gtk_image_new")
	core.PuregoSafeRegister(&xNewImageFromFile, lib, "gtk_image_new_from_file")
	core.PuregoSafeRegister(&xNewImageFromGicon, lib, "gtk_image_new_from_gicon")
	core.PuregoSafeRegister(&xNewImageFromIconName, lib, "gtk_image_new_from_icon_name")
	core.PuregoSafeRegister(&xNewImageFromPaintable, lib, "gtk_image_new_from_paintable")
	core.PuregoSafeRegister(&xNewImageFromPixbuf, lib, "gtk_image_new_from_pixbuf")
	core.PuregoSafeRegister(&xNewImageFromResource, lib, "gtk_image_new_from_resource")

	core.PuregoSafeRegister(&xImageClear, lib, "gtk_image_clear")
	core.PuregoSafeRegister(&xImageGetGicon, lib, "gtk_image_get_gicon")
	core.PuregoSafeRegister(&xImageGetIconName, lib, "gtk_image_get_icon_name")
	core.PuregoSafeRegister(&xImageGetIconSize, lib, "gtk_image_get_icon_size")
	core.PuregoSafeRegister(&xImageGetPaintable, lib, "gtk_image_get_paintable")
	core.PuregoSafeRegister(&xImageGetPixelSize, lib, "gtk_image_get_pixel_size")
	core.PuregoSafeRegister(&xImageGetStorageType, lib, "gtk_image_get_storage_type")
	core.PuregoSafeRegister(&xImageSetFromFile, lib, "gtk_image_set_from_file")
	core.PuregoSafeRegister(&xImageSetFromGicon, lib, "gtk_image_set_from_gicon")
	core.PuregoSafeRegister(&xImageSetFromIconName, lib, "gtk_image_set_from_icon_name")
	core.PuregoSafeRegister(&xImageSetFromPaintable, lib, "gtk_image_set_from_paintable")
	core.PuregoSafeRegister(&xImageSetFromPixbuf, lib, "gtk_image_set_from_pixbuf")
	core.PuregoSafeRegister(&xImageSetFromResource, lib, "gtk_image_set_from_resource")
	core.PuregoSafeRegister(&xImageSetIconSize, lib, "gtk_image_set_icon_size")
	core.PuregoSafeRegister(&xImageSetPixelSize, lib, "gtk_image_set_pixel_size")

}
