// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type EventControllerKeyClass struct {
}

func (x *EventControllerKeyClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkEventControllerKey` is an event controller that provides access
// to key events.
type EventControllerKey struct {
	EventController
}

var xEventControllerKeyGLibType func() types.GType

func EventControllerKeyGLibType() types.GType {
	return xEventControllerKeyGLibType()
}

func EventControllerKeyNewFromInternalPtr(ptr uintptr) *EventControllerKey {
	cls := &EventControllerKey{}
	cls.Ptr = ptr
	return cls
}

var xNewEventControllerKey func() uintptr

// Creates a new event controller that will handle key events.
func NewEventControllerKey() *EventControllerKey {
	var cls *EventControllerKey

	cret := xNewEventControllerKey()

	if cret == 0 {
		return nil
	}
	cls = &EventControllerKey{}
	cls.Ptr = cret
	return cls
}

var xEventControllerKeyForward func(uintptr, uintptr) bool

// Forwards the current event of this @controller to a @widget.
//
// This function can only be used in handlers for the
// [signal@Gtk.EventControllerKey::key-pressed],
// [signal@Gtk.EventControllerKey::key-released]
// or [signal@Gtk.EventControllerKey::modifiers] signals.
func (x *EventControllerKey) Forward(WidgetVar *Widget) bool {

	cret := xEventControllerKeyForward(x.GoPointer(), WidgetVar.GoPointer())
	return cret
}

var xEventControllerKeyGetGroup func(uintptr) uint

// Gets the key group of the current event of this @controller.
//
// See [method@Gdk.KeyEvent.get_layout].
func (x *EventControllerKey) GetGroup() uint {

	cret := xEventControllerKeyGetGroup(x.GoPointer())
	return cret
}

var xEventControllerKeyGetImContext func(uintptr) uintptr

// Gets the input method context of the key @controller.
func (x *EventControllerKey) GetImContext() *IMContext {
	var cls *IMContext

	cret := xEventControllerKeyGetImContext(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &IMContext{}
	cls.Ptr = cret
	return cls
}

var xEventControllerKeySetImContext func(uintptr, uintptr)

// Sets the input method context of the key @controller.
func (x *EventControllerKey) SetImContext(ImContextVar *IMContext) {

	xEventControllerKeySetImContext(x.GoPointer(), ImContextVar.GoPointer())

}

func (c *EventControllerKey) GoPointer() uintptr {
	return c.Ptr
}

func (c *EventControllerKey) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted whenever the input method context filters away
// a keypress and prevents the @controller receiving it.
//
// See [method@Gtk.EventControllerKey.set_im_context] and
// [method@Gtk.IMContext.filter_keypress].
func (x *EventControllerKey) ConnectImUpdate(cb *func(EventControllerKey)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "im-update", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := EventControllerKey{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "im-update", cbRefPtr)
}

// Emitted whenever a key is pressed.
func (x *EventControllerKey) ConnectKeyPressed(cb *func(EventControllerKey, uint, uint, gdk.ModifierType) bool) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "key-pressed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, KeyvalVarp uint, KeycodeVarp uint, StateVarp gdk.ModifierType) bool {
		fa := EventControllerKey{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa, KeyvalVarp, KeycodeVarp, StateVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "key-pressed", cbRefPtr)
}

// Emitted whenever a key is released.
func (x *EventControllerKey) ConnectKeyReleased(cb *func(EventControllerKey, uint, uint, gdk.ModifierType)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "key-released", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, KeyvalVarp uint, KeycodeVarp uint, StateVarp gdk.ModifierType) {
		fa := EventControllerKey{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, KeyvalVarp, KeycodeVarp, StateVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "key-released", cbRefPtr)
}

// Emitted whenever the state of modifier keys and pointer buttons change.
func (x *EventControllerKey) ConnectModifiers(cb *func(EventControllerKey, gdk.ModifierType) bool) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "modifiers", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, KeyvalVarp gdk.ModifierType) bool {
		fa := EventControllerKey{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa, KeyvalVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "modifiers", cbRefPtr)
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xEventControllerKeyGLibType, lib, "gtk_event_controller_key_get_type")

	core.PuregoSafeRegister(&xNewEventControllerKey, lib, "gtk_event_controller_key_new")

	core.PuregoSafeRegister(&xEventControllerKeyForward, lib, "gtk_event_controller_key_forward")
	core.PuregoSafeRegister(&xEventControllerKeyGetGroup, lib, "gtk_event_controller_key_get_group")
	core.PuregoSafeRegister(&xEventControllerKeyGetImContext, lib, "gtk_event_controller_key_get_im_context")
	core.PuregoSafeRegister(&xEventControllerKeySetImContext, lib, "gtk_event_controller_key_set_im_context")

}
