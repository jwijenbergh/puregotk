// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type GestureRotateClass struct {
	_ structs.HostLayout
}

func (x *GestureRotateClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkGestureRotate` is a `GtkGesture` for 2-finger rotations.
//
// Whenever the angle between both handled sequences changes, the
// [signal@Gtk.GestureRotate::angle-changed] signal is emitted.
type GestureRotate struct {
	Gesture
}

var xGestureRotateGLibType func() types.GType

func GestureRotateGLibType() types.GType {
	return xGestureRotateGLibType()
}

func GestureRotateNewFromInternalPtr(ptr uintptr) *GestureRotate {
	cls := &GestureRotate{}
	cls.Ptr = ptr
	return cls
}

var xNewGestureRotate func() uintptr

// Returns a newly created `GtkGesture` that recognizes 2-touch
// rotation gestures.
func NewGestureRotate() *GestureRotate {
	var cls *GestureRotate

	cret := xNewGestureRotate()

	if cret == 0 {
		return nil
	}
	cls = &GestureRotate{}
	cls.Ptr = cret
	return cls
}

var xGestureRotateGetAngleDelta func(uintptr) float64

// Gets the angle delta in radians.
//
// If @gesture is active, this function returns the angle difference
// in radians since the gesture was first recognized. If @gesture is
// not active, 0 is returned.
func (x *GestureRotate) GetAngleDelta() float64 {

	cret := xGestureRotateGetAngleDelta(x.GoPointer())
	return cret
}

func (c *GestureRotate) GoPointer() uintptr {
	return c.Ptr
}

func (c *GestureRotate) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted when the angle between both tracked points changes.
func (x *GestureRotate) ConnectAngleChanged(cb *func(GestureRotate, float64, float64)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "angle-changed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, AngleVarp float64, AngleDeltaVarp float64) {
		fa := GestureRotate{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, AngleVarp, AngleDeltaVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "angle-changed", cbRefPtr)
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xGestureRotateGLibType, lib, "gtk_gesture_rotate_get_type")

	core.PuregoSafeRegister(&xNewGestureRotate, lib, "gtk_gesture_rotate_new")

	core.PuregoSafeRegister(&xGestureRotateGetAngleDelta, lib, "gtk_gesture_rotate_get_angle_delta")

}
