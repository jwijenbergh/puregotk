// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type ConstraintClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *ConstraintClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type ConstraintTargetInterface struct {
	_ structs.HostLayout
}

func (x *ConstraintTargetInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// The `GtkConstraintTarget` interface is implemented by objects that
// can be used as source or target in `GtkConstraint`s.
//
// Besides `GtkWidget`, it is also implemented by `GtkConstraintGuide`.
type ConstraintTarget interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
}

var xConstraintTargetGLibType func() types.GType

func ConstraintTargetGLibType() types.GType {
	return xConstraintTargetGLibType()
}

type ConstraintTargetBase struct {
	Ptr uintptr
}

func (x *ConstraintTargetBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *ConstraintTargetBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// `GtkConstraint` describes a constraint between attributes of two widgets,
//
//	expressed as a linear equation.
//
// The typical equation for a constraint is:
//
// ```
//
//	target.target_attr = source.source_attr Ã— multiplier + constant
//
// ```
//
// Each `GtkConstraint` is part of a system that will be solved by a
// [class@Gtk.ConstraintLayout] in order to allocate and position each
// child widget or guide.
//
// The source and target, as well as their attributes, of a `GtkConstraint`
// instance are immutable after creation.
type Constraint struct {
	gobject.Object
}

var xConstraintGLibType func() types.GType

func ConstraintGLibType() types.GType {
	return xConstraintGLibType()
}

func ConstraintNewFromInternalPtr(ptr uintptr) *Constraint {
	cls := &Constraint{}
	cls.Ptr = ptr
	return cls
}

var xNewConstraint func(uintptr, ConstraintAttribute, ConstraintRelation, uintptr, ConstraintAttribute, float64, float64, int) uintptr

// Creates a new constraint representing a relation between a layout
// attribute on a source and a layout attribute on a target.
func NewConstraint(TargetVar ConstraintTarget, TargetAttributeVar ConstraintAttribute, RelationVar ConstraintRelation, SourceVar ConstraintTarget, SourceAttributeVar ConstraintAttribute, MultiplierVar float64, ConstantVar float64, StrengthVar int) *Constraint {
	var cls *Constraint

	cret := xNewConstraint(TargetVar.GoPointer(), TargetAttributeVar, RelationVar, SourceVar.GoPointer(), SourceAttributeVar, MultiplierVar, ConstantVar, StrengthVar)

	if cret == 0 {
		return nil
	}
	cls = &Constraint{}
	cls.Ptr = cret
	return cls
}

var xNewConstraintConstant func(uintptr, ConstraintAttribute, ConstraintRelation, float64, int) uintptr

// Creates a new constraint representing a relation between a layout
// attribute on a target and a constant value.
func NewConstraintConstant(TargetVar ConstraintTarget, TargetAttributeVar ConstraintAttribute, RelationVar ConstraintRelation, ConstantVar float64, StrengthVar int) *Constraint {
	var cls *Constraint

	cret := xNewConstraintConstant(TargetVar.GoPointer(), TargetAttributeVar, RelationVar, ConstantVar, StrengthVar)

	if cret == 0 {
		return nil
	}
	cls = &Constraint{}
	cls.Ptr = cret
	return cls
}

var xConstraintGetConstant func(uintptr) float64

// Retrieves the constant factor added to the source attributes' value.
func (x *Constraint) GetConstant() float64 {

	cret := xConstraintGetConstant(x.GoPointer())
	return cret
}

var xConstraintGetMultiplier func(uintptr) float64

// Retrieves the multiplication factor applied to the source
// attribute's value.
func (x *Constraint) GetMultiplier() float64 {

	cret := xConstraintGetMultiplier(x.GoPointer())
	return cret
}

var xConstraintGetRelation func(uintptr) ConstraintRelation

// The order relation between the terms of the constraint.
func (x *Constraint) GetRelation() ConstraintRelation {

	cret := xConstraintGetRelation(x.GoPointer())
	return cret
}

var xConstraintGetSource func(uintptr) uintptr

// Retrieves the [iface@Gtk.ConstraintTarget] used as the source for the
// constraint.
//
// If the source is set to `NULL` at creation, the constraint will use
// the widget using the [class@Gtk.ConstraintLayout] as the source.
func (x *Constraint) GetSource() *ConstraintTargetBase {
	var cls *ConstraintTargetBase

	cret := xConstraintGetSource(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ConstraintTargetBase{}
	cls.Ptr = cret
	return cls
}

var xConstraintGetSourceAttribute func(uintptr) ConstraintAttribute

// Retrieves the attribute of the source to be read by the constraint.
func (x *Constraint) GetSourceAttribute() ConstraintAttribute {

	cret := xConstraintGetSourceAttribute(x.GoPointer())
	return cret
}

var xConstraintGetStrength func(uintptr) int

// Retrieves the strength of the constraint.
func (x *Constraint) GetStrength() int {

	cret := xConstraintGetStrength(x.GoPointer())
	return cret
}

var xConstraintGetTarget func(uintptr) uintptr

// Retrieves the [iface@Gtk.ConstraintTarget] used as the target for
// the constraint.
//
// If the targe is set to `NULL` at creation, the constraint will use
// the widget using the [class@Gtk.ConstraintLayout] as the target.
func (x *Constraint) GetTarget() *ConstraintTargetBase {
	var cls *ConstraintTargetBase

	cret := xConstraintGetTarget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ConstraintTargetBase{}
	cls.Ptr = cret
	return cls
}

var xConstraintGetTargetAttribute func(uintptr) ConstraintAttribute

// Retrieves the attribute of the target to be set by the constraint.
func (x *Constraint) GetTargetAttribute() ConstraintAttribute {

	cret := xConstraintGetTargetAttribute(x.GoPointer())
	return cret
}

var xConstraintIsAttached func(uintptr) bool

// Checks whether the constraint is attached to a [class@Gtk.ConstraintLayout],
// and it is contributing to the layout.
func (x *Constraint) IsAttached() bool {

	cret := xConstraintIsAttached(x.GoPointer())
	return cret
}

var xConstraintIsConstant func(uintptr) bool

// Checks whether the constraint describes a relation between an attribute
// on the [property@Gtk.Constraint:target] and a constant value.
func (x *Constraint) IsConstant() bool {

	cret := xConstraintIsConstant(x.GoPointer())
	return cret
}

var xConstraintIsRequired func(uintptr) bool

// Checks whether the constraint is a required relation for solving the
// constraint layout.
func (x *Constraint) IsRequired() bool {

	cret := xConstraintIsRequired(x.GoPointer())
	return cret
}

func (c *Constraint) GoPointer() uintptr {
	return c.Ptr
}

func (c *Constraint) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xConstraintGLibType, lib, "gtk_constraint_get_type")

	core.PuregoSafeRegister(&xNewConstraint, lib, "gtk_constraint_new")
	core.PuregoSafeRegister(&xNewConstraintConstant, lib, "gtk_constraint_new_constant")

	core.PuregoSafeRegister(&xConstraintGetConstant, lib, "gtk_constraint_get_constant")
	core.PuregoSafeRegister(&xConstraintGetMultiplier, lib, "gtk_constraint_get_multiplier")
	core.PuregoSafeRegister(&xConstraintGetRelation, lib, "gtk_constraint_get_relation")
	core.PuregoSafeRegister(&xConstraintGetSource, lib, "gtk_constraint_get_source")
	core.PuregoSafeRegister(&xConstraintGetSourceAttribute, lib, "gtk_constraint_get_source_attribute")
	core.PuregoSafeRegister(&xConstraintGetStrength, lib, "gtk_constraint_get_strength")
	core.PuregoSafeRegister(&xConstraintGetTarget, lib, "gtk_constraint_get_target")
	core.PuregoSafeRegister(&xConstraintGetTargetAttribute, lib, "gtk_constraint_get_target_attribute")
	core.PuregoSafeRegister(&xConstraintIsAttached, lib, "gtk_constraint_is_attached")
	core.PuregoSafeRegister(&xConstraintIsConstant, lib, "gtk_constraint_is_constant")
	core.PuregoSafeRegister(&xConstraintIsRequired, lib, "gtk_constraint_is_required")

	core.PuregoSafeRegister(&xConstraintTargetGLibType, lib, "gtk_constraint_target_get_type")

}
