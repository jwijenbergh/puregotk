// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

// A `GtkLinkButton` is a button with a hyperlink.
//
// ![An example GtkLinkButton](link-button.png)
//
// It is useful to show quick links to resources.
//
// A link button is created by calling either [ctor@Gtk.LinkButton.new] or
// [ctor@Gtk.LinkButton.new_with_label]. If using the former, the URI you
// pass to the constructor is used as a label for the widget.
//
// The URI bound to a `GtkLinkButton` can be set specifically using
// [method@Gtk.LinkButton.set_uri].
//
// By default, `GtkLinkButton` calls [func@Gtk.show_uri] when the button
// is clicked. This behaviour can be overridden by connecting to the
// [signal@Gtk.LinkButton::activate-link] signal and returning %TRUE from
// the signal handler.
//
// # CSS nodes
//
// `GtkLinkButton` has a single CSS node with name button. To differentiate
// it from a plain `GtkButton`, it gets the .link style class.
//
// # Accessibility
//
// `GtkLinkButton` uses the %GTK_ACCESSIBLE_ROLE_LINK role.
type LinkButton struct {
	Button
}

func LinkButtonNewFromInternalPtr(ptr uintptr) *LinkButton {
	cls := &LinkButton{}
	cls.Ptr = ptr
	return cls
}

var xNewLinkButton func(string) uintptr

// Creates a new `GtkLinkButton` with the URI as its text.
func NewLinkButton(UriVar string) *LinkButton {
	var cls *LinkButton

	cret := xNewLinkButton(UriVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &LinkButton{}
	cls.Ptr = cret
	return cls
}

var xNewLinkButtonWithLabel func(string, string) uintptr

// Creates a new `GtkLinkButton` containing a label.
func NewLinkButtonWithLabel(UriVar string, LabelVar string) *LinkButton {
	var cls *LinkButton

	cret := xNewLinkButtonWithLabel(UriVar, LabelVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &LinkButton{}
	cls.Ptr = cret
	return cls
}

var xLinkButtonGetUri func(uintptr) string

// Retrieves the URI of the `GtkLinkButton`.
func (x *LinkButton) GetUri() string {

	cret := xLinkButtonGetUri(x.GoPointer())
	return cret
}

var xLinkButtonGetVisited func(uintptr) bool

// Retrieves the “visited” state of the `GtkLinkButton`.
//
// The button becomes visited when it is clicked. If the URI
// is changed on the button, the “visited” state is unset again.
//
// The state may also be changed using [method@Gtk.LinkButton.set_visited].
func (x *LinkButton) GetVisited() bool {

	cret := xLinkButtonGetVisited(x.GoPointer())
	return cret
}

var xLinkButtonSetUri func(uintptr, string)

// Sets @uri as the URI where the `GtkLinkButton` points.
//
// As a side-effect this unsets the “visited” state of the button.
func (x *LinkButton) SetUri(UriVar string) {

	xLinkButtonSetUri(x.GoPointer(), UriVar)

}

var xLinkButtonSetVisited func(uintptr, bool)

// Sets the “visited” state of the `GtkLinkButton`.
//
// See [method@Gtk.LinkButton.get_visited] for more details.
func (x *LinkButton) SetVisited(VisitedVar bool) {

	xLinkButtonSetVisited(x.GoPointer(), VisitedVar)

}

func (c *LinkButton) GoPointer() uintptr {
	return c.Ptr
}

func (c *LinkButton) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted each time the `GtkLinkButton` is clicked.
//
// The default handler will call [func@Gtk.show_uri] with the URI
// stored inside the [property@Gtk.LinkButton:uri] property.
//
// To override the default behavior, you can connect to the
// ::activate-link signal and stop the propagation of the signal
// by returning %TRUE from your handler.
func (x *LinkButton) ConnectActivateLink(cb *func(LinkButton) bool) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "activate-link", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) bool {
		fa := LinkButton{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "activate-link", cbRefPtr)
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *LinkButton) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *LinkButton) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *LinkButton) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *LinkButton) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *LinkButton) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *LinkButton) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *LinkButton) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *LinkButton) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *LinkButton) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *LinkButton) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the action name for @actionable.
func (x *LinkButton) GetActionName() string {

	cret := XGtkActionableGetActionName(x.GoPointer())
	return cret
}

// Gets the current target value of @actionable.
func (x *LinkButton) GetActionTargetValue() *glib.Variant {

	cret := XGtkActionableGetActionTargetValue(x.GoPointer())
	return cret
}

// Specifies the name of the action with which this widget should be
// associated.
//
// If @action_name is %NULL then the widget will be unassociated from
// any previous action.
//
// Usually this function is used when the widget is located (or will be
// located) within the hierarchy of a `GtkApplicationWindow`.
//
// Names are of the form “win.save” or “app.quit” for actions on the
// containing [class@ApplicationWindow] or its associated [class@Application],
// respectively. This is the same form used for actions in the [class@Gio.Menu]
// associated with the window.
func (x *LinkButton) SetActionName(ActionNameVar string) {

	XGtkActionableSetActionName(x.GoPointer(), ActionNameVar)

}

// Sets the target of an actionable widget.
//
// This is a convenience function that calls [ctor@GLib.Variant.new] for
// @format_string and uses the result to call
// [method@Gtk.Actionable.set_action_target_value].
//
// If you are setting a string-valued target and want to set
// the action name at the same time, you can use
// [method@Gtk.Actionable.set_detailed_action_name].
func (x *LinkButton) SetActionTarget(FormatStringVar string, varArgs ...interface{}) {

	XGtkActionableSetActionTarget(x.GoPointer(), FormatStringVar, varArgs...)

}

// Sets the target value of an actionable widget.
//
// If @target_value is %NULL then the target value is unset.
//
// The target value has two purposes. First, it is used as the parameter
// to activation of the action associated with the `GtkActionable` widget.
// Second, it is used to determine if the widget should be rendered as
// “active” — the widget is active if the state is equal to the given target.
//
// Consider the example of associating a set of buttons with a [iface@Gio.Action]
// with string state in a typical “radio button” situation. Each button
// will be associated with the same action, but with a different target
// value for that action. Clicking on a particular button will activate
// the action with the target of that button, which will typically cause
// the action’s state to change to that value. Since the action’s state
// is now equal to the target value of the button, the button will now
// be rendered as active (and the other buttons, with different targets,
// rendered inactive).
func (x *LinkButton) SetActionTargetValue(TargetValueVar *glib.Variant) {

	XGtkActionableSetActionTargetValue(x.GoPointer(), TargetValueVar)

}

// Sets the action-name and associated string target value of an
// actionable widget.
//
// @detailed_action_name is a string in the format accepted by
// [func@Gio.Action.parse_detailed_name].
func (x *LinkButton) SetDetailedActionName(DetailedActionNameVar string) {

	XGtkActionableSetDetailedActionName(x.GoPointer(), DetailedActionNameVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *LinkButton) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewLinkButton, lib, "gtk_link_button_new")
	core.PuregoSafeRegister(&xNewLinkButtonWithLabel, lib, "gtk_link_button_new_with_label")

	core.PuregoSafeRegister(&xLinkButtonGetUri, lib, "gtk_link_button_get_uri")
	core.PuregoSafeRegister(&xLinkButtonGetVisited, lib, "gtk_link_button_get_visited")
	core.PuregoSafeRegister(&xLinkButtonSetUri, lib, "gtk_link_button_set_uri")
	core.PuregoSafeRegister(&xLinkButtonSetVisited, lib, "gtk_link_button_set_visited")

}
