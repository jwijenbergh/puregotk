// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type BuilderCScopeClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *BuilderCScopeClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// The virtual function table to implement for `GtkBuilderScope` implementations.
// Default implementations for each function do exist, but they usually just fail,
// so it is suggested that implementations implement all of them.
type BuilderScopeInterface struct {
	_ structs.HostLayout

	GIface uintptr
}

func (x *BuilderScopeInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkBuilderScope` is an interface to provide language binding support
// to `GtkBuilder`.
//
// The goal of `GtkBuilderScope` is to look up programming-language-specific
// values for strings that are given in a `GtkBuilder` UI file.
//
// The primary intended audience is bindings that want to provide deeper
// integration of `GtkBuilder` into the language.
//
// A `GtkBuilderScope` instance may be used with multiple `GtkBuilder` objects,
// even at once.
//
// By default, GTK will use its own implementation of `GtkBuilderScope`
// for the C language which can be created via [ctor@Gtk.BuilderCScope.new].
type BuilderScope interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
}

var xBuilderScopeGLibType func() types.GType

func BuilderScopeGLibType() types.GType {
	return xBuilderScopeGLibType()
}

type BuilderScopeBase struct {
	Ptr uintptr
}

func (x *BuilderScopeBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *BuilderScopeBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// The list of flags that can be passed to gtk_builder_create_closure().
//
// New values may be added in the future for new features, so external
// implementations of [iface@Gtk.BuilderScope] should test the flags
// for unknown values and raise a %GTK_BUILDER_ERROR_INVALID_ATTRIBUTE error
// when they encounter one.
type BuilderClosureFlags int

var xBuilderClosureFlagsGLibType func() types.GType

func BuilderClosureFlagsGLibType() types.GType {
	return xBuilderClosureFlagsGLibType()
}

const (

	// The closure should be created swapped. See
	//   g_cclosure_new_swap() for details.
	BuilderClosureSwappedValue BuilderClosureFlags = 1
)

// A `GtkBuilderScope` implementation for the C language.
//
// `GtkBuilderCScope` instances use symbols explicitly added to @builder
// with prior calls to [method@Gtk.BuilderCScope.add_callback_symbol].
// If developers want to do that, they are encouraged to create their
// own scopes for that purpose.
//
// In the case that symbols are not explicitly added; GTK will uses
// `GModule`’s introspective features (by opening the module %NULL) to
// look at the application’s symbol table. From here it tries to match
// the signal function names given in the interface description with
// symbols in the application.
//
// Note that unless [method@Gtk.BuilderCScope.add_callback_symbol] is
// called for all signal callbacks which are referenced by the loaded XML,
// this functionality will require that `GModule` be supported on the platform.
type BuilderCScope struct {
	gobject.Object
}

var xBuilderCScopeGLibType func() types.GType

func BuilderCScopeGLibType() types.GType {
	return xBuilderCScopeGLibType()
}

func BuilderCScopeNewFromInternalPtr(ptr uintptr) *BuilderCScope {
	cls := &BuilderCScope{}
	cls.Ptr = ptr
	return cls
}

var xNewBuilderCScope func() uintptr

// Creates a new `GtkBuilderCScope` object to use with future
// `GtkBuilder` instances.
//
// Calling this function is only necessary if you want to add
// custom callbacks via [method@Gtk.BuilderCScope.add_callback_symbol].
func NewBuilderCScope() *BuilderCScope {
	var cls *BuilderCScope

	cret := xNewBuilderCScope()

	if cret == 0 {
		return nil
	}
	cls = &BuilderCScope{}
	cls.Ptr = cret
	return cls
}

var xBuilderCScopeAddCallbackSymbol func(uintptr, string, uintptr)

// Adds the @callback_symbol to the scope of @builder under the
// given @callback_name.
//
// Using this function overrides the behavior of
// [method@Gtk.Builder.create_closure] for any callback symbols that
// are added. Using this method allows for better encapsulation as it
// does not require that callback symbols be declared in the global
// namespace.
func (x *BuilderCScope) AddCallbackSymbol(CallbackNameVar string, CallbackSymbolVar *gobject.Callback) {

	xBuilderCScopeAddCallbackSymbol(x.GoPointer(), CallbackNameVar, glib.NewCallback(CallbackSymbolVar))

}

var xBuilderCScopeAddCallbackSymbols func(uintptr, string, uintptr, ...interface{})

// A convenience function to add many callbacks.
//
// This is equivalent to calling [method@Gtk.BuilderCScope.add_callback_symbol]
// for each symbol.
func (x *BuilderCScope) AddCallbackSymbols(FirstCallbackNameVar string, FirstCallbackSymbolVar *gobject.Callback, varArgs ...interface{}) {

	xBuilderCScopeAddCallbackSymbols(x.GoPointer(), FirstCallbackNameVar, glib.NewCallback(FirstCallbackSymbolVar), varArgs...)

}

var xBuilderCScopeLookupCallbackSymbol func(uintptr, string) uintptr

// Fetches a symbol previously added with
// gtk_builder_cscope_add_callback_symbol().
func (x *BuilderCScope) LookupCallbackSymbol(CallbackNameVar string) uintptr {

	cret := xBuilderCScopeLookupCallbackSymbol(x.GoPointer(), CallbackNameVar)
	return cret
}

func (c *BuilderCScope) GoPointer() uintptr {
	return c.Ptr
}

func (c *BuilderCScope) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xBuilderClosureFlagsGLibType, lib, "gtk_builder_closure_flags_get_type")

	core.PuregoSafeRegister(&xBuilderCScopeGLibType, lib, "gtk_builder_cscope_get_type")

	core.PuregoSafeRegister(&xNewBuilderCScope, lib, "gtk_builder_cscope_new")

	core.PuregoSafeRegister(&xBuilderCScopeAddCallbackSymbol, lib, "gtk_builder_cscope_add_callback_symbol")
	core.PuregoSafeRegister(&xBuilderCScopeAddCallbackSymbols, lib, "gtk_builder_cscope_add_callback_symbols")
	core.PuregoSafeRegister(&xBuilderCScopeLookupCallbackSymbol, lib, "gtk_builder_cscope_lookup_callback_symbol")

	core.PuregoSafeRegister(&xBuilderScopeGLibType, lib, "gtk_builder_scope_get_type")

}
