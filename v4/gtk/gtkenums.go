// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

const (
	// An undefined value. The accessible attribute is either unset, or its
	// value is undefined.
	ACCESSIBLE_VALUE_UNDEFINED int = -1
)

// Describes hints that might be taken into account by input methods
// or applications.
//
// Note that input methods may already tailor their behaviour according
// to the [enum@InputPurpose] of the entry.
//
// Some common sense is expected when using these flags - mixing
// %GTK_INPUT_HINT_LOWERCASE with any of the uppercase hints makes no sense.
//
// This enumeration may be extended in the future; input methods should
// ignore unknown values.
type InputHints int

var xInputHintsGLibType func() types.GType

func InputHintsGLibType() types.GType {
	return xInputHintsGLibType()
}

const (

	// No special behaviour suggested
	InputHintNoneValue InputHints = 0
	// Suggest checking for typos
	InputHintSpellcheckValue InputHints = 1
	// Suggest not checking for typos
	InputHintNoSpellcheckValue InputHints = 2
	// Suggest word completion
	InputHintWordCompletionValue InputHints = 4
	// Suggest to convert all text to lowercase
	InputHintLowercaseValue InputHints = 8
	// Suggest to capitalize all text
	InputHintUppercaseCharsValue InputHints = 16
	// Suggest to capitalize the first
	//   character of each word
	InputHintUppercaseWordsValue InputHints = 32
	// Suggest to capitalize the
	//   first word of each sentence
	InputHintUppercaseSentencesValue InputHints = 64
	// Suggest to not show an onscreen keyboard
	//   (e.g for a calculator that already has all the keys).
	InputHintInhibitOskValue InputHints = 128
	// The text is vertical
	InputHintVerticalWritingValue InputHints = 256
	// Suggest offering Emoji support
	InputHintEmojiValue InputHints = 512
	// Suggest not offering Emoji support
	InputHintNoEmojiValue InputHints = 1024
	// Request that the input method should not
	//    update personalized data (like typing history)
	InputHintPrivateValue InputHints = 2048
)

// Flags that influence the behavior of [method@Widget.pick].
type PickFlags int

var xPickFlagsGLibType func() types.GType

func PickFlagsGLibType() types.GType {
	return xPickFlagsGLibType()
}

const (

	// The default behavior, include widgets that are receiving events
	PickDefaultValue PickFlags = 0
	// Include widgets that are insensitive
	PickInsensitiveValue PickFlags = 1
	// Include widgets that are marked as non-targetable. See [property@Widget:can-target]
	PickNonTargetableValue PickFlags = 2
)

// Describes a widget state.
//
// Widget states are used to match the widget against CSS pseudo-classes.
// Note that GTK extends the regular CSS classes and sometimes uses
// different names.
type StateFlags int

var xStateFlagsGLibType func() types.GType

func StateFlagsGLibType() types.GType {
	return xStateFlagsGLibType()
}

const (

	// State during normal operation
	StateFlagNormalValue StateFlags = 0
	// Widget is active
	StateFlagActiveValue StateFlags = 1
	// Widget has a mouse pointer over it
	StateFlagPrelightValue StateFlags = 2
	// Widget is selected
	StateFlagSelectedValue StateFlags = 4
	// Widget is insensitive
	StateFlagInsensitiveValue StateFlags = 8
	// Widget is inconsistent
	StateFlagInconsistentValue StateFlags = 16
	// Widget has the keyboard focus
	StateFlagFocusedValue StateFlags = 32
	// Widget is in a background toplevel window
	StateFlagBackdropValue StateFlags = 64
	// Widget is in left-to-right text direction
	StateFlagDirLtrValue StateFlags = 128
	// Widget is in right-to-left text direction
	StateFlagDirRtlValue StateFlags = 256
	// Widget is a link
	StateFlagLinkValue StateFlags = 512
	// The location the widget points to has already been visited
	StateFlagVisitedValue StateFlags = 1024
	// Widget is checked
	StateFlagCheckedValue StateFlags = 2048
	// Widget is highlighted as a drop target for DND
	StateFlagDropActiveValue StateFlags = 4096
	// Widget has the visible focus
	StateFlagFocusVisibleValue StateFlags = 8192
	// Widget contains the keyboard focus
	StateFlagFocusWithinValue StateFlags = 16384
)

// The possible values for the %GTK_ACCESSIBLE_PROPERTY_AUTOCOMPLETE
// accessible property.
type AccessibleAutocomplete int

var xAccessibleAutocompleteGLibType func() types.GType

func AccessibleAutocompleteGLibType() types.GType {
	return xAccessibleAutocompleteGLibType()
}

const (

	// Automatic suggestions are not displayed.
	AccessibleAutocompleteNoneValue AccessibleAutocomplete = 0
	// When a user is providing input, text
	//    suggesting one way to complete the provided input may be dynamically
	//    inserted after the caret.
	AccessibleAutocompleteInlineValue AccessibleAutocomplete = 1
	// When a user is providing input, an element
	//    containing a collection of values that could complete the provided input
	//    may be displayed.
	AccessibleAutocompleteListValue AccessibleAutocomplete = 2
	// When a user is providing input, an element
	//    containing a collection of values that could complete the provided input
	//    may be displayed. If displayed, one value in the collection is automatically
	//    selected, and the text needed to complete the automatically selected value
	//    appears after the caret in the input.
	AccessibleAutocompleteBothValue AccessibleAutocomplete = 3
)

// The possible values for the %GTK_ACCESSIBLE_STATE_INVALID
// accessible state.
//
// Note that the %GTK_ACCESSIBLE_INVALID_FALSE and
// %GTK_ACCESSIBLE_INVALID_TRUE have the same values
// as %FALSE and %TRUE.
type AccessibleInvalidState int

var xAccessibleInvalidStateGLibType func() types.GType

func AccessibleInvalidStateGLibType() types.GType {
	return xAccessibleInvalidStateGLibType()
}

const (

	// There are no detected errors in the value
	AccessibleInvalidFalseValue AccessibleInvalidState = 0
	// The value entered by the user has failed validation
	AccessibleInvalidTrueValue AccessibleInvalidState = 1
	// A grammatical error was detected
	AccessibleInvalidGrammarValue AccessibleInvalidState = 2
	// A spelling error was detected
	AccessibleInvalidSpellingValue AccessibleInvalidState = 3
)

// The possible accessible properties of a [iface@Accessible].
type AccessibleProperty int

var xAccessiblePropertyGLibType func() types.GType

func AccessiblePropertyGLibType() types.GType {
	return xAccessiblePropertyGLibType()
}

const (

	// Indicates whether inputting text
	//    could trigger display of one or more predictions of the user's intended
	//    value for a combobox, searchbox, or textbox and specifies how predictions
	//    would be presented if they were made. Value type: [enum@AccessibleAutocomplete]
	AccessiblePropertyAutocompleteValue AccessibleProperty = 0
	// Defines a string value that describes
	//    or annotates the current element. Value type: string
	AccessiblePropertyDescriptionValue AccessibleProperty = 1
	// Indicates the availability and type of
	//    interactive popup element, such as menu or dialog, that can be triggered
	//    by an element.
	AccessiblePropertyHasPopupValue AccessibleProperty = 2
	// Indicates keyboard shortcuts that an
	//    author has implemented to activate or give focus to an element. Value type:
	//    string
	AccessiblePropertyKeyShortcutsValue AccessibleProperty = 3
	// Defines a string value that labels the current
	//    element. Value type: string
	AccessiblePropertyLabelValue AccessibleProperty = 4
	// Defines the hierarchical level of an element
	//    within a structure. Value type: integer
	AccessiblePropertyLevelValue AccessibleProperty = 5
	// Indicates whether an element is modal when
	//    displayed. Value type: boolean
	AccessiblePropertyModalValue AccessibleProperty = 6
	// Indicates whether a text box accepts
	//    multiple lines of input or only a single line. Value type: boolean
	AccessiblePropertyMultiLineValue AccessibleProperty = 7
	// Indicates that the user may select
	//    more than one item from the current selectable descendants. Value type:
	//    boolean
	AccessiblePropertyMultiSelectableValue AccessibleProperty = 8
	// Indicates whether the element's
	//    orientation is horizontal, vertical, or unknown/ambiguous. Value type:
	//    [enum@Orientation]
	AccessiblePropertyOrientationValue AccessibleProperty = 9
	// Defines a short hint (a word or short
	//    phrase) intended to aid the user with data entry when the control has no
	//    value. A hint could be a sample value or a brief description of the expected
	//    format. Value type: string
	AccessiblePropertyPlaceholderValue AccessibleProperty = 10
	// Indicates that the element is not editable,
	//    but is otherwise operable. Value type: boolean
	AccessiblePropertyReadOnlyValue AccessibleProperty = 11
	// Indicates that user input is required on
	//    the element before a form may be submitted. Value type: boolean
	AccessiblePropertyRequiredValue AccessibleProperty = 12
	// Defines a human-readable,
	//    author-localized description for the role of an element. Value type: string
	AccessiblePropertyRoleDescriptionValue AccessibleProperty = 13
	// Indicates if items in a table or grid are
	//    sorted in ascending or descending order. Value type: [enum@AccessibleSort]
	AccessiblePropertySortValue AccessibleProperty = 14
	// Defines the maximum allowed value for a
	//    range widget. Value type: double
	AccessiblePropertyValueMaxValue AccessibleProperty = 15
	// Defines the minimum allowed value for a
	//    range widget. Value type: double
	AccessiblePropertyValueMinValue AccessibleProperty = 16
	// Defines the current value for a range widget.
	//    Value type: double
	AccessiblePropertyValueNowValue AccessibleProperty = 17
	// Defines the human readable text alternative
	//    of aria-valuenow for a range widget. Value type: string
	AccessiblePropertyValueTextValue AccessibleProperty = 18
)

// The possible accessible relations of a [iface@Accessible].
//
// Accessible relations can be references to other widgets,
// integers or strings.
type AccessibleRelation int

var xAccessibleRelationGLibType func() types.GType

func AccessibleRelationGLibType() types.GType {
	return xAccessibleRelationGLibType()
}

const (

	// Identifies the currently active
	//    element when focus is on a composite widget, combobox, textbox, group,
	//    or application. Value type: reference
	AccessibleRelationActiveDescendantValue AccessibleRelation = 0
	// Defines the total number of columns
	//    in a table, grid, or treegrid. Value type: integer
	AccessibleRelationColCountValue AccessibleRelation = 1
	// Defines an element's column index or
	//    position with respect to the total number of columns within a table,
	//    grid, or treegrid. Value type: integer
	AccessibleRelationColIndexValue AccessibleRelation = 2
	// Defines a human readable text
	//   alternative of %GTK_ACCESSIBLE_RELATION_COL_INDEX. Value type: string
	AccessibleRelationColIndexTextValue AccessibleRelation = 3
	// Defines the number of columns spanned
	//   by a cell or gridcell within a table, grid, or treegrid. Value type: integer
	AccessibleRelationColSpanValue AccessibleRelation = 4
	// Identifies the element (or elements) whose
	//    contents or presence are controlled by the current element. Value type: reference
	AccessibleRelationControlsValue AccessibleRelation = 5
	// Identifies the element (or elements)
	//    that describes the object. Value type: reference
	AccessibleRelationDescribedByValue AccessibleRelation = 6
	// Identifies the element (or elements) that
	//    provide additional information related to the object. Value type: reference
	AccessibleRelationDetailsValue AccessibleRelation = 7
	// Identifies the element that provides
	//    an error message for an object. Value type: reference
	AccessibleRelationErrorMessageValue AccessibleRelation = 8
	// Identifies the next element (or elements)
	//    in an alternate reading order of content which, at the user's discretion,
	//    allows assistive technology to override the general default of reading in
	//    document source order. Value type: reference
	AccessibleRelationFlowToValue AccessibleRelation = 9
	// Identifies the element (or elements)
	//    that labels the current element. Value type: reference
	AccessibleRelationLabelledByValue AccessibleRelation = 10
	// Identifies an element (or elements) in order
	//    to define a visual, functional, or contextual parent/child relationship
	//    between elements where the widget hierarchy cannot be used to represent
	//    the relationship. Value type: reference
	AccessibleRelationOwnsValue AccessibleRelation = 11
	// Defines an element's number or position
	//    in the current set of listitems or treeitems. Value type: integer
	AccessibleRelationPosInSetValue AccessibleRelation = 12
	// Defines the total number of rows in a table,
	//    grid, or treegrid. Value type: integer
	AccessibleRelationRowCountValue AccessibleRelation = 13
	// Defines an element's row index or position
	//    with respect to the total number of rows within a table, grid, or treegrid.
	//    Value type: integer
	AccessibleRelationRowIndexValue AccessibleRelation = 14
	// Defines a human readable text
	//    alternative of aria-rowindex. Value type: string
	AccessibleRelationRowIndexTextValue AccessibleRelation = 15
	// Defines the number of rows spanned by a
	//    cell or gridcell within a table, grid, or treegrid. Value type: integer
	AccessibleRelationRowSpanValue AccessibleRelation = 16
	// Defines the number of items in the current
	//    set of listitems or treeitems. Value type: integer
	AccessibleRelationSetSizeValue AccessibleRelation = 17
)

// The accessible role for a [iface@Accessible] implementation.
//
// Abstract roles are only used as part of the ontology; application
// developers must not use abstract roles in their code.
type AccessibleRole int

var xAccessibleRoleGLibType func() types.GType

func AccessibleRoleGLibType() types.GType {
	return xAccessibleRoleGLibType()
}

const (

	// An element with important, and usually
	//   time-sensitive, information
	AccessibleRoleAlertValue AccessibleRole = 0
	// A type of dialog that contains an
	//   alert message
	AccessibleRoleAlertDialogValue AccessibleRole = 1
	// Unused
	AccessibleRoleBannerValue AccessibleRole = 2
	// An input element that allows for
	//   user-triggered actions when clicked or pressed
	AccessibleRoleButtonValue AccessibleRole = 3
	// Unused
	AccessibleRoleCaptionValue AccessibleRole = 4
	// Unused
	AccessibleRoleCellValue AccessibleRole = 5
	// A checkable input element that has
	//   three possible values: `true`, `false`, or `mixed`
	AccessibleRoleCheckboxValue AccessibleRole = 6
	// A header in a columned list.
	AccessibleRoleColumnHeaderValue AccessibleRole = 7
	// An input that controls another element,
	//   such as a list or a grid, that can dynamically pop up to help the user
	//   set the value of the input
	AccessibleRoleComboBoxValue AccessibleRole = 8
	// Abstract role.
	AccessibleRoleCommandValue AccessibleRole = 9
	// Abstract role.
	AccessibleRoleCompositeValue AccessibleRole = 10
	// A dialog is a window that is designed to interrupt
	//    the current processing of an application in order to prompt the user to enter
	//    information or require a response.
	AccessibleRoleDialogValue AccessibleRole = 11
	// Unused
	AccessibleRoleDocumentValue AccessibleRole = 12
	// Unused
	AccessibleRoleFeedValue AccessibleRole = 13
	// Unused
	AccessibleRoleFormValue AccessibleRole = 14
	// Unused
	AccessibleRoleGenericValue AccessibleRole = 15
	// A grid of items.
	AccessibleRoleGridValue AccessibleRole = 16
	// An item in a grid or tree grid.
	AccessibleRoleGridCellValue AccessibleRole = 17
	// An element that groups multiple widgets. GTK uses
	//   this role for various containers, like [class@Box], [class@Viewport], and [class@HeaderBar].
	AccessibleRoleGroupValue AccessibleRole = 18
	// Unused
	AccessibleRoleHeadingValue AccessibleRole = 19
	// An image.
	AccessibleRoleImgValue AccessibleRole = 20
	// Abstract role.
	AccessibleRoleInputValue AccessibleRole = 21
	// A visible name or caption for a user interface component.
	AccessibleRoleLabelValue AccessibleRole = 22
	// Abstract role.
	AccessibleRoleLandmarkValue AccessibleRole = 23
	// Unused
	AccessibleRoleLegendValue AccessibleRole = 24
	// A clickable link.
	AccessibleRoleLinkValue AccessibleRole = 25
	// A list of items.
	AccessibleRoleListValue AccessibleRole = 26
	// Unused.
	AccessibleRoleListBoxValue AccessibleRole = 27
	// An item in a list.
	AccessibleRoleListItemValue AccessibleRole = 28
	// Unused
	AccessibleRoleLogValue AccessibleRole = 29
	// Unused
	AccessibleRoleMainValue AccessibleRole = 30
	// Unused
	AccessibleRoleMarqueeValue AccessibleRole = 31
	// Unused
	AccessibleRoleMathValue AccessibleRole = 32
	// An element that represents a value within a known range.
	AccessibleRoleMeterValue AccessibleRole = 33
	// A menu.
	AccessibleRoleMenuValue AccessibleRole = 34
	// A menubar.
	AccessibleRoleMenuBarValue AccessibleRole = 35
	// An item in a menu.
	AccessibleRoleMenuItemValue AccessibleRole = 36
	// A check item in a menu.
	AccessibleRoleMenuItemCheckboxValue AccessibleRole = 37
	// A radio item in a menu.
	AccessibleRoleMenuItemRadioValue AccessibleRole = 38
	// Unused
	AccessibleRoleNavigationValue AccessibleRole = 39
	// An element that is not represented to accessibility technologies.
	AccessibleRoleNoneValue AccessibleRole = 40
	// Unused
	AccessibleRoleNoteValue AccessibleRole = 41
	// Unused
	AccessibleRoleOptionValue AccessibleRole = 42
	// An element that is not represented to accessibility technologies.
	AccessibleRolePresentationValue AccessibleRole = 43
	// An element that displays the progress
	//    status for tasks that take a long time.
	AccessibleRoleProgressBarValue AccessibleRole = 44
	// A checkable input in a group of radio roles,
	//    only one of which can be checked at a time.
	AccessibleRoleRadioValue AccessibleRole = 45
	// Unused
	AccessibleRoleRadioGroupValue AccessibleRole = 46
	// Abstract role.
	AccessibleRoleRangeValue AccessibleRole = 47
	// Unused
	AccessibleRoleRegionValue AccessibleRole = 48
	// A row in a columned list.
	AccessibleRoleRowValue AccessibleRole = 49
	// Unused
	AccessibleRoleRowGroupValue AccessibleRole = 50
	// Unused
	AccessibleRoleRowHeaderValue AccessibleRole = 51
	// A graphical object that controls the scrolling
	//    of content within a viewing area, regardless of whether the content is fully
	//    displayed within the viewing area.
	AccessibleRoleScrollbarValue AccessibleRole = 52
	// Unused
	AccessibleRoleSearchValue AccessibleRole = 53
	// A type of textbox intended for specifying
	//    search criteria.
	AccessibleRoleSearchBoxValue AccessibleRole = 54
	// Abstract role.
	AccessibleRoleSectionValue AccessibleRole = 55
	// Abstract role.
	AccessibleRoleSectionHeadValue AccessibleRole = 56
	// Abstract role.
	AccessibleRoleSelectValue AccessibleRole = 57
	// A divider that separates and distinguishes
	//    sections of content or groups of menuitems.
	AccessibleRoleSeparatorValue AccessibleRole = 58
	// A user input where the user selects a value
	//    from within a given range.
	AccessibleRoleSliderValue AccessibleRole = 59
	// A form of range that expects the user to
	//    select from among discrete choices.
	AccessibleRoleSpinButtonValue AccessibleRole = 60
	// Unused
	AccessibleRoleStatusValue AccessibleRole = 61
	// Abstract role.
	AccessibleRoleStructureValue AccessibleRole = 62
	// A type of checkbox that represents on/off values,
	//    as opposed to checked/unchecked values.
	AccessibleRoleSwitchValue AccessibleRole = 63
	// An item in a list of tab used for switching pages.
	AccessibleRoleTabValue AccessibleRole = 64
	// Unused
	AccessibleRoleTableValue AccessibleRole = 65
	// A list of tabs for switching pages.
	AccessibleRoleTabListValue AccessibleRole = 66
	// A page in a notebook or stack.
	AccessibleRoleTabPanelValue AccessibleRole = 67
	// A type of input that allows free-form text
	//    as its value.
	AccessibleRoleTextBoxValue AccessibleRole = 68
	// Unused
	AccessibleRoleTimeValue AccessibleRole = 69
	// Unused
	AccessibleRoleTimerValue AccessibleRole = 70
	// Unused
	AccessibleRoleToolbarValue AccessibleRole = 71
	// Unused
	AccessibleRoleTooltipValue AccessibleRole = 72
	// Unused
	AccessibleRoleTreeValue AccessibleRole = 73
	// A treeview-like, columned list.
	AccessibleRoleTreeGridValue AccessibleRole = 74
	// Unused
	AccessibleRoleTreeItemValue AccessibleRole = 75
	// An interactive component of a graphical user
	//    interface. This is the role that GTK uses by default for widgets.
	AccessibleRoleWidgetValue AccessibleRole = 76
	// An application window.
	AccessibleRoleWindowValue AccessibleRole = 77
)

// The possible values for the %GTK_ACCESSIBLE_PROPERTY_SORT
// accessible property.
type AccessibleSort int

var xAccessibleSortGLibType func() types.GType

func AccessibleSortGLibType() types.GType {
	return xAccessibleSortGLibType()
}

const (

	// There is no defined sort applied to the column.
	AccessibleSortNoneValue AccessibleSort = 0
	// Items are sorted in ascending order by this column.
	AccessibleSortAscendingValue AccessibleSort = 1
	// Items are sorted in descending order by this column.
	AccessibleSortDescendingValue AccessibleSort = 2
	// A sort algorithm other than ascending or
	//    descending has been applied.
	AccessibleSortOtherValue AccessibleSort = 3
)

// The possible accessible states of a [iface@Accessible].
type AccessibleState int

var xAccessibleStateGLibType func() types.GType

func AccessibleStateGLibType() types.GType {
	return xAccessibleStateGLibType()
}

const (

	// A “busy” state. This state has boolean values
	AccessibleStateBusyValue AccessibleState = 0
	// A “checked” state; indicates the current
	//   state of a [class@CheckButton]. Value type: [enum@AccessibleTristate]
	AccessibleStateCheckedValue AccessibleState = 1
	// A “disabled” state; corresponds to the
	//   [property@Widget:sensitive] property. It indicates a UI element
	//   that is perceivable, but not editable or operable. Value type: boolean
	AccessibleStateDisabledValue AccessibleState = 2
	// An “expanded” state; corresponds to the
	//   [property@Expander:expanded] property. Value type: boolean
	//   or undefined
	AccessibleStateExpandedValue AccessibleState = 3
	// A “hidden” state; corresponds to the
	//   [property@Widget:visible] property. You can use this state
	//   explicitly on UI elements that should not be exposed to an assistive
	//   technology. Value type: boolean
	//   See also: %GTK_ACCESSIBLE_STATE_DISABLED
	AccessibleStateHiddenValue AccessibleState = 4
	// An “invalid” state; set when a widget
	//   is showing an error. Value type: [enum@AccessibleInvalidState]
	AccessibleStateInvalidValue AccessibleState = 5
	// A “pressed” state; indicates the current
	//   state of a [class@ToggleButton]. Value type: [enum@AccessibleTristate]
	//   enumeration
	AccessibleStatePressedValue AccessibleState = 6
	// A “selected” state; set when a widget
	//   is selected. Value type: boolean or undefined
	AccessibleStateSelectedValue AccessibleState = 7
)

// The possible values for the %GTK_ACCESSIBLE_STATE_PRESSED
// accessible state.
//
// Note that the %GTK_ACCESSIBLE_TRISTATE_FALSE and
// %GTK_ACCESSIBLE_TRISTATE_TRUE have the same values
// as %FALSE and %TRUE.
type AccessibleTristate int

var xAccessibleTristateGLibType func() types.GType

func AccessibleTristateGLibType() types.GType {
	return xAccessibleTristateGLibType()
}

const (

	// The state is `false`
	AccessibleTristateFalseValue AccessibleTristate = 0
	// The state is `true`
	AccessibleTristateTrueValue AccessibleTristate = 1
	// The state is `mixed`
	AccessibleTristateMixedValue AccessibleTristate = 2
)

// Controls how a widget deals with extra space in a single dimension.
//
// Alignment only matters if the widget receives a “too large” allocation,
// for example if you packed the widget with the [property@Gtk.Widget:hexpand]
// property inside a [class@Box], then the widget might get extra space.
// If you have for example a 16x16 icon inside a 32x32 space, the icon
// could be scaled and stretched, it could be centered, or it could be
// positioned to one side of the space.
//
// Note that in horizontal context %GTK_ALIGN_START and %GTK_ALIGN_END
// are interpreted relative to text direction.
//
// %GTK_ALIGN_BASELINE support is optional for containers and widgets, and
// it is only supported for vertical alignment.  When it's not supported by
// a child or a container it is treated as %GTK_ALIGN_FILL.
type Align int

var xAlignGLibType func() types.GType

func AlignGLibType() types.GType {
	return xAlignGLibType()
}

const (

	// stretch to fill all space if possible, center if
	//   no meaningful way to stretch
	AlignFillValue Align = 0
	// snap to left or top side, leaving space on right or bottom
	AlignStartValue Align = 1
	// snap to right or bottom side, leaving space on left or top
	AlignEndValue Align = 2
	// center natural width of widget inside the allocation
	AlignCenterValue Align = 3
	// align the widget according to the baseline.
	//   See [class@Gtk.Widget].
	AlignBaselineValue Align = 4
)

// Used to indicate the direction in which an arrow should point.
type ArrowType int

var xArrowTypeGLibType func() types.GType

func ArrowTypeGLibType() types.GType {
	return xArrowTypeGLibType()
}

const (

	// Represents an upward pointing arrow.
	ArrowUpValue ArrowType = 0
	// Represents a downward pointing arrow.
	ArrowDownValue ArrowType = 1
	// Represents a left pointing arrow.
	ArrowLeftValue ArrowType = 2
	// Represents a right pointing arrow.
	ArrowRightValue ArrowType = 3
	// No arrow.
	ArrowNoneValue ArrowType = 4
)

// Baseline position in a row of widgets.
//
// Whenever a container has some form of natural row it may align
// children in that row along a common typographical baseline. If
// the amount of vertical space in the row is taller than the total
// requested height of the baseline-aligned children then it can use a
// `GtkBaselinePosition` to select where to put the baseline inside the
// extra available space.
type BaselinePosition int

var xBaselinePositionGLibType func() types.GType

func BaselinePositionGLibType() types.GType {
	return xBaselinePositionGLibType()
}

const (

	// Align the baseline at the top
	BaselinePositionTopValue BaselinePosition = 0
	// Center the baseline
	BaselinePositionCenterValue BaselinePosition = 1
	// Align the baseline at the bottom
	BaselinePositionBottomValue BaselinePosition = 2
)

// Describes how the border of a UI element should be rendered.
type BorderStyle int

var xBorderStyleGLibType func() types.GType

func BorderStyleGLibType() types.GType {
	return xBorderStyleGLibType()
}

const (

	// No visible border
	BorderStyleNoneValue BorderStyle = 0
	// Same as %GTK_BORDER_STYLE_NONE
	BorderStyleHiddenValue BorderStyle = 1
	// A single line segment
	BorderStyleSolidValue BorderStyle = 2
	// Looks as if the content is sunken into the canvas
	BorderStyleInsetValue BorderStyle = 3
	// Looks as if the content is coming out of the canvas
	BorderStyleOutsetValue BorderStyle = 4
	// A series of round dots
	BorderStyleDottedValue BorderStyle = 5
	// A series of square-ended dashes
	BorderStyleDashedValue BorderStyle = 6
	// Two parallel lines with some space between them
	BorderStyleDoubleValue BorderStyle = 7
	// Looks as if it were carved in the canvas
	BorderStyleGrooveValue BorderStyle = 8
	// Looks as if it were coming out of the canvas
	BorderStyleRidgeValue BorderStyle = 9
)

// The widget attributes that can be used when creating a [class@Constraint].
type ConstraintAttribute int

var xConstraintAttributeGLibType func() types.GType

func ConstraintAttributeGLibType() types.GType {
	return xConstraintAttributeGLibType()
}

const (

	// No attribute, used for constant
	//   relations
	ConstraintAttributeNoneValue ConstraintAttribute = 0
	// The left edge of a widget, regardless of
	//   text direction
	ConstraintAttributeLeftValue ConstraintAttribute = 1
	// The right edge of a widget, regardless
	//   of text direction
	ConstraintAttributeRightValue ConstraintAttribute = 2
	// The top edge of a widget
	ConstraintAttributeTopValue ConstraintAttribute = 3
	// The bottom edge of a widget
	ConstraintAttributeBottomValue ConstraintAttribute = 4
	// The leading edge of a widget, depending
	//   on text direction; equivalent to %GTK_CONSTRAINT_ATTRIBUTE_LEFT for LTR
	//   languages, and %GTK_CONSTRAINT_ATTRIBUTE_RIGHT for RTL ones
	ConstraintAttributeStartValue ConstraintAttribute = 5
	// The trailing edge of a widget, depending
	//   on text direction; equivalent to %GTK_CONSTRAINT_ATTRIBUTE_RIGHT for LTR
	//   languages, and %GTK_CONSTRAINT_ATTRIBUTE_LEFT for RTL ones
	ConstraintAttributeEndValue ConstraintAttribute = 6
	// The width of a widget
	ConstraintAttributeWidthValue ConstraintAttribute = 7
	// The height of a widget
	ConstraintAttributeHeightValue ConstraintAttribute = 8
	// The center of a widget, on the
	//   horizontal axis
	ConstraintAttributeCenterXValue ConstraintAttribute = 9
	// The center of a widget, on the
	//   vertical axis
	ConstraintAttributeCenterYValue ConstraintAttribute = 10
	// The baseline of a widget
	ConstraintAttributeBaselineValue ConstraintAttribute = 11
)

// The relation between two terms of a constraint.
type ConstraintRelation int

var xConstraintRelationGLibType func() types.GType

func ConstraintRelationGLibType() types.GType {
	return xConstraintRelationGLibType()
}

const (

	// Less than, or equal
	ConstraintRelationLeValue ConstraintRelation = -1
	// Equal
	ConstraintRelationEqValue ConstraintRelation = 0
	// Greater than, or equal
	ConstraintRelationGeValue ConstraintRelation = 1
)

// The strength of a constraint, expressed as a symbolic constant.
//
// The strength of a [class@Constraint] can be expressed with any positive
// integer; the values of this enumeration can be used for readability.
type ConstraintStrength int

var xConstraintStrengthGLibType func() types.GType

func ConstraintStrengthGLibType() types.GType {
	return xConstraintStrengthGLibType()
}

const (

	// The constraint is required towards solving the layout
	ConstraintStrengthRequiredValue ConstraintStrength = 1001001000
	// A strong constraint
	ConstraintStrengthStrongValue ConstraintStrength = 1000000000
	// A medium constraint
	ConstraintStrengthMediumValue ConstraintStrength = 1000
	// A weak constraint
	ConstraintStrengthWeakValue ConstraintStrength = 1
)

// Domain for VFL parsing errors.
type ConstraintVflParserError int

var xConstraintVflParserErrorGLibType func() types.GType

func ConstraintVflParserErrorGLibType() types.GType {
	return xConstraintVflParserErrorGLibType()
}

const (

	// Invalid or unknown symbol
	ConstraintVflParserErrorInvalidSymbolValue ConstraintVflParserError = 0
	// Invalid or unknown attribute
	ConstraintVflParserErrorInvalidAttributeValue ConstraintVflParserError = 1
	// Invalid or unknown view
	ConstraintVflParserErrorInvalidViewValue ConstraintVflParserError = 2
	// Invalid or unknown metric
	ConstraintVflParserErrorInvalidMetricValue ConstraintVflParserError = 3
	// Invalid or unknown priority
	ConstraintVflParserErrorInvalidPriorityValue ConstraintVflParserError = 4
	// Invalid or unknown relation
	ConstraintVflParserErrorInvalidRelationValue ConstraintVflParserError = 5
)

// Controls how a content should be made to fit inside an allocation.
type ContentFit int

var xContentFitGLibType func() types.GType

func ContentFitGLibType() types.GType {
	return xContentFitGLibType()
}

const (

	// Make the content fill the entire allocation,
	//   without taking its aspect ratio in consideration. The resulting
	//   content will appear as stretched if its aspect ratio is different
	//   from the allocation aspect ratio.
	ContentFitFillValue ContentFit = 0
	// Scale the content to fit the allocation,
	//   while taking its aspect ratio in consideration. The resulting
	//   content will appear as letterboxed if its aspect ratio is different
	//   from the allocation aspect ratio.
	ContentFitContainValue ContentFit = 1
	// Cover the entire allocation, while taking
	//   the content aspect ratio in consideration. The resulting content
	//   will appear as clipped if its aspect ratio is different from the
	//   allocation aspect ratio.
	ContentFitCoverValue ContentFit = 2
	// The content is scaled down to fit the
	//   allocation, if needed, otherwise its original size is used.
	ContentFitScaleDownValue ContentFit = 3
)

// Passed to various keybinding signals for deleting text.
type DeleteType int

var xDeleteTypeGLibType func() types.GType

func DeleteTypeGLibType() types.GType {
	return xDeleteTypeGLibType()
}

const (

	// Delete characters.
	DeleteCharsValue DeleteType = 0
	// Delete only the portion of the word to the
	//   left/right of cursor if we’re in the middle of a word.
	DeleteWordEndsValue DeleteType = 1
	// Delete words.
	DeleteWordsValue DeleteType = 2
	// Delete display-lines. Display-lines
	//   refers to the visible lines, with respect to the current line
	//   breaks. As opposed to paragraphs, which are defined by line
	//   breaks in the input.
	DeleteDisplayLinesValue DeleteType = 3
	// Delete only the portion of the
	//   display-line to the left/right of cursor.
	DeleteDisplayLineEndsValue DeleteType = 4
	// Delete to the end of the
	//   paragraph. Like C-k in Emacs (or its reverse).
	DeleteParagraphEndsValue DeleteType = 5
	// Delete entire line. Like C-k in pico.
	DeleteParagraphsValue DeleteType = 6
	// Delete only whitespace. Like M-\ in Emacs.
	DeleteWhitespaceValue DeleteType = 7
)

// Focus movement types.
type DirectionType int

var xDirectionTypeGLibType func() types.GType

func DirectionTypeGLibType() types.GType {
	return xDirectionTypeGLibType()
}

const (

	// Move forward.
	DirTabForwardValue DirectionType = 0
	// Move backward.
	DirTabBackwardValue DirectionType = 1
	// Move up.
	DirUpValue DirectionType = 2
	// Move down.
	DirDownValue DirectionType = 3
	// Move left.
	DirLeftValue DirectionType = 4
	// Move right.
	DirRightValue DirectionType = 5
)

// Describes the state of a [struct@Gdk.EventSequence] in a [class@Gesture].
type EventSequenceState int

var xEventSequenceStateGLibType func() types.GType

func EventSequenceStateGLibType() types.GType {
	return xEventSequenceStateGLibType()
}

const (

	// The sequence is handled, but not grabbed.
	EventSequenceNoneValue EventSequenceState = 0
	// The sequence is handled and grabbed.
	EventSequenceClaimedValue EventSequenceState = 1
	// The sequence is denied.
	EventSequenceDeniedValue EventSequenceState = 2
)

// Built-in icon sizes.
//
// Icon sizes default to being inherited. Where they cannot be
// inherited, text size is the default.
//
// All widgets which use `GtkIconSize` set the normal-icons or
// large-icons style classes correspondingly, and let themes
// determine the actual size to be used with the
// `-gtk-icon-size` CSS property.
type IconSize int

var xIconSizeGLibType func() types.GType

func IconSizeGLibType() types.GType {
	return xIconSizeGLibType()
}

const (

	// Keep the size of the parent element
	IconSizeInheritValue IconSize = 0
	// Size similar to text size
	IconSizeNormalValue IconSize = 1
	// Large size, for example in an icon view
	IconSizeLargeValue IconSize = 2
)

// Describes primary purpose of the input widget.
//
// This information is useful for on-screen keyboards and similar input
// methods to decide which keys should be presented to the user.
//
// Note that the purpose is not meant to impose a totally strict rule
// about allowed characters, and does not replace input validation.
// It is fine for an on-screen keyboard to let the user override the
// character set restriction that is expressed by the purpose. The
// application is expected to validate the entry contents, even if
// it specified a purpose.
//
// The difference between %GTK_INPUT_PURPOSE_DIGITS and
// %GTK_INPUT_PURPOSE_NUMBER is that the former accepts only digits
// while the latter also some punctuation (like commas or points, plus,
// minus) and “e” or “E” as in 3.14E+000.
//
// This enumeration may be extended in the future; input methods should
// interpret unknown values as “free form”.
type InputPurpose int

var xInputPurposeGLibType func() types.GType

func InputPurposeGLibType() types.GType {
	return xInputPurposeGLibType()
}

const (

	// Allow any character
	InputPurposeFreeFormValue InputPurpose = 0
	// Allow only alphabetic characters
	InputPurposeAlphaValue InputPurpose = 1
	// Allow only digits
	InputPurposeDigitsValue InputPurpose = 2
	// Edited field expects numbers
	InputPurposeNumberValue InputPurpose = 3
	// Edited field expects phone number
	InputPurposePhoneValue InputPurpose = 4
	// Edited field expects URL
	InputPurposeUrlValue InputPurpose = 5
	// Edited field expects email address
	InputPurposeEmailValue InputPurpose = 6
	// Edited field expects the name of a person
	InputPurposeNameValue InputPurpose = 7
	// Like %GTK_INPUT_PURPOSE_FREE_FORM, but characters are hidden
	InputPurposePasswordValue InputPurpose = 8
	// Like %GTK_INPUT_PURPOSE_DIGITS, but characters are hidden
	InputPurposePinValue InputPurpose = 9
	// Allow any character, in addition to control codes
	InputPurposeTerminalValue InputPurpose = 10
)

// Used for justifying the text inside a [class@Label] widget.
type Justification int

var xJustificationGLibType func() types.GType

func JustificationGLibType() types.GType {
	return xJustificationGLibType()
}

const (

	// The text is placed at the left edge of the label.
	JustifyLeftValue Justification = 0
	// The text is placed at the right edge of the label.
	JustifyRightValue Justification = 1
	// The text is placed in the center of the label.
	JustifyCenterValue Justification = 2
	// The text is placed is distributed across the label.
	JustifyFillValue Justification = 3
)

// Describes how [class@LevelBar] contents should be rendered.
//
// Note that this enumeration could be extended with additional modes
// in the future.
type LevelBarMode int

var xLevelBarModeGLibType func() types.GType

func LevelBarModeGLibType() types.GType {
	return xLevelBarModeGLibType()
}

const (

	// the bar has a continuous mode
	LevelBarModeContinuousValue LevelBarMode = 0
	// the bar has a discrete mode
	LevelBarModeDiscreteValue LevelBarMode = 1
)

// The type of message being displayed in a [class@MessageDialog].
type MessageType int

var xMessageTypeGLibType func() types.GType

func MessageTypeGLibType() types.GType {
	return xMessageTypeGLibType()
}

const (

	// Informational message
	MessageInfoValue MessageType = 0
	// Non-fatal warning message
	MessageWarningValue MessageType = 1
	// Question requiring a choice
	MessageQuestionValue MessageType = 2
	// Fatal error message
	MessageErrorValue MessageType = 3
	// None of the above
	MessageOtherValue MessageType = 4
)

// Passed as argument to various keybinding signals for moving the
// cursor position.
type MovementStep int

var xMovementStepGLibType func() types.GType

func MovementStepGLibType() types.GType {
	return xMovementStepGLibType()
}

const (

	// Move forward or back by graphemes
	MovementLogicalPositionsValue MovementStep = 0
	// Move left or right by graphemes
	MovementVisualPositionsValue MovementStep = 1
	// Move forward or back by words
	MovementWordsValue MovementStep = 2
	// Move up or down lines (wrapped lines)
	MovementDisplayLinesValue MovementStep = 3
	// Move to either end of a line
	MovementDisplayLineEndsValue MovementStep = 4
	// Move up or down paragraphs (newline-ended lines)
	MovementParagraphsValue MovementStep = 5
	// Move to either end of a paragraph
	MovementParagraphEndsValue MovementStep = 6
	// Move by pages
	MovementPagesValue MovementStep = 7
	// Move to ends of the buffer
	MovementBufferEndsValue MovementStep = 8
	// Move horizontally by pages
	MovementHorizontalPagesValue MovementStep = 9
)

// Options for selecting a different wrap mode for natural size
// requests.
//
// See for example the [property@Gtk.Label:natural-wrap-mode] property.
type NaturalWrapMode int

var xNaturalWrapModeGLibType func() types.GType

func NaturalWrapModeGLibType() types.GType {
	return xNaturalWrapModeGLibType()
}

const (

	// Inherit the minimum size request.
	//   In particular, this should be used with %PANGO_WRAP_CHAR.
	NaturalWrapInheritValue NaturalWrapMode = 0
	// Try not to wrap the text. This mode is the
	//   closest to GTK3's behavior but can lead to a wide label leaving
	//   lots of empty space below the text.
	NaturalWrapNoneValue NaturalWrapMode = 1
	// Attempt to wrap at word boundaries. This
	//   is useful in particular when using %PANGO_WRAP_WORD_CHAR as the
	//   wrap mode.
	NaturalWrapWordValue NaturalWrapMode = 2
)

// Used to determine the layout of pages on a sheet when printing
// multiple pages per sheet.
type NumberUpLayout int

var xNumberUpLayoutGLibType func() types.GType

func NumberUpLayoutGLibType() types.GType {
	return xNumberUpLayoutGLibType()
}

const (

	// ![](layout-lrtb.png)
	NumberUpLayoutLeftToRightTopToBottomValue NumberUpLayout = 0
	// ![](layout-lrbt.png)
	NumberUpLayoutLeftToRightBottomToTopValue NumberUpLayout = 1
	// ![](layout-rltb.png)
	NumberUpLayoutRightToLeftTopToBottomValue NumberUpLayout = 2
	// ![](layout-rlbt.png)
	NumberUpLayoutRightToLeftBottomToTopValue NumberUpLayout = 3
	// ![](layout-tblr.png)
	NumberUpLayoutTopToBottomLeftToRightValue NumberUpLayout = 4
	// ![](layout-tbrl.png)
	NumberUpLayoutTopToBottomRightToLeftValue NumberUpLayout = 5
	// ![](layout-btlr.png)
	NumberUpLayoutBottomToTopLeftToRightValue NumberUpLayout = 6
	// ![](layout-btrl.png)
	NumberUpLayoutBottomToTopRightToLeftValue NumberUpLayout = 7
)

// Describes the way two values can be compared.
//
// These values can be used with a [callback@GLib.CompareFunc]. However,
// a `GCompareFunc` is allowed to return any integer values.
// For converting such a value to a `GtkOrdering` value, use
// [func@Gtk.Ordering.from_cmpfunc].
type Ordering int

var xOrderingGLibType func() types.GType

func OrderingGLibType() types.GType {
	return xOrderingGLibType()
}

const (

	// the first value is smaller than the second
	OrderingSmallerValue Ordering = -1
	// the two values are equal
	OrderingEqualValue Ordering = 0
	// the first value is larger than the second
	OrderingLargerValue Ordering = 1
)

// Represents the orientation of widgets and other objects.
//
// Typical examples are [class@Box] or [class@GesturePan].
type Orientation int

var xOrientationGLibType func() types.GType

func OrientationGLibType() types.GType {
	return xOrientationGLibType()
}

const (

	// The element is in horizontal orientation.
	OrientationHorizontalValue Orientation = 0
	// The element is in vertical orientation.
	OrientationVerticalValue Orientation = 1
)

// Defines how content overflowing a given area should be handled.
//
// This is used in [method@Gtk.Widget.set_overflow]. The
// [property@Gtk.Widget:overflow] property is modeled after the
// CSS overflow property, but implements it only partially.
type Overflow int

var xOverflowGLibType func() types.GType

func OverflowGLibType() types.GType {
	return xOverflowGLibType()
}

const (

	// No change is applied. Content is drawn at the specified
	//   position.
	OverflowVisibleValue Overflow = 0
	// Content is clipped to the bounds of the area. Content
	//   outside the area is not drawn and cannot be interacted with.
	OverflowHiddenValue Overflow = 1
)

// Represents the packing location of a children in its parent.
//
// See [class@WindowControls] for example.
type PackType int

var xPackTypeGLibType func() types.GType

func PackTypeGLibType() types.GType {
	return xPackTypeGLibType()
}

const (

	// The child is packed into the start of the widget
	PackStartValue PackType = 0
	// The child is packed into the end of the widget
	PackEndValue PackType = 1
)

// See also gtk_print_settings_set_orientation().
type PageOrientation int

var xPageOrientationGLibType func() types.GType

func PageOrientationGLibType() types.GType {
	return xPageOrientationGLibType()
}

const (

	// Portrait mode.
	PageOrientationPortraitValue PageOrientation = 0
	// Landscape mode.
	PageOrientationLandscapeValue PageOrientation = 1
	// Reverse portrait mode.
	PageOrientationReversePortraitValue PageOrientation = 2
	// Reverse landscape mode.
	PageOrientationReverseLandscapeValue PageOrientation = 3
)

// See also gtk_print_job_set_page_set().
type PageSet int

var xPageSetGLibType func() types.GType

func PageSetGLibType() types.GType {
	return xPageSetGLibType()
}

const (

	// All pages.
	PageSetAllValue PageSet = 0
	// Even pages.
	PageSetEvenValue PageSet = 1
	// Odd pages.
	PageSetOddValue PageSet = 2
)

// Describes the panning direction of a [class@GesturePan].
type PanDirection int

var xPanDirectionGLibType func() types.GType

func PanDirectionGLibType() types.GType {
	return xPanDirectionGLibType()
}

const (

	// panned towards the left
	PanDirectionLeftValue PanDirection = 0
	// panned towards the right
	PanDirectionRightValue PanDirection = 1
	// panned upwards
	PanDirectionUpValue PanDirection = 2
	// panned downwards
	PanDirectionDownValue PanDirection = 3
)

// Describes which edge of a widget a certain feature is positioned at.
//
// For examples, see the tabs of a [class@Notebook], or the label
// of a [class@Scale].
type PositionType int

var xPositionTypeGLibType func() types.GType

func PositionTypeGLibType() types.GType {
	return xPositionTypeGLibType()
}

const (

	// The feature is at the left edge.
	PosLeftValue PositionType = 0
	// The feature is at the right edge.
	PosRightValue PositionType = 1
	// The feature is at the top edge.
	PosTopValue PositionType = 2
	// The feature is at the bottom edge.
	PosBottomValue PositionType = 3
)

// See also gtk_print_settings_set_duplex().
type PrintDuplex int

var xPrintDuplexGLibType func() types.GType

func PrintDuplexGLibType() types.GType {
	return xPrintDuplexGLibType()
}

const (

	// No duplex.
	PrintDuplexSimplexValue PrintDuplex = 0
	// Horizontal duplex.
	PrintDuplexHorizontalValue PrintDuplex = 1
	// Vertical duplex.
	PrintDuplexVerticalValue PrintDuplex = 2
)

// See also gtk_print_job_set_pages()
type PrintPages int

var xPrintPagesGLibType func() types.GType

func PrintPagesGLibType() types.GType {
	return xPrintPagesGLibType()
}

const (

	// All pages.
	PrintPagesAllValue PrintPages = 0
	// Current page.
	PrintPagesCurrentValue PrintPages = 1
	// Range of pages.
	PrintPagesRangesValue PrintPages = 2
	// Selected pages.
	PrintPagesSelectionValue PrintPages = 3
)

// See also gtk_print_settings_set_quality().
type PrintQuality int

var xPrintQualityGLibType func() types.GType

func PrintQualityGLibType() types.GType {
	return xPrintQualityGLibType()
}

const (

	// Low quality.
	PrintQualityLowValue PrintQuality = 0
	// Normal quality.
	PrintQualityNormalValue PrintQuality = 1
	// High quality.
	PrintQualityHighValue PrintQuality = 2
	// Draft quality.
	PrintQualityDraftValue PrintQuality = 3
)

// Describes limits of a [class@EventController] for handling events
// targeting other widgets.
type PropagationLimit int

var xPropagationLimitGLibType func() types.GType

func PropagationLimitGLibType() types.GType {
	return xPropagationLimitGLibType()
}

const (

	// Events are handled regardless of what their
	//   target is.
	LimitNoneValue PropagationLimit = 0
	// Events are only handled if their target
	//   is in the same [iface@Native] as the event controllers widget. Note
	//   that some event types have two targets (origin and destination).
	LimitSameNativeValue PropagationLimit = 1
)

// Describes the stage at which events are fed into a [class@EventController].
type PropagationPhase int

var xPropagationPhaseGLibType func() types.GType

func PropagationPhaseGLibType() types.GType {
	return xPropagationPhaseGLibType()
}

const (

	// Events are not delivered.
	PhaseNoneValue PropagationPhase = 0
	// Events are delivered in the capture phase. The
	//   capture phase happens before the bubble phase, runs from the toplevel down
	//   to the event widget. This option should only be used on containers that
	//   might possibly handle events before their children do.
	PhaseCaptureValue PropagationPhase = 1
	// Events are delivered in the bubble phase. The bubble
	//   phase happens after the capture phase, and before the default handlers
	//   are run. This phase runs from the event widget, up to the toplevel.
	PhaseBubbleValue PropagationPhase = 2
	// Events are delivered in the default widget event handlers,
	//   note that widget implementations must chain up on button, motion, touch and
	//   grab broken handlers for controllers in this phase to be run.
	PhaseTargetValue PropagationPhase = 3
)

// Passed as argument to various keybinding signals.
type ScrollStep int

var xScrollStepGLibType func() types.GType

func ScrollStepGLibType() types.GType {
	return xScrollStepGLibType()
}

const (

	// Scroll in steps.
	ScrollStepsValue ScrollStep = 0
	// Scroll by pages.
	ScrollPagesValue ScrollStep = 1
	// Scroll to ends.
	ScrollEndsValue ScrollStep = 2
	// Scroll in horizontal steps.
	ScrollHorizontalStepsValue ScrollStep = 3
	// Scroll by horizontal pages.
	ScrollHorizontalPagesValue ScrollStep = 4
	// Scroll to the horizontal ends.
	ScrollHorizontalEndsValue ScrollStep = 5
)

// Scrolling types.
type ScrollType int

var xScrollTypeGLibType func() types.GType

func ScrollTypeGLibType() types.GType {
	return xScrollTypeGLibType()
}

const (

	// No scrolling.
	ScrollNoneValue ScrollType = 0
	// Jump to new location.
	ScrollJumpValue ScrollType = 1
	// Step backward.
	ScrollStepBackwardValue ScrollType = 2
	// Step forward.
	ScrollStepForwardValue ScrollType = 3
	// Page backward.
	ScrollPageBackwardValue ScrollType = 4
	// Page forward.
	ScrollPageForwardValue ScrollType = 5
	// Step up.
	ScrollStepUpValue ScrollType = 6
	// Step down.
	ScrollStepDownValue ScrollType = 7
	// Page up.
	ScrollPageUpValue ScrollType = 8
	// Page down.
	ScrollPageDownValue ScrollType = 9
	// Step to the left.
	ScrollStepLeftValue ScrollType = 10
	// Step to the right.
	ScrollStepRightValue ScrollType = 11
	// Page to the left.
	ScrollPageLeftValue ScrollType = 12
	// Page to the right.
	ScrollPageRightValue ScrollType = 13
	// Scroll to start.
	ScrollStartValue ScrollType = 14
	// Scroll to end.
	ScrollEndValue ScrollType = 15
)

// Defines the policy to be used in a scrollable widget when updating
// the scrolled window adjustments in a given orientation.
type ScrollablePolicy int

var xScrollablePolicyGLibType func() types.GType

func ScrollablePolicyGLibType() types.GType {
	return xScrollablePolicyGLibType()
}

const (

	// Scrollable adjustments are based on the minimum size
	ScrollMinimumValue ScrollablePolicy = 0
	// Scrollable adjustments are based on the natural size
	ScrollNaturalValue ScrollablePolicy = 1
)

// Used to control what selections users are allowed to make.
type SelectionMode int

var xSelectionModeGLibType func() types.GType

func SelectionModeGLibType() types.GType {
	return xSelectionModeGLibType()
}

const (

	// No selection is possible.
	SelectionNoneValue SelectionMode = 0
	// Zero or one element may be selected.
	SelectionSingleValue SelectionMode = 1
	// Exactly one element is selected.
	//   In some circumstances, such as initially or during a search
	//   operation, it’s possible for no element to be selected with
	//   %GTK_SELECTION_BROWSE. What is really enforced is that the user
	//   can’t deselect a currently selected element except by selecting
	//   another element.
	SelectionBrowseValue SelectionMode = 2
	// Any number of elements may be selected.
	//   The Ctrl key may be used to enlarge the selection, and Shift
	//   key to select between the focus and the child pointed to.
	//   Some widgets may also allow Click-drag to select a range of elements.
	SelectionMultipleValue SelectionMode = 3
)

// Determines how GTK handles the sensitivity of various controls,
// such as combo box buttons.
type SensitivityType int

var xSensitivityTypeGLibType func() types.GType

func SensitivityTypeGLibType() types.GType {
	return xSensitivityTypeGLibType()
}

const (

	// The control is made insensitive if no
	//   action can be triggered
	SensitivityAutoValue SensitivityType = 0
	// The control is always sensitive
	SensitivityOnValue SensitivityType = 1
	// The control is always insensitive
	SensitivityOffValue SensitivityType = 2
)

// Describes where [class@Shortcut]s added to a
// [class@ShortcutController] get handled.
type ShortcutScope int

var xShortcutScopeGLibType func() types.GType

func ShortcutScopeGLibType() types.GType {
	return xShortcutScopeGLibType()
}

const (

	// Shortcuts are handled inside
	//   the widget the controller belongs to.
	ShortcutScopeLocalValue ShortcutScope = 0
	// Shortcuts are handled by
	//   the first ancestor that is a [iface@ShortcutManager]
	ShortcutScopeManagedValue ShortcutScope = 1
	// Shortcuts are handled by
	//   the root widget.
	ShortcutScopeGlobalValue ShortcutScope = 2
)

// The mode of the size group determines the directions in which the size
// group affects the requested sizes of its component widgets.
type SizeGroupMode int

var xSizeGroupModeGLibType func() types.GType

func SizeGroupModeGLibType() types.GType {
	return xSizeGroupModeGLibType()
}

const (

	// group has no effect
	SizeGroupNoneValue SizeGroupMode = 0
	// group affects horizontal requisition
	SizeGroupHorizontalValue SizeGroupMode = 1
	// group affects vertical requisition
	SizeGroupVerticalValue SizeGroupMode = 2
	// group affects both horizontal and vertical requisition
	SizeGroupBothValue SizeGroupMode = 3
)

// Specifies a preference for height-for-width or
// width-for-height geometry management.
type SizeRequestMode int

var xSizeRequestModeGLibType func() types.GType

func SizeRequestModeGLibType() types.GType {
	return xSizeRequestModeGLibType()
}

const (

	// Prefer height-for-width geometry management
	SizeRequestHeightForWidthValue SizeRequestMode = 0
	// Prefer width-for-height geometry management
	SizeRequestWidthForHeightValue SizeRequestMode = 1
	// Don’t trade height-for-width or width-for-height
	SizeRequestConstantSizeValue SizeRequestMode = 2
)

// Determines the direction of a sort.
type SortType int

var xSortTypeGLibType func() types.GType

func SortTypeGLibType() types.GType {
	return xSortTypeGLibType()
}

const (

	// Sorting is in ascending order.
	SortAscendingValue SortType = 0
	// Sorting is in descending order.
	SortDescendingValue SortType = 1
)

// The indexes of colors passed to symbolic color rendering, such as
// [vfunc@Gtk.SymbolicPaintable.snapshot_symbolic].
//
// More values may be added over time.
type SymbolicColor int

var xSymbolicColorGLibType func() types.GType

func SymbolicColorGLibType() types.GType {
	return xSymbolicColorGLibType()
}

const (

	// The default foreground color
	SymbolicColorForegroundValue SymbolicColor = 0
	// Indication color for errors
	SymbolicColorErrorValue SymbolicColor = 1
	// Indication color for warnings
	SymbolicColorWarningValue SymbolicColor = 2
	// Indication color for success
	SymbolicColorSuccessValue SymbolicColor = 3
)

// Values that can be passed to the [vfunc@Gtk.Widget.system_setting_changed]
// vfunc.
//
// The values indicate which system setting has changed.
// Widgets may need to drop caches, or react otherwise.
//
// Most of the values correspond to [class@Settings] properties.
//
// More values may be added over time.
type SystemSetting int

var xSystemSettingGLibType func() types.GType

func SystemSettingGLibType() types.GType {
	return xSystemSettingGLibType()
}

const (

	// the [property@Gtk.Settings:gtk-xft-dpi] setting has changed
	SystemSettingDpiValue SystemSetting = 0
	// The [property@Gtk.Settings:gtk-font-name] setting has changed
	SystemSettingFontNameValue SystemSetting = 1
	// The font configuration has changed in a way that
	//   requires text to be redrawn. This can be any of the
	//   [property@Gtk.Settings:gtk-xft-antialias],
	//   [property@Gtk.Settings:gtk-xft-hinting],
	//   [property@Gtk.Settings:gtk-xft-hintstyle],
	//   [property@Gtk.Settings:gtk-xft-rgba] or
	//   [property@Gtk.Settings:gtk-fontconfig-timestamp] settings
	SystemSettingFontConfigValue SystemSetting = 2
	// The display has changed
	SystemSettingDisplayValue SystemSetting = 3
	// The icon theme has changed in a way that requires
	//   icons to be looked up again
	SystemSettingIconThemeValue SystemSetting = 4
)

// Reading directions for text.
type TextDirection int

var xTextDirectionGLibType func() types.GType

func TextDirectionGLibType() types.GType {
	return xTextDirectionGLibType()
}

const (

	// No direction.
	TextDirNoneValue TextDirection = 0
	// Left to right text direction.
	TextDirLtrValue TextDirection = 1
	// Right to left text direction.
	TextDirRtlValue TextDirection = 2
)

// Used to indicate which grid lines to draw in a tree view.
type TreeViewGridLines int

var xTreeViewGridLinesGLibType func() types.GType

func TreeViewGridLinesGLibType() types.GType {
	return xTreeViewGridLinesGLibType()
}

const (

	// No grid lines.
	TreeViewGridLinesNoneValue TreeViewGridLines = 0
	// Horizontal grid lines.
	TreeViewGridLinesHorizontalValue TreeViewGridLines = 1
	// Vertical grid lines.
	TreeViewGridLinesVerticalValue TreeViewGridLines = 2
	// Horizontal and vertical grid lines.
	TreeViewGridLinesBothValue TreeViewGridLines = 3
)

// See also gtk_print_settings_set_paper_width().
type Unit int

var xUnitGLibType func() types.GType

func UnitGLibType() types.GType {
	return xUnitGLibType()
}

const (

	// No units.
	UnitNoneValue Unit = 0
	// Dimensions in points.
	UnitPointsValue Unit = 1
	// Dimensions in inches.
	UnitInchValue Unit = 2
	// Dimensions in millimeters
	UnitMmValue Unit = 3
)

// Describes a type of line wrapping.
type WrapMode int

var xWrapModeGLibType func() types.GType

func WrapModeGLibType() types.GType {
	return xWrapModeGLibType()
}

const (

	// do not wrap lines; just make the text area wider
	WrapNoneValue WrapMode = 0
	// wrap text, breaking lines anywhere the cursor can
	//   appear (between characters, usually - if you want to be technical,
	//   between graphemes, see pango_get_log_attrs())
	WrapCharValue WrapMode = 1
	// wrap text, breaking lines in between words
	WrapWordValue WrapMode = 2
	// wrap text, breaking lines in between words, or if
	//   that is not enough, also between graphemes
	WrapWordCharValue WrapMode = 3
)

var xOrderingFromCmpfunc func(int) Ordering

// Converts the result of a `GCompareFunc` like strcmp() to a
// `GtkOrdering` value.
func OrderingFromCmpfunc(CmpfuncResultVar int) Ordering {

	cret := xOrderingFromCmpfunc(CmpfuncResultVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xInputHintsGLibType, lib, "gtk_input_hints_get_type")

	core.PuregoSafeRegister(&xPickFlagsGLibType, lib, "gtk_pick_flags_get_type")

	core.PuregoSafeRegister(&xStateFlagsGLibType, lib, "gtk_state_flags_get_type")

	core.PuregoSafeRegister(&xAccessibleAutocompleteGLibType, lib, "gtk_accessible_autocomplete_get_type")

	core.PuregoSafeRegister(&xAccessibleInvalidStateGLibType, lib, "gtk_accessible_invalid_state_get_type")

	core.PuregoSafeRegister(&xAccessiblePropertyGLibType, lib, "gtk_accessible_property_get_type")

	core.PuregoSafeRegister(&xAccessibleRelationGLibType, lib, "gtk_accessible_relation_get_type")

	core.PuregoSafeRegister(&xAccessibleRoleGLibType, lib, "gtk_accessible_role_get_type")

	core.PuregoSafeRegister(&xAccessibleSortGLibType, lib, "gtk_accessible_sort_get_type")

	core.PuregoSafeRegister(&xAccessibleStateGLibType, lib, "gtk_accessible_state_get_type")

	core.PuregoSafeRegister(&xAccessibleTristateGLibType, lib, "gtk_accessible_tristate_get_type")

	core.PuregoSafeRegister(&xAlignGLibType, lib, "gtk_align_get_type")

	core.PuregoSafeRegister(&xArrowTypeGLibType, lib, "gtk_arrow_type_get_type")

	core.PuregoSafeRegister(&xBaselinePositionGLibType, lib, "gtk_baseline_position_get_type")

	core.PuregoSafeRegister(&xBorderStyleGLibType, lib, "gtk_border_style_get_type")

	core.PuregoSafeRegister(&xConstraintAttributeGLibType, lib, "gtk_constraint_attribute_get_type")

	core.PuregoSafeRegister(&xConstraintRelationGLibType, lib, "gtk_constraint_relation_get_type")

	core.PuregoSafeRegister(&xConstraintStrengthGLibType, lib, "gtk_constraint_strength_get_type")

	core.PuregoSafeRegister(&xConstraintVflParserErrorGLibType, lib, "gtk_constraint_vfl_parser_error_get_type")

	core.PuregoSafeRegister(&xContentFitGLibType, lib, "gtk_content_fit_get_type")

	core.PuregoSafeRegister(&xDeleteTypeGLibType, lib, "gtk_delete_type_get_type")

	core.PuregoSafeRegister(&xDirectionTypeGLibType, lib, "gtk_direction_type_get_type")

	core.PuregoSafeRegister(&xEventSequenceStateGLibType, lib, "gtk_event_sequence_state_get_type")

	core.PuregoSafeRegister(&xIconSizeGLibType, lib, "gtk_icon_size_get_type")

	core.PuregoSafeRegister(&xInputPurposeGLibType, lib, "gtk_input_purpose_get_type")

	core.PuregoSafeRegister(&xJustificationGLibType, lib, "gtk_justification_get_type")

	core.PuregoSafeRegister(&xLevelBarModeGLibType, lib, "gtk_level_bar_mode_get_type")

	core.PuregoSafeRegister(&xMessageTypeGLibType, lib, "gtk_message_type_get_type")

	core.PuregoSafeRegister(&xMovementStepGLibType, lib, "gtk_movement_step_get_type")

	core.PuregoSafeRegister(&xNaturalWrapModeGLibType, lib, "gtk_natural_wrap_mode_get_type")

	core.PuregoSafeRegister(&xNumberUpLayoutGLibType, lib, "gtk_number_up_layout_get_type")

	core.PuregoSafeRegister(&xOrderingGLibType, lib, "gtk_ordering_get_type")

	core.PuregoSafeRegister(&xOrientationGLibType, lib, "gtk_orientation_get_type")

	core.PuregoSafeRegister(&xOverflowGLibType, lib, "gtk_overflow_get_type")

	core.PuregoSafeRegister(&xPackTypeGLibType, lib, "gtk_pack_type_get_type")

	core.PuregoSafeRegister(&xPageOrientationGLibType, lib, "gtk_page_orientation_get_type")

	core.PuregoSafeRegister(&xPageSetGLibType, lib, "gtk_page_set_get_type")

	core.PuregoSafeRegister(&xPanDirectionGLibType, lib, "gtk_pan_direction_get_type")

	core.PuregoSafeRegister(&xPositionTypeGLibType, lib, "gtk_position_type_get_type")

	core.PuregoSafeRegister(&xPrintDuplexGLibType, lib, "gtk_print_duplex_get_type")

	core.PuregoSafeRegister(&xPrintPagesGLibType, lib, "gtk_print_pages_get_type")

	core.PuregoSafeRegister(&xPrintQualityGLibType, lib, "gtk_print_quality_get_type")

	core.PuregoSafeRegister(&xPropagationLimitGLibType, lib, "gtk_propagation_limit_get_type")

	core.PuregoSafeRegister(&xPropagationPhaseGLibType, lib, "gtk_propagation_phase_get_type")

	core.PuregoSafeRegister(&xScrollStepGLibType, lib, "gtk_scroll_step_get_type")

	core.PuregoSafeRegister(&xScrollTypeGLibType, lib, "gtk_scroll_type_get_type")

	core.PuregoSafeRegister(&xScrollablePolicyGLibType, lib, "gtk_scrollable_policy_get_type")

	core.PuregoSafeRegister(&xSelectionModeGLibType, lib, "gtk_selection_mode_get_type")

	core.PuregoSafeRegister(&xSensitivityTypeGLibType, lib, "gtk_sensitivity_type_get_type")

	core.PuregoSafeRegister(&xShortcutScopeGLibType, lib, "gtk_shortcut_scope_get_type")

	core.PuregoSafeRegister(&xSizeGroupModeGLibType, lib, "gtk_size_group_mode_get_type")

	core.PuregoSafeRegister(&xSizeRequestModeGLibType, lib, "gtk_size_request_mode_get_type")

	core.PuregoSafeRegister(&xSortTypeGLibType, lib, "gtk_sort_type_get_type")

	core.PuregoSafeRegister(&xSymbolicColorGLibType, lib, "gtk_symbolic_color_get_type")

	core.PuregoSafeRegister(&xSystemSettingGLibType, lib, "gtk_system_setting_get_type")

	core.PuregoSafeRegister(&xTextDirectionGLibType, lib, "gtk_text_direction_get_type")

	core.PuregoSafeRegister(&xTreeViewGridLinesGLibType, lib, "gtk_tree_view_grid_lines_get_type")

	core.PuregoSafeRegister(&xUnitGLibType, lib, "gtk_unit_get_type")

	core.PuregoSafeRegister(&xWrapModeGLibType, lib, "gtk_wrap_mode_get_type")

	core.PuregoSafeRegister(&xOrderingFromCmpfunc, lib, "gtk_ordering_from_cmpfunc")

}
