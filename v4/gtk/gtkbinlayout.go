// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type BinLayoutClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *BinLayoutClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkBinLayout` is a `GtkLayoutManager` subclass useful for create "bins" of
// widgets.
//
// `GtkBinLayout` will stack each child of a widget on top of each other,
// using the [property@Gtk.Widget:hexpand], [property@Gtk.Widget:vexpand],
// [property@Gtk.Widget:halign], and [property@Gtk.Widget:valign] properties
// of each child to determine where they should be positioned.
type BinLayout struct {
	LayoutManager
}

var xBinLayoutGLibType func() types.GType

func BinLayoutGLibType() types.GType {
	return xBinLayoutGLibType()
}

func BinLayoutNewFromInternalPtr(ptr uintptr) *BinLayout {
	cls := &BinLayout{}
	cls.Ptr = ptr
	return cls
}

var xNewBinLayout func() uintptr

// Creates a new `GtkBinLayout` instance.
func NewBinLayout() *BinLayout {
	var cls *BinLayout

	cret := xNewBinLayout()

	if cret == 0 {
		return nil
	}
	cls = &BinLayout{}
	cls.Ptr = cret
	return cls
}

func (c *BinLayout) GoPointer() uintptr {
	return c.Ptr
}

func (c *BinLayout) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xBinLayoutGLibType, lib, "gtk_bin_layout_get_type")

	core.PuregoSafeRegister(&xNewBinLayout, lib, "gtk_bin_layout_new")

}
