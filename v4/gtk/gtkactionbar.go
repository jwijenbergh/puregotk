// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// `GtkActionBar` is designed to present contextual actions.
//
// ![An example GtkActionBar](action-bar.png)
//
// It is expected to be displayed below the content and expand
// horizontally to fill the area.
//
// It allows placing children at the start or the end. In addition, it
// contains an internal centered box which is centered with respect to
// the full width of the box, even if the children at either side take
// up different amounts of space.
//
// # GtkActionBar as GtkBuildable
//
// The `GtkActionBar` implementation of the `GtkBuildable` interface supports
// adding children at the start or end sides by specifying “start” or “end” as
// the “type” attribute of a `&lt;child&gt;` element, or setting the center widget
// by specifying “center” value.
//
// # CSS nodes
//
// ```
// actionbar
// ╰── revealer
//
//	╰── box
//	    ├── box.start
//	    │   ╰── [start children]
//	    ├── [center widget]
//	    ╰── box.end
//	        ╰── [end children]
//
// ```
//
// A `GtkActionBar`'s CSS node is called `actionbar`. It contains a `revealer`
// subnode, which contains a `box` subnode, which contains two `box` subnodes at
// the start and end of the action bar, with `start` and `end style classes
// respectively, as well as a center node that represents the center child.
//
// Each of the boxes contains children packed for that side.
type ActionBar struct {
	Widget
}

var xActionBarGLibType func() types.GType

func ActionBarGLibType() types.GType {
	return xActionBarGLibType()
}

func ActionBarNewFromInternalPtr(ptr uintptr) *ActionBar {
	cls := &ActionBar{}
	cls.Ptr = ptr
	return cls
}

var xNewActionBar func() uintptr

// Creates a new `GtkActionBar` widget.
func NewActionBar() *ActionBar {
	var cls *ActionBar

	cret := xNewActionBar()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ActionBar{}
	cls.Ptr = cret
	return cls
}

var xActionBarGetCenterWidget func(uintptr) uintptr

// Retrieves the center bar widget of the bar.
func (x *ActionBar) GetCenterWidget() *Widget {
	var cls *Widget

	cret := xActionBarGetCenterWidget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xActionBarGetRevealed func(uintptr) bool

// Gets whether the contents of the action bar are revealed.
func (x *ActionBar) GetRevealed() bool {

	cret := xActionBarGetRevealed(x.GoPointer())
	return cret
}

var xActionBarPackEnd func(uintptr, uintptr)

// Adds @child to @action_bar, packed with reference to the
// end of the @action_bar.
func (x *ActionBar) PackEnd(ChildVar *Widget) {

	xActionBarPackEnd(x.GoPointer(), ChildVar.GoPointer())

}

var xActionBarPackStart func(uintptr, uintptr)

// Adds @child to @action_bar, packed with reference to the
// start of the @action_bar.
func (x *ActionBar) PackStart(ChildVar *Widget) {

	xActionBarPackStart(x.GoPointer(), ChildVar.GoPointer())

}

var xActionBarRemove func(uintptr, uintptr)

// Removes a child from @action_bar.
func (x *ActionBar) Remove(ChildVar *Widget) {

	xActionBarRemove(x.GoPointer(), ChildVar.GoPointer())

}

var xActionBarSetCenterWidget func(uintptr, uintptr)

// Sets the center widget for the `GtkActionBar`.
func (x *ActionBar) SetCenterWidget(CenterWidgetVar *Widget) {

	xActionBarSetCenterWidget(x.GoPointer(), CenterWidgetVar.GoPointer())

}

var xActionBarSetRevealed func(uintptr, bool)

// Reveals or conceals the content of the action bar.
//
// Note: this does not show or hide @action_bar in the
// [property@Gtk.Widget:visible] sense, so revealing has
// no effect if the action bar is hidden.
func (x *ActionBar) SetRevealed(RevealedVar bool) {

	xActionBarSetRevealed(x.GoPointer(), RevealedVar)

}

func (c *ActionBar) GoPointer() uintptr {
	return c.Ptr
}

func (c *ActionBar) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *ActionBar) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *ActionBar) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *ActionBar) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *ActionBar) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *ActionBar) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ActionBar) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *ActionBar) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ActionBar) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *ActionBar) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ActionBar) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *ActionBar) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xActionBarGLibType, lib, "gtk_action_bar_get_type")

	core.PuregoSafeRegister(&xNewActionBar, lib, "gtk_action_bar_new")

	core.PuregoSafeRegister(&xActionBarGetCenterWidget, lib, "gtk_action_bar_get_center_widget")
	core.PuregoSafeRegister(&xActionBarGetRevealed, lib, "gtk_action_bar_get_revealed")
	core.PuregoSafeRegister(&xActionBarPackEnd, lib, "gtk_action_bar_pack_end")
	core.PuregoSafeRegister(&xActionBarPackStart, lib, "gtk_action_bar_pack_start")
	core.PuregoSafeRegister(&xActionBarRemove, lib, "gtk_action_bar_remove")
	core.PuregoSafeRegister(&xActionBarSetCenterWidget, lib, "gtk_action_bar_set_center_widget")
	core.PuregoSafeRegister(&xActionBarSetRevealed, lib, "gtk_action_bar_set_revealed")

}
