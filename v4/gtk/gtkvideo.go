// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type VideoClass struct {
	ParentClass uintptr
}

func (x *VideoClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkVideo` is a widget to show a `GtkMediaStream` with media controls.
//
// ![An example GtkVideo](video.png)
//
// The controls are available separately as [class@Gtk.MediaControls].
// If you just want to display a video without controls, you can treat it
// like any other paintable and for example put it into a [class@Gtk.Picture].
//
// `GtkVideo` aims to cover use cases such as previews, embedded animations,
// etc. It supports autoplay, looping, and simple media controls. It does
// not have support for video overlays, multichannel audio, device
// selection, or input. If you are writing a full-fledged video player,
// you may want to use the [iface@Gdk.Paintable] API and a media framework
// such as Gstreamer directly.
type Video struct {
	Widget
}

func VideoNewFromInternalPtr(ptr uintptr) *Video {
	cls := &Video{}
	cls.Ptr = ptr
	return cls
}

var xNewVideo func() uintptr

// Creates a new empty `GtkVideo`.
func NewVideo() *Video {
	var cls *Video

	cret := xNewVideo()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Video{}
	cls.Ptr = cret
	return cls
}

var xNewVideoForFile func(uintptr) uintptr

// Creates a `GtkVideo` to play back the given @file.
func NewVideoForFile(FileVar gio.File) *Video {
	var cls *Video

	cret := xNewVideoForFile(FileVar.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Video{}
	cls.Ptr = cret
	return cls
}

var xNewVideoForFilename func(string) uintptr

// Creates a `GtkVideo` to play back the given @filename.
//
// This is a utility function that calls [ctor@Gtk.Video.new_for_file],
// See that function for details.
func NewVideoForFilename(FilenameVar string) *Video {
	var cls *Video

	cret := xNewVideoForFilename(FilenameVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Video{}
	cls.Ptr = cret
	return cls
}

var xNewVideoForMediaStream func(uintptr) uintptr

// Creates a `GtkVideo` to play back the given @stream.
func NewVideoForMediaStream(StreamVar *MediaStream) *Video {
	var cls *Video

	cret := xNewVideoForMediaStream(StreamVar.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Video{}
	cls.Ptr = cret
	return cls
}

var xNewVideoForResource func(string) uintptr

// Creates a `GtkVideo` to play back the resource at the
// given @resource_path.
//
// This is a utility function that calls [ctor@Gtk.Video.new_for_file].
func NewVideoForResource(ResourcePathVar string) *Video {
	var cls *Video

	cret := xNewVideoForResource(ResourcePathVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Video{}
	cls.Ptr = cret
	return cls
}

var xVideoGetAutoplay func(uintptr) bool

// Returns %TRUE if videos have been set to loop.
func (x *Video) GetAutoplay() bool {

	cret := xVideoGetAutoplay(x.GoPointer())
	return cret
}

var xVideoGetFile func(uintptr) uintptr

// Gets the file played by @self or %NULL if not playing back
// a file.
func (x *Video) GetFile() *gio.FileBase {
	var cls *gio.FileBase

	cret := xVideoGetFile(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gio.FileBase{}
	cls.Ptr = cret
	return cls
}

var xVideoGetLoop func(uintptr) bool

// Returns %TRUE if videos have been set to loop.
func (x *Video) GetLoop() bool {

	cret := xVideoGetLoop(x.GoPointer())
	return cret
}

var xVideoGetMediaStream func(uintptr) uintptr

// Gets the media stream managed by @self or %NULL if none.
func (x *Video) GetMediaStream() *MediaStream {
	var cls *MediaStream

	cret := xVideoGetMediaStream(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &MediaStream{}
	cls.Ptr = cret
	return cls
}

var xVideoSetAutoplay func(uintptr, bool)

// Sets whether @self automatically starts playback when it
// becomes visible or when a new file gets loaded.
func (x *Video) SetAutoplay(AutoplayVar bool) {

	xVideoSetAutoplay(x.GoPointer(), AutoplayVar)

}

var xVideoSetFile func(uintptr, uintptr)

// Makes @self play the given @file.
func (x *Video) SetFile(FileVar gio.File) {

	xVideoSetFile(x.GoPointer(), FileVar.GoPointer())

}

var xVideoSetFilename func(uintptr, string)

// Makes @self play the given @filename.
//
// This is a utility function that calls gtk_video_set_file(),
func (x *Video) SetFilename(FilenameVar string) {

	xVideoSetFilename(x.GoPointer(), FilenameVar)

}

var xVideoSetLoop func(uintptr, bool)

// Sets whether new files loaded by @self should be set to loop.
func (x *Video) SetLoop(LoopVar bool) {

	xVideoSetLoop(x.GoPointer(), LoopVar)

}

var xVideoSetMediaStream func(uintptr, uintptr)

// Sets the media stream to be played back.
//
// @self will take full control of managing the media stream. If you
// want to manage a media stream yourself, consider using a
// [class@Gtk.Picture] for display.
//
// If you want to display a file, consider using [method@Gtk.Video.set_file]
// instead.
func (x *Video) SetMediaStream(StreamVar *MediaStream) {

	xVideoSetMediaStream(x.GoPointer(), StreamVar.GoPointer())

}

var xVideoSetResource func(uintptr, string)

// Makes @self play the resource at the given @resource_path.
//
// This is a utility function that calls [method@Gtk.Video.set_file].
func (x *Video) SetResource(ResourcePathVar string) {

	xVideoSetResource(x.GoPointer(), ResourcePathVar)

}

func (c *Video) GoPointer() uintptr {
	return c.Ptr
}

func (c *Video) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *Video) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *Video) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *Video) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *Video) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *Video) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Video) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *Video) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Video) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *Video) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Video) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *Video) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewVideo, lib, "gtk_video_new")
	core.PuregoSafeRegister(&xNewVideoForFile, lib, "gtk_video_new_for_file")
	core.PuregoSafeRegister(&xNewVideoForFilename, lib, "gtk_video_new_for_filename")
	core.PuregoSafeRegister(&xNewVideoForMediaStream, lib, "gtk_video_new_for_media_stream")
	core.PuregoSafeRegister(&xNewVideoForResource, lib, "gtk_video_new_for_resource")

	core.PuregoSafeRegister(&xVideoGetAutoplay, lib, "gtk_video_get_autoplay")
	core.PuregoSafeRegister(&xVideoGetFile, lib, "gtk_video_get_file")
	core.PuregoSafeRegister(&xVideoGetLoop, lib, "gtk_video_get_loop")
	core.PuregoSafeRegister(&xVideoGetMediaStream, lib, "gtk_video_get_media_stream")
	core.PuregoSafeRegister(&xVideoSetAutoplay, lib, "gtk_video_set_autoplay")
	core.PuregoSafeRegister(&xVideoSetFile, lib, "gtk_video_set_file")
	core.PuregoSafeRegister(&xVideoSetFilename, lib, "gtk_video_set_filename")
	core.PuregoSafeRegister(&xVideoSetLoop, lib, "gtk_video_set_loop")
	core.PuregoSafeRegister(&xVideoSetMediaStream, lib, "gtk_video_set_media_stream")
	core.PuregoSafeRegister(&xVideoSetResource, lib, "gtk_video_set_resource")

}
