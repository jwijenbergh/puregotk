// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type FrameClass struct {
	_ structs.HostLayout

	ParentClass uintptr

	Padding [8]uintptr
}

func (x *FrameClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkFrame` is a widget that surrounds its child with a decorative
// frame and an optional label.
//
// ![An example GtkFrame](frame.png)
//
// If present, the label is drawn inside the top edge of the frame.
// The horizontal position of the label can be controlled with
// [method@Gtk.Frame.set_label_align].
//
// `GtkFrame` clips its child. You can use this to add rounded corners
// to widgets, but be aware that it also cuts off shadows.
//
// # GtkFrame as GtkBuildable
//
// The `GtkFrame` implementation of the `GtkBuildable` interface supports
// placing a child in the label position by specifying “label” as the
// “type” attribute of a &lt;child&gt; element. A normal content child can
// be specified without specifying a &lt;child&gt; type attribute.
//
// An example of a UI definition fragment with GtkFrame:
// ```xml
// &lt;object class="GtkFrame"&gt;
//
//	&lt;child type="label"&gt;
//	  &lt;object class="GtkLabel" id="frame_label"/&gt;
//	&lt;/child&gt;
//	&lt;child&gt;
//	  &lt;object class="GtkEntry" id="frame_content"/&gt;
//	&lt;/child&gt;
//
// &lt;/object&gt;
// ```
//
// # CSS nodes
//
// ```
// frame
// ├── &lt;label widget&gt;
// ╰── &lt;child&gt;
// ```
//
// `GtkFrame` has a main CSS node with name “frame”, which is used to draw the
// visible border. You can set the appearance of the border using CSS properties
// like “border-style” on this node.
type Frame struct {
	Widget
}

var xFrameGLibType func() types.GType

func FrameGLibType() types.GType {
	return xFrameGLibType()
}

func FrameNewFromInternalPtr(ptr uintptr) *Frame {
	cls := &Frame{}
	cls.Ptr = ptr
	return cls
}

var xNewFrame func(string) uintptr

// Creates a new `GtkFrame`, with optional label @label.
//
// If @label is %NULL, the label is omitted.
func NewFrame(LabelVar string) *Frame {
	var cls *Frame

	cret := xNewFrame(LabelVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Frame{}
	cls.Ptr = cret
	return cls
}

var xFrameGetChild func(uintptr) uintptr

// Gets the child widget of @frame.
func (x *Frame) GetChild() *Widget {
	var cls *Widget

	cret := xFrameGetChild(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xFrameGetLabel func(uintptr) string

// Returns the frame labels text.
//
// If the frame's label widget is not a `GtkLabel`, %NULL
// is returned.
func (x *Frame) GetLabel() string {

	cret := xFrameGetLabel(x.GoPointer())
	return cret
}

var xFrameGetLabelAlign func(uintptr) float32

// Retrieves the X alignment of the frame’s label.
func (x *Frame) GetLabelAlign() float32 {

	cret := xFrameGetLabelAlign(x.GoPointer())
	return cret
}

var xFrameGetLabelWidget func(uintptr) uintptr

// Retrieves the label widget for the frame.
func (x *Frame) GetLabelWidget() *Widget {
	var cls *Widget

	cret := xFrameGetLabelWidget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xFrameSetChild func(uintptr, uintptr)

// Sets the child widget of @frame.
func (x *Frame) SetChild(ChildVar *Widget) {

	xFrameSetChild(x.GoPointer(), ChildVar.GoPointer())

}

var xFrameSetLabel func(uintptr, string)

// Creates a new `GtkLabel` with the @label and sets it as the frame's
// label widget.
func (x *Frame) SetLabel(LabelVar string) {

	xFrameSetLabel(x.GoPointer(), LabelVar)

}

var xFrameSetLabelAlign func(uintptr, float32)

// Sets the X alignment of the frame widget’s label.
//
// The default value for a newly created frame is 0.0.
func (x *Frame) SetLabelAlign(XalignVar float32) {

	xFrameSetLabelAlign(x.GoPointer(), XalignVar)

}

var xFrameSetLabelWidget func(uintptr, uintptr)

// Sets the label widget for the frame.
//
// This is the widget that will appear embedded in the top edge
// of the frame as a title.
func (x *Frame) SetLabelWidget(LabelWidgetVar *Widget) {

	xFrameSetLabelWidget(x.GoPointer(), LabelWidgetVar.GoPointer())

}

func (c *Frame) GoPointer() uintptr {
	return c.Ptr
}

func (c *Frame) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *Frame) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *Frame) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *Frame) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *Frame) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *Frame) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Frame) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *Frame) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Frame) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *Frame) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Frame) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *Frame) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xFrameGLibType, lib, "gtk_frame_get_type")

	core.PuregoSafeRegister(&xNewFrame, lib, "gtk_frame_new")

	core.PuregoSafeRegister(&xFrameGetChild, lib, "gtk_frame_get_child")
	core.PuregoSafeRegister(&xFrameGetLabel, lib, "gtk_frame_get_label")
	core.PuregoSafeRegister(&xFrameGetLabelAlign, lib, "gtk_frame_get_label_align")
	core.PuregoSafeRegister(&xFrameGetLabelWidget, lib, "gtk_frame_get_label_widget")
	core.PuregoSafeRegister(&xFrameSetChild, lib, "gtk_frame_set_child")
	core.PuregoSafeRegister(&xFrameSetLabel, lib, "gtk_frame_set_label")
	core.PuregoSafeRegister(&xFrameSetLabelAlign, lib, "gtk_frame_set_label_align")
	core.PuregoSafeRegister(&xFrameSetLabelWidget, lib, "gtk_frame_set_label_widget")

}
