// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// `GtkHeaderBar` is a widget for creating custom title bars for windows.
//
// ![An example GtkHeaderBar](headerbar.png)
//
// `GtkHeaderBar` is similar to a horizontal `GtkCenterBox`. It allows
// children to be placed at the start or the end. In addition, it allows
// the window title to be displayed. The title will be centered with respect
// to the width of the box, even if the children at either side take up
// different amounts of space.
//
// `GtkHeaderBar` can add typical window frame controls, such as minimize,
// maximize and close buttons, or the window icon.
//
// For these reasons, `GtkHeaderBar` is the natural choice for use as the
// custom titlebar widget of a `GtkWindow` (see [method@Gtk.Window.set_titlebar]),
// as it gives features typical of titlebars while allowing the addition of
// child widgets.
//
// ## GtkHeaderBar as GtkBuildable
//
// The `GtkHeaderBar` implementation of the `GtkBuildable` interface supports
// adding children at the start or end sides by specifying “start” or “end” as
// the “type” attribute of a &lt;child&gt; element, or setting the title widget by
// specifying “title” value.
//
// By default the `GtkHeaderBar` uses a `GtkLabel` displaying the title of the
// window it is contained in as the title widget, equivalent to the following
// UI definition:
//
// ```xml
// &lt;object class="GtkHeaderBar"&gt;
//
//	&lt;property name="title-widget"&gt;
//	  &lt;object class="GtkLabel"&gt;
//	    &lt;property name="label" translatable="yes"&gt;Label&lt;/property&gt;
//	    &lt;property name="single-line-mode"&gt;True&lt;/property&gt;
//	    &lt;property name="ellipsize"&gt;end&lt;/property&gt;
//	    &lt;property name="width-chars"&gt;5&lt;/property&gt;
//	    &lt;style&gt;
//	      &lt;class name="title"/&gt;
//	    &lt;/style&gt;
//	  &lt;/object&gt;
//	&lt;/property&gt;
//
// &lt;/object&gt;
// ```
//
// # CSS nodes
//
// ```
// headerbar
// ╰── windowhandle
//
//	╰── box
//	    ├── box.start
//	    │   ├── windowcontrols.start
//	    │   ╰── [other children]
//	    ├── [Title Widget]
//	    ╰── box.end
//	        ├── [other children]
//	        ╰── windowcontrols.end
//
// ```
//
// A `GtkHeaderBar`'s CSS node is called `headerbar`. It contains a `windowhandle`
// subnode, which contains a `box` subnode, which contains two `box` subnodes at
// the start and end of the header bar, as well as a center node that represents
// the title.
//
// Each of the boxes contains a `windowcontrols` subnode, see
// [class@Gtk.WindowControls] for details, as well as other children.
//
// # Accessibility
//
// `GtkHeaderBar` uses the %GTK_ACCESSIBLE_ROLE_GROUP role.
type HeaderBar struct {
	Widget
}

var xHeaderBarGLibType func() types.GType

func HeaderBarGLibType() types.GType {
	return xHeaderBarGLibType()
}

func HeaderBarNewFromInternalPtr(ptr uintptr) *HeaderBar {
	cls := &HeaderBar{}
	cls.Ptr = ptr
	return cls
}

var xNewHeaderBar func() uintptr

// Creates a new `GtkHeaderBar` widget.
func NewHeaderBar() *HeaderBar {
	var cls *HeaderBar

	cret := xNewHeaderBar()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &HeaderBar{}
	cls.Ptr = cret
	return cls
}

var xHeaderBarGetDecorationLayout func(uintptr) string

// Gets the decoration layout of the `GtkHeaderBar`.
func (x *HeaderBar) GetDecorationLayout() string {

	cret := xHeaderBarGetDecorationLayout(x.GoPointer())
	return cret
}

var xHeaderBarGetShowTitleButtons func(uintptr) bool

// Returns whether this header bar shows the standard window
// title buttons.
func (x *HeaderBar) GetShowTitleButtons() bool {

	cret := xHeaderBarGetShowTitleButtons(x.GoPointer())
	return cret
}

var xHeaderBarGetTitleWidget func(uintptr) uintptr

// Retrieves the title widget of the header.
//
// See [method@Gtk.HeaderBar.set_title_widget].
func (x *HeaderBar) GetTitleWidget() *Widget {
	var cls *Widget

	cret := xHeaderBarGetTitleWidget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xHeaderBarPackEnd func(uintptr, uintptr)

// Adds @child to @bar, packed with reference to the
// end of the @bar.
func (x *HeaderBar) PackEnd(ChildVar *Widget) {

	xHeaderBarPackEnd(x.GoPointer(), ChildVar.GoPointer())

}

var xHeaderBarPackStart func(uintptr, uintptr)

// Adds @child to @bar, packed with reference to the
// start of the @bar.
func (x *HeaderBar) PackStart(ChildVar *Widget) {

	xHeaderBarPackStart(x.GoPointer(), ChildVar.GoPointer())

}

var xHeaderBarRemove func(uintptr, uintptr)

// Removes a child from the `GtkHeaderBar`.
//
// The child must have been added with
// [method@Gtk.HeaderBar.pack_start],
// [method@Gtk.HeaderBar.pack_end] or
// [method@Gtk.HeaderBar.set_title_widget].
func (x *HeaderBar) Remove(ChildVar *Widget) {

	xHeaderBarRemove(x.GoPointer(), ChildVar.GoPointer())

}

var xHeaderBarSetDecorationLayout func(uintptr, string)

// Sets the decoration layout for this header bar.
//
// This property overrides the
// [property@Gtk.Settings:gtk-decoration-layout] setting.
//
// There can be valid reasons for overriding the setting, such
// as a header bar design that does not allow for buttons to take
// room on the right, or only offers room for a single close button.
// Split header bars are another example for overriding the setting.
//
// The format of the string is button names, separated by commas.
// A colon separates the buttons that should appear on the left
// from those on the right. Recognized button names are minimize,
// maximize, close and icon (the window icon).
//
// For example, “icon:minimize,maximize,close” specifies a icon
// on the left, and minimize, maximize and close buttons on the right.
func (x *HeaderBar) SetDecorationLayout(LayoutVar string) {

	xHeaderBarSetDecorationLayout(x.GoPointer(), LayoutVar)

}

var xHeaderBarSetShowTitleButtons func(uintptr, bool)

// Sets whether this header bar shows the standard window
// title buttons.
func (x *HeaderBar) SetShowTitleButtons(SettingVar bool) {

	xHeaderBarSetShowTitleButtons(x.GoPointer(), SettingVar)

}

var xHeaderBarSetTitleWidget func(uintptr, uintptr)

// Sets the title for the `GtkHeaderBar`.
//
// When set to %NULL, the headerbar will display the title of
// the window it is contained in.
//
// The title should help a user identify the current view.
// To achieve the same style as the builtin title, use the
// “title” style class.
//
// You should set the title widget to %NULL, for the window
// title label to be visible again.
func (x *HeaderBar) SetTitleWidget(TitleWidgetVar *Widget) {

	xHeaderBarSetTitleWidget(x.GoPointer(), TitleWidgetVar.GoPointer())

}

func (c *HeaderBar) GoPointer() uintptr {
	return c.Ptr
}

func (c *HeaderBar) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *HeaderBar) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *HeaderBar) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *HeaderBar) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *HeaderBar) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *HeaderBar) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *HeaderBar) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *HeaderBar) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *HeaderBar) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *HeaderBar) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *HeaderBar) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *HeaderBar) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xHeaderBarGLibType, lib, "gtk_header_bar_get_type")

	core.PuregoSafeRegister(&xNewHeaderBar, lib, "gtk_header_bar_new")

	core.PuregoSafeRegister(&xHeaderBarGetDecorationLayout, lib, "gtk_header_bar_get_decoration_layout")
	core.PuregoSafeRegister(&xHeaderBarGetShowTitleButtons, lib, "gtk_header_bar_get_show_title_buttons")
	core.PuregoSafeRegister(&xHeaderBarGetTitleWidget, lib, "gtk_header_bar_get_title_widget")
	core.PuregoSafeRegister(&xHeaderBarPackEnd, lib, "gtk_header_bar_pack_end")
	core.PuregoSafeRegister(&xHeaderBarPackStart, lib, "gtk_header_bar_pack_start")
	core.PuregoSafeRegister(&xHeaderBarRemove, lib, "gtk_header_bar_remove")
	core.PuregoSafeRegister(&xHeaderBarSetDecorationLayout, lib, "gtk_header_bar_set_decoration_layout")
	core.PuregoSafeRegister(&xHeaderBarSetShowTitleButtons, lib, "gtk_header_bar_set_show_title_buttons")
	core.PuregoSafeRegister(&xHeaderBarSetTitleWidget, lib, "gtk_header_bar_set_title_widget")

}
