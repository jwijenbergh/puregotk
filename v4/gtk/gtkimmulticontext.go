// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type IMMulticontextClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *IMMulticontextClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type IMMulticontextPrivate struct {
	_ structs.HostLayout
}

func (x *IMMulticontextPrivate) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkIMMulticontext` is an input method context supporting multiple,
// switchable input methods.
//
// Text widgets such as `GtkText` or `GtkTextView` use a `GtkIMMultiContext`
// to implement their `im-module` property for switching between different
// input methods.
type IMMulticontext struct {
	IMContext
}

var xIMMulticontextGLibType func() types.GType

func IMMulticontextGLibType() types.GType {
	return xIMMulticontextGLibType()
}

func IMMulticontextNewFromInternalPtr(ptr uintptr) *IMMulticontext {
	cls := &IMMulticontext{}
	cls.Ptr = ptr
	return cls
}

var xNewIMMulticontext func() uintptr

// Creates a new `GtkIMMulticontext`.
func NewIMMulticontext() *IMMulticontext {
	var cls *IMMulticontext

	cret := xNewIMMulticontext()

	if cret == 0 {
		return nil
	}
	cls = &IMMulticontext{}
	cls.Ptr = cret
	return cls
}

var xIMMulticontextGetContextId func(uintptr) string

// Gets the id of the currently active delegate of the @context.
func (x *IMMulticontext) GetContextId() string {

	cret := xIMMulticontextGetContextId(x.GoPointer())
	return cret
}

var xIMMulticontextSetContextId func(uintptr, string)

// Sets the context id for @context.
//
// This causes the currently active delegate of @context to be
// replaced by the delegate corresponding to the new context id.
//
// Setting this to a non-%NULL value overrides the system-wide
// IM module setting. See the [property@Gtk.Settings:gtk-im-module]
// property.
func (x *IMMulticontext) SetContextId(ContextIdVar string) {

	xIMMulticontextSetContextId(x.GoPointer(), ContextIdVar)

}

func (c *IMMulticontext) GoPointer() uintptr {
	return c.Ptr
}

func (c *IMMulticontext) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xIMMulticontextGLibType, lib, "gtk_im_multicontext_get_type")

	core.PuregoSafeRegister(&xNewIMMulticontext, lib, "gtk_im_multicontext_new")

	core.PuregoSafeRegister(&xIMMulticontextGetContextId, lib, "gtk_im_multicontext_get_context_id")
	core.PuregoSafeRegister(&xIMMulticontextSetContextId, lib, "gtk_im_multicontext_set_context_id")

}
