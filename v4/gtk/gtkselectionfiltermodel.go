// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type SelectionFilterModelClass struct {
	ParentClass uintptr
}

func (x *SelectionFilterModelClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkSelectionFilterModel` is a list model that presents the selection from
// a `GtkSelectionModel`.
type SelectionFilterModel struct {
	gobject.Object
}

func SelectionFilterModelNewFromInternalPtr(ptr uintptr) *SelectionFilterModel {
	cls := &SelectionFilterModel{}
	cls.Ptr = ptr
	return cls
}

var xNewSelectionFilterModel func(uintptr) uintptr

// Creates a new `GtkSelectionFilterModel` that will include the
// selected items from the underlying selection model.
func NewSelectionFilterModel(ModelVar SelectionModel) *SelectionFilterModel {
	var cls *SelectionFilterModel

	cret := xNewSelectionFilterModel(ModelVar.GoPointer())

	if cret == 0 {
		return nil
	}
	cls = &SelectionFilterModel{}
	cls.Ptr = cret
	return cls
}

var xSelectionFilterModelGetModel func(uintptr) uintptr

// Gets the model currently filtered or %NULL if none.
func (x *SelectionFilterModel) GetModel() *SelectionModelBase {
	var cls *SelectionModelBase

	cret := xSelectionFilterModelGetModel(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &SelectionModelBase{}
	cls.Ptr = cret
	return cls
}

var xSelectionFilterModelSetModel func(uintptr, uintptr)

// Sets the model to be filtered.
//
// Note that GTK makes no effort to ensure that @model conforms to
// the item type of @self. It assumes that the caller knows what they
// are doing and have set up an appropriate filter to ensure that item
// types match.
func (x *SelectionFilterModel) SetModel(ModelVar SelectionModel) {

	xSelectionFilterModelSetModel(x.GoPointer(), ModelVar.GoPointer())

}

func (c *SelectionFilterModel) GoPointer() uintptr {
	return c.Ptr
}

func (c *SelectionFilterModel) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// See also: g_list_model_get_n_items()
func (x *SelectionFilterModel) GetItem(PositionVar uint) uintptr {

	cret := gio.XGListModelGetItem(x.GoPointer(), PositionVar)
	return cret
}

// Gets the type of the items in @list.
//
// All items returned from g_list_model_get_item() are of the type
// returned by this function, or a subtype, or if the type is an
// interface, they are an implementation of that interface.
//
// The item type of a #GListModel can not change during the life of the
// model.
func (x *SelectionFilterModel) GetItemType() types.GType {

	cret := gio.XGListModelGetItemType(x.GoPointer())
	return cret
}

// Gets the number of items in @list.
//
// Depending on the model implementation, calling this function may be
// less efficient than iterating the list with increasing values for
// @position until g_list_model_get_item() returns %NULL.
func (x *SelectionFilterModel) GetNItems() uint {

	cret := gio.XGListModelGetNItems(x.GoPointer())
	return cret
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// This function is meant to be used by language bindings in place
// of g_list_model_get_item().
//
// See also: g_list_model_get_n_items()
func (x *SelectionFilterModel) GetObject(PositionVar uint) *gobject.Object {
	var cls *gobject.Object

	cret := gio.XGListModelGetObject(x.GoPointer(), PositionVar)

	if cret == 0 {
		return nil
	}
	cls = &gobject.Object{}
	cls.Ptr = cret
	return cls
}

// Emits the #GListModel::items-changed signal on @list.
//
// This function should only be called by classes implementing
// #GListModel. It has to be called after the internal representation
// of @list has been updated, because handlers connected to this signal
// might query the new state of the list.
//
// Implementations must only make changes to the model (as visible to
// its consumer) in places that will not cause problems for that
// consumer.  For models that are driven directly by a write API (such
// as #GListStore), changes can be reported in response to uses of that
// API.  For models that represent remote data, changes should only be
// made from a fresh mainloop dispatch.  It is particularly not
// permitted to make changes in response to a call to the #GListModel
// consumer API.
//
// Stated another way: in general, it is assumed that code making a
// series of accesses to the model via the API, without returning to the
// mainloop, and without calling other code, will continue to view the
// same contents of the model.
func (x *SelectionFilterModel) ItemsChanged(PositionVar uint, RemovedVar uint, AddedVar uint) {

	gio.XGListModelItemsChanged(x.GoPointer(), PositionVar, RemovedVar, AddedVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewSelectionFilterModel, lib, "gtk_selection_filter_model_new")

	core.PuregoSafeRegister(&xSelectionFilterModelGetModel, lib, "gtk_selection_filter_model_get_model")
	core.PuregoSafeRegister(&xSelectionFilterModelSetModel, lib, "gtk_selection_filter_model_set_model")

}
