// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type OverlayLayoutChildClass struct {
	ParentClass uintptr
}

func (x *OverlayLayoutChildClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type OverlayLayoutClass struct {
	ParentClass uintptr
}

func (x *OverlayLayoutClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkOverlayLayout` is the layout manager used by `GtkOverlay`.
//
// It places widgets as overlays on top of the main child.
//
// This is not a reusable layout manager, since it expects its widget
// to be a `GtkOverlay`. It only listed here so that its layout
// properties get documented.
type OverlayLayout struct {
	LayoutManager
}

var xOverlayLayoutGLibType func() types.GType

func OverlayLayoutGLibType() types.GType {
	return xOverlayLayoutGLibType()
}

func OverlayLayoutNewFromInternalPtr(ptr uintptr) *OverlayLayout {
	cls := &OverlayLayout{}
	cls.Ptr = ptr
	return cls
}

var xNewOverlayLayout func() uintptr

// Creates a new `GtkOverlayLayout` instance.
func NewOverlayLayout() *OverlayLayout {
	var cls *OverlayLayout

	cret := xNewOverlayLayout()

	if cret == 0 {
		return nil
	}
	cls = &OverlayLayout{}
	cls.Ptr = cret
	return cls
}

func (c *OverlayLayout) GoPointer() uintptr {
	return c.Ptr
}

func (c *OverlayLayout) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// `GtkLayoutChild` subclass for children in a `GtkOverlayLayout`.
type OverlayLayoutChild struct {
	LayoutChild
}

var xOverlayLayoutChildGLibType func() types.GType

func OverlayLayoutChildGLibType() types.GType {
	return xOverlayLayoutChildGLibType()
}

func OverlayLayoutChildNewFromInternalPtr(ptr uintptr) *OverlayLayoutChild {
	cls := &OverlayLayoutChild{}
	cls.Ptr = ptr
	return cls
}

var xOverlayLayoutChildGetClipOverlay func(uintptr) bool

// Retrieves whether the child is clipped.
func (x *OverlayLayoutChild) GetClipOverlay() bool {

	cret := xOverlayLayoutChildGetClipOverlay(x.GoPointer())
	return cret
}

var xOverlayLayoutChildGetMeasure func(uintptr) bool

// Retrieves whether the child is measured.
func (x *OverlayLayoutChild) GetMeasure() bool {

	cret := xOverlayLayoutChildGetMeasure(x.GoPointer())
	return cret
}

var xOverlayLayoutChildSetClipOverlay func(uintptr, bool)

// Sets whether to clip this child.
func (x *OverlayLayoutChild) SetClipOverlay(ClipOverlayVar bool) {

	xOverlayLayoutChildSetClipOverlay(x.GoPointer(), ClipOverlayVar)

}

var xOverlayLayoutChildSetMeasure func(uintptr, bool)

// Sets whether to measure this child.
func (x *OverlayLayoutChild) SetMeasure(MeasureVar bool) {

	xOverlayLayoutChildSetMeasure(x.GoPointer(), MeasureVar)

}

func (c *OverlayLayoutChild) GoPointer() uintptr {
	return c.Ptr
}

func (c *OverlayLayoutChild) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xOverlayLayoutGLibType, lib, "gtk_overlay_layout_get_type")

	core.PuregoSafeRegister(&xNewOverlayLayout, lib, "gtk_overlay_layout_new")

	core.PuregoSafeRegister(&xOverlayLayoutChildGLibType, lib, "gtk_overlay_layout_child_get_type")

	core.PuregoSafeRegister(&xOverlayLayoutChildGetClipOverlay, lib, "gtk_overlay_layout_child_get_clip_overlay")
	core.PuregoSafeRegister(&xOverlayLayoutChildGetMeasure, lib, "gtk_overlay_layout_child_get_measure")
	core.PuregoSafeRegister(&xOverlayLayoutChildSetClipOverlay, lib, "gtk_overlay_layout_child_set_clip_overlay")
	core.PuregoSafeRegister(&xOverlayLayoutChildSetMeasure, lib, "gtk_overlay_layout_child_set_measure")

}
