// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type ScrollableInterface struct {
	BaseIface uintptr
}

func (x *ScrollableInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkScrollable` is an interface for widgets with native scrolling ability.
//
// To implement this interface you should override the
// [property@Gtk.Scrollable:hadjustment] and
// [property@Gtk.Scrollable:vadjustment] properties.
//
// ## Creating a scrollable widget
//
// All scrollable widgets should do the following.
//
//   - When a parent widget sets the scrollable child widget’s adjustments,
//     the widget should connect to the [signal@Gtk.Adjustment::value-changed]
//     signal. The child widget should then populate the adjustments’ properties
//     as soon as possible, which usually means queueing an allocation right away
//     and populating the properties in the [vfunc@Gtk.Widget.size_allocate]
//     implementation.
//
//   - Because its preferred size is the size for a fully expanded widget,
//     the scrollable widget must be able to cope with underallocations.
//     This means that it must accept any value passed to its
//     [vfunc@Gtk.Widget.size_allocate] implementation.
//
//   - When the parent allocates space to the scrollable child widget,
//     the widget must ensure the adjustments’ property values are correct and up
//     to date, for example using [method@Gtk.Adjustment.configure].
//
//   - When any of the adjustments emits the [signal@Gtk.Adjustment::value-changed]
//     signal, the scrollable widget should scroll its contents.
type Scrollable interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	GetBorder(BorderVar *Border) bool
	GetHadjustment() *Adjustment
	GetHscrollPolicy() ScrollablePolicy
	GetVadjustment() *Adjustment
	GetVscrollPolicy() ScrollablePolicy
	SetHadjustment(HadjustmentVar *Adjustment)
	SetHscrollPolicy(PolicyVar ScrollablePolicy)
	SetVadjustment(VadjustmentVar *Adjustment)
	SetVscrollPolicy(PolicyVar ScrollablePolicy)
}

var xScrollableGLibType func() types.GType

func ScrollableGLibType() types.GType {
	return xScrollableGLibType()
}

type ScrollableBase struct {
	Ptr uintptr
}

func (x *ScrollableBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *ScrollableBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Returns the size of a non-scrolling border around the
// outside of the scrollable.
//
// An example for this would be treeview headers. GTK can use
// this information to display overlaid graphics, like the
// overshoot indication, at the right position.
func (x *ScrollableBase) GetBorder(BorderVar *Border) bool {

	cret := XGtkScrollableGetBorder(x.GoPointer(), BorderVar)
	return cret
}

// Retrieves the `GtkAdjustment` used for horizontal scrolling.
func (x *ScrollableBase) GetHadjustment() *Adjustment {
	var cls *Adjustment

	cret := XGtkScrollableGetHadjustment(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Adjustment{}
	cls.Ptr = cret
	return cls
}

// Gets the horizontal `GtkScrollablePolicy`.
func (x *ScrollableBase) GetHscrollPolicy() ScrollablePolicy {

	cret := XGtkScrollableGetHscrollPolicy(x.GoPointer())
	return cret
}

// Retrieves the `GtkAdjustment` used for vertical scrolling.
func (x *ScrollableBase) GetVadjustment() *Adjustment {
	var cls *Adjustment

	cret := XGtkScrollableGetVadjustment(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Adjustment{}
	cls.Ptr = cret
	return cls
}

// Gets the vertical `GtkScrollablePolicy`.
func (x *ScrollableBase) GetVscrollPolicy() ScrollablePolicy {

	cret := XGtkScrollableGetVscrollPolicy(x.GoPointer())
	return cret
}

// Sets the horizontal adjustment of the `GtkScrollable`.
func (x *ScrollableBase) SetHadjustment(HadjustmentVar *Adjustment) {

	XGtkScrollableSetHadjustment(x.GoPointer(), HadjustmentVar.GoPointer())

}

// Sets the `GtkScrollablePolicy`.
//
// The policy determines whether horizontal scrolling should start
// below the minimum width or below the natural width.
func (x *ScrollableBase) SetHscrollPolicy(PolicyVar ScrollablePolicy) {

	XGtkScrollableSetHscrollPolicy(x.GoPointer(), PolicyVar)

}

// Sets the vertical adjustment of the `GtkScrollable`.
func (x *ScrollableBase) SetVadjustment(VadjustmentVar *Adjustment) {

	XGtkScrollableSetVadjustment(x.GoPointer(), VadjustmentVar.GoPointer())

}

// Sets the `GtkScrollablePolicy`.
//
// The policy determines whether vertical scrolling should start
// below the minimum height or below the natural height.
func (x *ScrollableBase) SetVscrollPolicy(PolicyVar ScrollablePolicy) {

	XGtkScrollableSetVscrollPolicy(x.GoPointer(), PolicyVar)

}

var XGtkScrollableGetBorder func(uintptr, *Border) bool
var XGtkScrollableGetHadjustment func(uintptr) uintptr
var XGtkScrollableGetHscrollPolicy func(uintptr) ScrollablePolicy
var XGtkScrollableGetVadjustment func(uintptr) uintptr
var XGtkScrollableGetVscrollPolicy func(uintptr) ScrollablePolicy
var XGtkScrollableSetHadjustment func(uintptr, uintptr)
var XGtkScrollableSetHscrollPolicy func(uintptr, ScrollablePolicy)
var XGtkScrollableSetVadjustment func(uintptr, uintptr)
var XGtkScrollableSetVscrollPolicy func(uintptr, ScrollablePolicy)

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xScrollableGLibType, lib, "gtk_scrollable_get_type")

	core.PuregoSafeRegister(&XGtkScrollableGetBorder, lib, "gtk_scrollable_get_border")
	core.PuregoSafeRegister(&XGtkScrollableGetHadjustment, lib, "gtk_scrollable_get_hadjustment")
	core.PuregoSafeRegister(&XGtkScrollableGetHscrollPolicy, lib, "gtk_scrollable_get_hscroll_policy")
	core.PuregoSafeRegister(&XGtkScrollableGetVadjustment, lib, "gtk_scrollable_get_vadjustment")
	core.PuregoSafeRegister(&XGtkScrollableGetVscrollPolicy, lib, "gtk_scrollable_get_vscroll_policy")
	core.PuregoSafeRegister(&XGtkScrollableSetHadjustment, lib, "gtk_scrollable_set_hadjustment")
	core.PuregoSafeRegister(&XGtkScrollableSetHscrollPolicy, lib, "gtk_scrollable_set_hscroll_policy")
	core.PuregoSafeRegister(&XGtkScrollableSetVadjustment, lib, "gtk_scrollable_set_vadjustment")
	core.PuregoSafeRegister(&XGtkScrollableSetVscrollPolicy, lib, "gtk_scrollable_set_vscroll_policy")

}
