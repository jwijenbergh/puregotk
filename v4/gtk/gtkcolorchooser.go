// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type ColorChooserInterface struct {
	_ structs.HostLayout

	BaseInterface uintptr

	Padding [12]uintptr
}

func (x *ColorChooserInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkColorChooser` is an interface that is implemented by widgets
// for choosing colors.
//
// Depending on the situation, colors may be allowed to have alpha (translucency).
//
// In GTK, the main widgets that implement this interface are
// [class@Gtk.ColorChooserWidget], [class@Gtk.ColorChooserDialog] and
// [class@Gtk.ColorButton].
type ColorChooser interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	AddPalette(OrientationVar Orientation, ColorsPerLineVar int, NColorsVar int, ColorsVar []gdk.RGBA)
	GetRgba(ColorVar *gdk.RGBA)
	GetUseAlpha() bool
	SetRgba(ColorVar *gdk.RGBA)
	SetUseAlpha(UseAlphaVar bool)
}

var xColorChooserGLibType func() types.GType

func ColorChooserGLibType() types.GType {
	return xColorChooserGLibType()
}

type ColorChooserBase struct {
	Ptr uintptr
}

func (x *ColorChooserBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *ColorChooserBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Adds a palette to the color chooser.
//
// If @orientation is horizontal, the colors are grouped in rows,
// with @colors_per_line colors in each row. If @horizontal is %FALSE,
// the colors are grouped in columns instead.
//
// The default color palette of [class@Gtk.ColorChooserWidget] has
// 45 colors, organized in columns of 5 colors (this includes some
// grays).
//
// The layout of the color chooser widget works best when the
// palettes have 9-10 columns.
//
// Calling this function for the first time has the side effect
// of removing the default color palette from the color chooser.
//
// If @colors is %NULL, removes all previously added palettes.
func (x *ColorChooserBase) AddPalette(OrientationVar Orientation, ColorsPerLineVar int, NColorsVar int, ColorsVar []gdk.RGBA) {

	XGtkColorChooserAddPalette(x.GoPointer(), OrientationVar, ColorsPerLineVar, NColorsVar, ColorsVar)

}

// Gets the currently-selected color.
func (x *ColorChooserBase) GetRgba(ColorVar *gdk.RGBA) {

	XGtkColorChooserGetRgba(x.GoPointer(), ColorVar)

}

// Returns whether the color chooser shows the alpha channel.
func (x *ColorChooserBase) GetUseAlpha() bool {

	cret := XGtkColorChooserGetUseAlpha(x.GoPointer())
	return cret
}

// Sets the color.
func (x *ColorChooserBase) SetRgba(ColorVar *gdk.RGBA) {

	XGtkColorChooserSetRgba(x.GoPointer(), ColorVar)

}

// Sets whether or not the color chooser should use the alpha channel.
func (x *ColorChooserBase) SetUseAlpha(UseAlphaVar bool) {

	XGtkColorChooserSetUseAlpha(x.GoPointer(), UseAlphaVar)

}

var XGtkColorChooserAddPalette func(uintptr, Orientation, int, int, []gdk.RGBA)
var XGtkColorChooserGetRgba func(uintptr, *gdk.RGBA)
var XGtkColorChooserGetUseAlpha func(uintptr) bool
var XGtkColorChooserSetRgba func(uintptr, *gdk.RGBA)
var XGtkColorChooserSetUseAlpha func(uintptr, bool)

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xColorChooserGLibType, lib, "gtk_color_chooser_get_type")

	core.PuregoSafeRegister(&XGtkColorChooserAddPalette, lib, "gtk_color_chooser_add_palette")
	core.PuregoSafeRegister(&XGtkColorChooserGetRgba, lib, "gtk_color_chooser_get_rgba")
	core.PuregoSafeRegister(&XGtkColorChooserGetUseAlpha, lib, "gtk_color_chooser_get_use_alpha")
	core.PuregoSafeRegister(&XGtkColorChooserSetRgba, lib, "gtk_color_chooser_set_rgba")
	core.PuregoSafeRegister(&XGtkColorChooserSetUseAlpha, lib, "gtk_color_chooser_set_use_alpha")

}
