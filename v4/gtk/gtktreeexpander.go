// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type TreeExpanderClass struct {
	ParentClass uintptr
}

func (x *TreeExpanderClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkTreeExpander` is a widget that provides an expander for a list.
//
// It is typically placed as a bottommost child into a `GtkListView`
// to allow users to expand and collapse children in a list with a
// [class@Gtk.TreeListModel]. `GtkTreeExpander` provides the common UI
// elements, gestures and keybindings for this purpose.
//
// On top of this, the "listitem.expand", "listitem.collapse" and
// "listitem.toggle-expand" actions are provided to allow adding custom
// UI for managing expanded state.
//
// The `GtkTreeListModel` must be set to not be passthrough. Then it
// will provide [class@Gtk.TreeListRow] items which can be set via
// [method@Gtk.TreeExpander.set_list_row] on the expander.
// The expander will then watch that row item automatically.
// [method@Gtk.TreeExpander.set_child] sets the widget that displays
// the actual row contents.
//
// # CSS nodes
//
// ```
// treeexpander
// ├── [indent]*
// ├── [expander]
// ╰── &lt;child&gt;
// ```
//
// `GtkTreeExpander` has zero or one CSS nodes with the name "expander" that
// should display the expander icon. The node will be `:checked` when it
// is expanded. If the node is not expandable, an "indent" node will be
// displayed instead.
//
// For every level of depth, another "indent" node is prepended.
//
// # Accessibility
//
// `GtkTreeExpander` uses the %GTK_ACCESSIBLE_ROLE_GROUP role. The expander icon
// is represented as a %GTK_ACCESSIBLE_ROLE_BUTTON, labelled by the expander's
// child, and toggling it will change the %GTK_ACCESSIBLE_STATE_EXPANDED state.
type TreeExpander struct {
	Widget
}

func TreeExpanderNewFromInternalPtr(ptr uintptr) *TreeExpander {
	cls := &TreeExpander{}
	cls.Ptr = ptr
	return cls
}

var xNewTreeExpander func() uintptr

// Creates a new `GtkTreeExpander`
func NewTreeExpander() *TreeExpander {
	var cls *TreeExpander

	cret := xNewTreeExpander()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &TreeExpander{}
	cls.Ptr = cret
	return cls
}

var xTreeExpanderGetChild func(uintptr) uintptr

// Gets the child widget displayed by @self.
func (x *TreeExpander) GetChild() *Widget {
	var cls *Widget

	cret := xTreeExpanderGetChild(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xTreeExpanderGetIndentForIcon func(uintptr) bool

// TreeExpander indents the child by the width of an expander-icon if it is not expandable.
func (x *TreeExpander) GetIndentForIcon() bool {

	cret := xTreeExpanderGetIndentForIcon(x.GoPointer())
	return cret
}

var xTreeExpanderGetItem func(uintptr) uintptr

// Forwards the item set on the `GtkTreeListRow` that @self is managing.
//
// This call is essentially equivalent to calling:
//
// ```c
// gtk_tree_list_row_get_item (gtk_tree_expander_get_list_row (@self));
// ```
func (x *TreeExpander) GetItem() *gobject.Object {
	var cls *gobject.Object

	cret := xTreeExpanderGetItem(x.GoPointer())

	if cret == 0 {
		return nil
	}
	cls = &gobject.Object{}
	cls.Ptr = cret
	return cls
}

var xTreeExpanderGetListRow func(uintptr) uintptr

// Gets the list row managed by @self.
func (x *TreeExpander) GetListRow() *TreeListRow {
	var cls *TreeListRow

	cret := xTreeExpanderGetListRow(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &TreeListRow{}
	cls.Ptr = cret
	return cls
}

var xTreeExpanderSetChild func(uintptr, uintptr)

// Sets the content widget to display.
func (x *TreeExpander) SetChild(ChildVar *Widget) {

	xTreeExpanderSetChild(x.GoPointer(), ChildVar.GoPointer())

}

var xTreeExpanderSetIndentForIcon func(uintptr, bool)

// Sets if the TreeExpander should indent the child by the width of an expander-icon when it is not expandable.
func (x *TreeExpander) SetIndentForIcon(IndentForIconVar bool) {

	xTreeExpanderSetIndentForIcon(x.GoPointer(), IndentForIconVar)

}

var xTreeExpanderSetListRow func(uintptr, uintptr)

// Sets the tree list row that this expander should manage.
func (x *TreeExpander) SetListRow(ListRowVar *TreeListRow) {

	xTreeExpanderSetListRow(x.GoPointer(), ListRowVar.GoPointer())

}

func (c *TreeExpander) GoPointer() uintptr {
	return c.Ptr
}

func (c *TreeExpander) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *TreeExpander) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *TreeExpander) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *TreeExpander) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *TreeExpander) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *TreeExpander) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *TreeExpander) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *TreeExpander) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *TreeExpander) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *TreeExpander) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *TreeExpander) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *TreeExpander) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewTreeExpander, lib, "gtk_tree_expander_new")

	core.PuregoSafeRegister(&xTreeExpanderGetChild, lib, "gtk_tree_expander_get_child")
	core.PuregoSafeRegister(&xTreeExpanderGetIndentForIcon, lib, "gtk_tree_expander_get_indent_for_icon")
	core.PuregoSafeRegister(&xTreeExpanderGetItem, lib, "gtk_tree_expander_get_item")
	core.PuregoSafeRegister(&xTreeExpanderGetListRow, lib, "gtk_tree_expander_get_list_row")
	core.PuregoSafeRegister(&xTreeExpanderSetChild, lib, "gtk_tree_expander_set_child")
	core.PuregoSafeRegister(&xTreeExpanderSetIndentForIcon, lib, "gtk_tree_expander_set_indent_for_icon")
	core.PuregoSafeRegister(&xTreeExpanderSetListRow, lib, "gtk_tree_expander_set_list_row")

}
