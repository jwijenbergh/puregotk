// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type GridClass struct {
	ParentClass uintptr

	Padding [8]uintptr
}

func (x *GridClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkGrid` is a container which arranges its child widgets in
// rows and columns.
//
// ![An example GtkGrid](grid.png)
//
// It supports arbitrary positions and horizontal/vertical spans.
//
// Children are added using [method@Gtk.Grid.attach]. They can span multiple
// rows or columns. It is also possible to add a child next to an existing
// child, using [method@Gtk.Grid.attach_next_to]. To remove a child from the
// grid, use [method@Gtk.Grid.remove].
//
// The behaviour of `GtkGrid` when several children occupy the same grid
// cell is undefined.
//
// # GtkGrid as GtkBuildable
//
// Every child in a `GtkGrid` has access to a custom [iface@Gtk.Buildable]
// element, called `&lt;layout&gt;`. It can by used to specify a position in the
// grid and optionally spans. All properties that can be used in the `&lt;layout&gt;`
// element are implemented by [class@Gtk.GridLayoutChild].
//
// It is implemented by `GtkWidget` using [class@Gtk.LayoutManager].
//
// To showcase it, here is a simple example:
//
// ```xml
// &lt;object class="GtkGrid" id="my_grid"&gt;
//
//	&lt;child&gt;
//	  &lt;object class="GtkButton" id="button1"&gt;
//	    &lt;property name="label"&gt;Button 1&lt;/property&gt;
//	    &lt;layout&gt;
//	      &lt;property name="column"&gt;0&lt;/property&gt;
//	      &lt;property name="row"&gt;0&lt;/property&gt;
//	    &lt;/layout&gt;
//	  &lt;/object&gt;
//	&lt;/child&gt;
//	&lt;child&gt;
//	  &lt;object class="GtkButton" id="button2"&gt;
//	    &lt;property name="label"&gt;Button 2&lt;/property&gt;
//	    &lt;layout&gt;
//	      &lt;property name="column"&gt;1&lt;/property&gt;
//	      &lt;property name="row"&gt;0&lt;/property&gt;
//	    &lt;/layout&gt;
//	  &lt;/object&gt;
//	&lt;/child&gt;
//	&lt;child&gt;
//	  &lt;object class="GtkButton" id="button3"&gt;
//	    &lt;property name="label"&gt;Button 3&lt;/property&gt;
//	    &lt;layout&gt;
//	      &lt;property name="column"&gt;2&lt;/property&gt;
//	      &lt;property name="row"&gt;0&lt;/property&gt;
//	      &lt;property name="row-span"&gt;2&lt;/property&gt;
//	    &lt;/layout&gt;
//	  &lt;/object&gt;
//	&lt;/child&gt;
//	&lt;child&gt;
//	  &lt;object class="GtkButton" id="button4"&gt;
//	    &lt;property name="label"&gt;Button 4&lt;/property&gt;
//	    &lt;layout&gt;
//	      &lt;property name="column"&gt;0&lt;/property&gt;
//	      &lt;property name="row"&gt;1&lt;/property&gt;
//	      &lt;property name="column-span"&gt;2&lt;/property&gt;
//	    &lt;/layout&gt;
//	  &lt;/object&gt;
//	&lt;/child&gt;
//
// &lt;/object&gt;
// ```
//
// It organizes the first two buttons side-by-side in one cell each.
// The third button is in the last column but spans across two rows.
// This is defined by the `row-span` property. The last button is
// located in the second row and spans across two columns, which is
// defined by the `column-span` property.
//
// # CSS nodes
//
// `GtkGrid` uses a single CSS node with name `grid`.
//
// # Accessibility
//
// `GtkGrid` uses the %GTK_ACCESSIBLE_ROLE_GROUP role.
type Grid struct {
	Widget
}

func GridNewFromInternalPtr(ptr uintptr) *Grid {
	cls := &Grid{}
	cls.Ptr = ptr
	return cls
}

var xNewGrid func() uintptr

// Creates a new grid widget.
func NewGrid() *Grid {
	var cls *Grid

	cret := xNewGrid()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Grid{}
	cls.Ptr = cret
	return cls
}

var xGridAttach func(uintptr, uintptr, int, int, int, int)

// Adds a widget to the grid.
//
// The position of @child is determined by @column and @row.
// The number of “cells” that @child will occupy is determined
// by @width and @height.
func (x *Grid) Attach(ChildVar *Widget, ColumnVar int, RowVar int, WidthVar int, HeightVar int) {

	xGridAttach(x.GoPointer(), ChildVar.GoPointer(), ColumnVar, RowVar, WidthVar, HeightVar)

}

var xGridAttachNextTo func(uintptr, uintptr, uintptr, PositionType, int, int)

// Adds a widget to the grid.
//
// The widget is placed next to @sibling, on the side determined by
// @side. When @sibling is %NULL, the widget is placed in row (for
// left or right placement) or column 0 (for top or bottom placement),
// at the end indicated by @side.
//
// Attaching widgets labeled `[1]`, `[2]`, `[3]` with `@sibling == %NULL` and
// `@side == %GTK_POS_LEFT` yields a layout of `[3][2][1]`.
func (x *Grid) AttachNextTo(ChildVar *Widget, SiblingVar *Widget, SideVar PositionType, WidthVar int, HeightVar int) {

	xGridAttachNextTo(x.GoPointer(), ChildVar.GoPointer(), SiblingVar.GoPointer(), SideVar, WidthVar, HeightVar)

}

var xGridGetBaselineRow func(uintptr) int

// Returns which row defines the global baseline of @grid.
func (x *Grid) GetBaselineRow() int {

	cret := xGridGetBaselineRow(x.GoPointer())
	return cret
}

var xGridGetChildAt func(uintptr, int, int) uintptr

// Gets the child of @grid whose area covers the grid
// cell at @column, @row.
func (x *Grid) GetChildAt(ColumnVar int, RowVar int) *Widget {
	var cls *Widget

	cret := xGridGetChildAt(x.GoPointer(), ColumnVar, RowVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xGridGetColumnHomogeneous func(uintptr) bool

// Returns whether all columns of @grid have the same width.
func (x *Grid) GetColumnHomogeneous() bool {

	cret := xGridGetColumnHomogeneous(x.GoPointer())
	return cret
}

var xGridGetColumnSpacing func(uintptr) uint

// Returns the amount of space between the columns of @grid.
func (x *Grid) GetColumnSpacing() uint {

	cret := xGridGetColumnSpacing(x.GoPointer())
	return cret
}

var xGridGetRowBaselinePosition func(uintptr, int) BaselinePosition

// Returns the baseline position of @row.
//
// See [method@Gtk.Grid.set_row_baseline_position].
func (x *Grid) GetRowBaselinePosition(RowVar int) BaselinePosition {

	cret := xGridGetRowBaselinePosition(x.GoPointer(), RowVar)
	return cret
}

var xGridGetRowHomogeneous func(uintptr) bool

// Returns whether all rows of @grid have the same height.
func (x *Grid) GetRowHomogeneous() bool {

	cret := xGridGetRowHomogeneous(x.GoPointer())
	return cret
}

var xGridGetRowSpacing func(uintptr) uint

// Returns the amount of space between the rows of @grid.
func (x *Grid) GetRowSpacing() uint {

	cret := xGridGetRowSpacing(x.GoPointer())
	return cret
}

var xGridInsertColumn func(uintptr, int)

// Inserts a column at the specified position.
//
// Children which are attached at or to the right of this position
// are moved one column to the right. Children which span across this
// position are grown to span the new column.
func (x *Grid) InsertColumn(PositionVar int) {

	xGridInsertColumn(x.GoPointer(), PositionVar)

}

var xGridInsertNextTo func(uintptr, uintptr, PositionType)

// Inserts a row or column at the specified position.
//
// The new row or column is placed next to @sibling, on the side
// determined by @side. If @side is %GTK_POS_TOP or %GTK_POS_BOTTOM,
// a row is inserted. If @side is %GTK_POS_LEFT of %GTK_POS_RIGHT,
// a column is inserted.
func (x *Grid) InsertNextTo(SiblingVar *Widget, SideVar PositionType) {

	xGridInsertNextTo(x.GoPointer(), SiblingVar.GoPointer(), SideVar)

}

var xGridInsertRow func(uintptr, int)

// Inserts a row at the specified position.
//
// Children which are attached at or below this position
// are moved one row down. Children which span across this
// position are grown to span the new row.
func (x *Grid) InsertRow(PositionVar int) {

	xGridInsertRow(x.GoPointer(), PositionVar)

}

var xGridQueryChild func(uintptr, uintptr, int, int, int, int)

// Queries the attach points and spans of @child inside the given `GtkGrid`.
func (x *Grid) QueryChild(ChildVar *Widget, ColumnVar int, RowVar int, WidthVar int, HeightVar int) {

	xGridQueryChild(x.GoPointer(), ChildVar.GoPointer(), ColumnVar, RowVar, WidthVar, HeightVar)

}

var xGridRemove func(uintptr, uintptr)

// Removes a child from @grid.
//
// The child must have been added with
// [method@Gtk.Grid.attach] or [method@Gtk.Grid.attach_next_to].
func (x *Grid) Remove(ChildVar *Widget) {

	xGridRemove(x.GoPointer(), ChildVar.GoPointer())

}

var xGridRemoveColumn func(uintptr, int)

// Removes a column from the grid.
//
// Children that are placed in this column are removed,
// spanning children that overlap this column have their
// width reduced by one, and children after the column
// are moved to the left.
func (x *Grid) RemoveColumn(PositionVar int) {

	xGridRemoveColumn(x.GoPointer(), PositionVar)

}

var xGridRemoveRow func(uintptr, int)

// Removes a row from the grid.
//
// Children that are placed in this row are removed,
// spanning children that overlap this row have their
// height reduced by one, and children below the row
// are moved up.
func (x *Grid) RemoveRow(PositionVar int) {

	xGridRemoveRow(x.GoPointer(), PositionVar)

}

var xGridSetBaselineRow func(uintptr, int)

// Sets which row defines the global baseline for the entire grid.
//
// Each row in the grid can have its own local baseline, but only
// one of those is global, meaning it will be the baseline in the
// parent of the @grid.
func (x *Grid) SetBaselineRow(RowVar int) {

	xGridSetBaselineRow(x.GoPointer(), RowVar)

}

var xGridSetColumnHomogeneous func(uintptr, bool)

// Sets whether all columns of @grid will have the same width.
func (x *Grid) SetColumnHomogeneous(HomogeneousVar bool) {

	xGridSetColumnHomogeneous(x.GoPointer(), HomogeneousVar)

}

var xGridSetColumnSpacing func(uintptr, uint)

// Sets the amount of space between columns of @grid.
func (x *Grid) SetColumnSpacing(SpacingVar uint) {

	xGridSetColumnSpacing(x.GoPointer(), SpacingVar)

}

var xGridSetRowBaselinePosition func(uintptr, int, BaselinePosition)

// Sets how the baseline should be positioned on @row of the
// grid, in case that row is assigned more space than is requested.
//
// The default baseline position is %GTK_BASELINE_POSITION_CENTER.
func (x *Grid) SetRowBaselinePosition(RowVar int, PosVar BaselinePosition) {

	xGridSetRowBaselinePosition(x.GoPointer(), RowVar, PosVar)

}

var xGridSetRowHomogeneous func(uintptr, bool)

// Sets whether all rows of @grid will have the same height.
func (x *Grid) SetRowHomogeneous(HomogeneousVar bool) {

	xGridSetRowHomogeneous(x.GoPointer(), HomogeneousVar)

}

var xGridSetRowSpacing func(uintptr, uint)

// Sets the amount of space between rows of @grid.
func (x *Grid) SetRowSpacing(SpacingVar uint) {

	xGridSetRowSpacing(x.GoPointer(), SpacingVar)

}

func (c *Grid) GoPointer() uintptr {
	return c.Ptr
}

func (c *Grid) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *Grid) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *Grid) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *Grid) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *Grid) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *Grid) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Grid) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *Grid) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Grid) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *Grid) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Grid) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *Grid) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

// Retrieves the orientation of the @orientable.
func (x *Grid) GetOrientation() Orientation {

	cret := XGtkOrientableGetOrientation(x.GoPointer())
	return cret
}

// Sets the orientation of the @orientable.
func (x *Grid) SetOrientation(OrientationVar Orientation) {

	XGtkOrientableSetOrientation(x.GoPointer(), OrientationVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewGrid, lib, "gtk_grid_new")

	core.PuregoSafeRegister(&xGridAttach, lib, "gtk_grid_attach")
	core.PuregoSafeRegister(&xGridAttachNextTo, lib, "gtk_grid_attach_next_to")
	core.PuregoSafeRegister(&xGridGetBaselineRow, lib, "gtk_grid_get_baseline_row")
	core.PuregoSafeRegister(&xGridGetChildAt, lib, "gtk_grid_get_child_at")
	core.PuregoSafeRegister(&xGridGetColumnHomogeneous, lib, "gtk_grid_get_column_homogeneous")
	core.PuregoSafeRegister(&xGridGetColumnSpacing, lib, "gtk_grid_get_column_spacing")
	core.PuregoSafeRegister(&xGridGetRowBaselinePosition, lib, "gtk_grid_get_row_baseline_position")
	core.PuregoSafeRegister(&xGridGetRowHomogeneous, lib, "gtk_grid_get_row_homogeneous")
	core.PuregoSafeRegister(&xGridGetRowSpacing, lib, "gtk_grid_get_row_spacing")
	core.PuregoSafeRegister(&xGridInsertColumn, lib, "gtk_grid_insert_column")
	core.PuregoSafeRegister(&xGridInsertNextTo, lib, "gtk_grid_insert_next_to")
	core.PuregoSafeRegister(&xGridInsertRow, lib, "gtk_grid_insert_row")
	core.PuregoSafeRegister(&xGridQueryChild, lib, "gtk_grid_query_child")
	core.PuregoSafeRegister(&xGridRemove, lib, "gtk_grid_remove")
	core.PuregoSafeRegister(&xGridRemoveColumn, lib, "gtk_grid_remove_column")
	core.PuregoSafeRegister(&xGridRemoveRow, lib, "gtk_grid_remove_row")
	core.PuregoSafeRegister(&xGridSetBaselineRow, lib, "gtk_grid_set_baseline_row")
	core.PuregoSafeRegister(&xGridSetColumnHomogeneous, lib, "gtk_grid_set_column_homogeneous")
	core.PuregoSafeRegister(&xGridSetColumnSpacing, lib, "gtk_grid_set_column_spacing")
	core.PuregoSafeRegister(&xGridSetRowBaselinePosition, lib, "gtk_grid_set_row_baseline_position")
	core.PuregoSafeRegister(&xGridSetRowHomogeneous, lib, "gtk_grid_set_row_homogeneous")
	core.PuregoSafeRegister(&xGridSetRowSpacing, lib, "gtk_grid_set_row_spacing")

}
