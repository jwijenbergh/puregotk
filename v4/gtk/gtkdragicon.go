// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gsk"
)

type DragIconClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *DragIconClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkDragIcon` is a `GtkRoot` implementation for drag icons.
//
// A drag icon moves with the pointer during a Drag-and-Drop operation
// and is destroyed when the drag ends.
//
// To set up a drag icon and associate it with an ongoing drag operation,
// use [func@Gtk.DragIcon.get_for_drag] to get the icon for a drag. You can
// then use it like any other widget and use [method@Gtk.DragIcon.set_child]
// to set whatever widget should be used for the drag icon.
//
// Keep in mind that drag icons do not allow user input.
type DragIcon struct {
	Widget
}

var xDragIconGLibType func() types.GType

func DragIconGLibType() types.GType {
	return xDragIconGLibType()
}

func DragIconNewFromInternalPtr(ptr uintptr) *DragIcon {
	cls := &DragIcon{}
	cls.Ptr = ptr
	return cls
}

var xDragIconGetChild func(uintptr) uintptr

// Gets the widget currently used as drag icon.
func (x *DragIcon) GetChild() *Widget {
	var cls *Widget

	cret := xDragIconGetChild(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xDragIconSetChild func(uintptr, uintptr)

// Sets the widget to display as the drag icon.
func (x *DragIcon) SetChild(ChildVar *Widget) {

	xDragIconSetChild(x.GoPointer(), ChildVar.GoPointer())

}

func (c *DragIcon) GoPointer() uintptr {
	return c.Ptr
}

func (c *DragIcon) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *DragIcon) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *DragIcon) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *DragIcon) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *DragIcon) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *DragIcon) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *DragIcon) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *DragIcon) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *DragIcon) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *DragIcon) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *DragIcon) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *DragIcon) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

// Returns the renderer that is used for this `GtkNative`.
func (x *DragIcon) GetRenderer() *gsk.Renderer {
	var cls *gsk.Renderer

	cret := XGtkNativeGetRenderer(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gsk.Renderer{}
	cls.Ptr = cret
	return cls
}

// Returns the surface of this `GtkNative`.
func (x *DragIcon) GetSurface() *gdk.Surface {
	var cls *gdk.Surface

	cret := XGtkNativeGetSurface(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gdk.Surface{}
	cls.Ptr = cret
	return cls
}

// Retrieves the surface transform of @self.
//
// This is the translation from @self's surface coordinates into
// @self's widget coordinates.
func (x *DragIcon) GetSurfaceTransform(XVar float64, YVar float64) {

	XGtkNativeGetSurfaceTransform(x.GoPointer(), XVar, YVar)

}

// Realizes a `GtkNative`.
//
// This should only be used by subclasses.
func (x *DragIcon) Realize() {

	XGtkNativeRealize(x.GoPointer())

}

// Unrealizes a `GtkNative`.
//
// This should only be used by subclasses.
func (x *DragIcon) Unrealize() {

	XGtkNativeUnrealize(x.GoPointer())

}

// Returns the display that this `GtkRoot` is on.
func (x *DragIcon) GetDisplay() *gdk.Display {
	var cls *gdk.Display

	cret := XGtkRootGetDisplay(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gdk.Display{}
	cls.Ptr = cret
	return cls
}

// Retrieves the current focused widget within the root.
//
// Note that this is the widget that would have the focus
// if the root is active; if the root is not focused then
// `gtk_widget_has_focus (widget)` will be %FALSE for the
// widget.
func (x *DragIcon) GetFocus() *Widget {
	var cls *Widget

	cret := XGtkRootGetFocus(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

// If @focus is not the current focus widget, and is focusable, sets
// it as the focus widget for the root.
//
// If @focus is %NULL, unsets the focus widget for the root.
//
// To set the focus to a particular widget in the root, it is usually
// more convenient to use [method@Gtk.Widget.grab_focus] instead of
// this function.
func (x *DragIcon) SetFocus(FocusVar *Widget) {

	XGtkRootSetFocus(x.GoPointer(), FocusVar.GoPointer())

}

var xDragIconCreateWidgetForValue func(*gobject.Value) uintptr

// Creates a widget that can be used as a drag icon for the given
// @value.
//
// Supported types include strings, `GdkRGBA` and `GtkTextBuffer`.
// If GTK does not know how to create a widget for a given value,
// it will return %NULL.
//
// This method is used to set the default drag icon on drag-and-drop
// operations started by `GtkDragSource`, so you don't need to set
// a drag icon using this function there.
func DragIconCreateWidgetForValue(ValueVar *gobject.Value) *Widget {
	var cls *Widget

	cret := xDragIconCreateWidgetForValue(ValueVar)

	if cret == 0 {
		return nil
	}
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xDragIconGetForDrag func(uintptr) uintptr

// Gets the `GtkDragIcon` in use with @drag.
//
// If no drag icon exists yet, a new one will be created
// and shown.
func DragIconGetForDrag(DragVar *gdk.Drag) *Widget {
	var cls *Widget

	cret := xDragIconGetForDrag(DragVar.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Widget{}
	cls.Ptr = cret
	return cls
}

var xDragIconSetFromPaintable func(uintptr, uintptr, int, int)

// Creates a `GtkDragIcon` that shows @paintable, and associates
// it with the drag operation.
//
// The hotspot position on the paintable is aligned with the
// hotspot of the cursor.
func DragIconSetFromPaintable(DragVar *gdk.Drag, PaintableVar gdk.Paintable, HotXVar int, HotYVar int) {

	xDragIconSetFromPaintable(DragVar.GoPointer(), PaintableVar.GoPointer(), HotXVar, HotYVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xDragIconGLibType, lib, "gtk_drag_icon_get_type")

	core.PuregoSafeRegister(&xDragIconGetChild, lib, "gtk_drag_icon_get_child")
	core.PuregoSafeRegister(&xDragIconSetChild, lib, "gtk_drag_icon_set_child")

	core.PuregoSafeRegister(&xDragIconCreateWidgetForValue, lib, "gtk_drag_icon_create_widget_for_value")
	core.PuregoSafeRegister(&xDragIconGetForDrag, lib, "gtk_drag_icon_get_for_drag")
	core.PuregoSafeRegister(&xDragIconSetFromPaintable, lib, "gtk_drag_icon_set_from_paintable")

}
