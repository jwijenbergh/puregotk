// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/pango"
)

type IMContextClass struct {
	ParentClass uintptr
}

func (x *IMContextClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkIMContext` defines the interface for GTK input methods.
//
// `GtkIMContext` is used by GTK text input widgets like `GtkText`
// to map from key events to Unicode character strings.
//
// An input method may consume multiple key events in sequence before finally
// outputting the composed result. This is called *preediting*, and an input
// method may provide feedback about this process by displaying the intermediate
// composition states as preedit text. To do so, the `GtkIMContext` will emit
// [signal@Gtk.IMContext::preedit-start], [signal@Gtk.IMContext::preedit-changed]
// and [signal@Gtk.IMContext::preedit-end] signals.
//
// For instance, the built-in GTK input method [class@Gtk.IMContextSimple]
// implements the input of arbitrary Unicode code points by holding down the
// &lt;kbd&gt;Control&lt;/kbd&gt; and &lt;kbd&gt;Shift&lt;/kbd&gt; keys and then typing &lt;kbd&gt;u&lt;/kbd&gt;
// followed by the hexadecimal digits of the code point. When releasing the
// &lt;kbd&gt;Control&lt;/kbd&gt; and &lt;kbd&gt;Shift&lt;/kbd&gt; keys, preediting ends and the
// character is inserted as text. For example,
//
//	Ctrl+Shift+u 2 0 A C
//
// results in the â‚¬ sign.
//
// Additional input methods can be made available for use by GTK widgets as
// loadable modules. An input method module is a small shared library which
// provides a `GIOExtension` for the extension point named "gtk-im-module".
//
// To connect a widget to the users preferred input method, you should use
// [class@Gtk.IMMulticontext].
type IMContext struct {
	gobject.Object
}

var xIMContextGLibType func() types.GType

func IMContextGLibType() types.GType {
	return xIMContextGLibType()
}

func IMContextNewFromInternalPtr(ptr uintptr) *IMContext {
	cls := &IMContext{}
	cls.Ptr = ptr
	return cls
}

var xIMContextDeleteSurrounding func(uintptr, int, int) bool

// Asks the widget that the input context is attached to delete
// characters around the cursor position by emitting the
// `::delete_surrounding` signal.
//
// Note that @offset and @n_chars are in characters not in bytes
// which differs from the usage other places in `GtkIMContext`.
//
// In order to use this function, you should first call
// [method@Gtk.IMContext.get_surrounding] to get the current context,
// and call this function immediately afterwards to make sure that you
// know what you are deleting. You should also account for the fact
// that even if the signal was handled, the input context might not
// have deleted all the characters that were requested to be deleted.
//
// This function is used by an input method that wants to make
// subsitutions in the existing text in response to new input.
// It is not useful for applications.
func (x *IMContext) DeleteSurrounding(OffsetVar int, NCharsVar int) bool {

	cret := xIMContextDeleteSurrounding(x.GoPointer(), OffsetVar, NCharsVar)
	return cret
}

var xIMContextFilterKey func(uintptr, bool, uintptr, uintptr, uint32, uint, gdk.ModifierType, int) bool

// Allow an input method to forward key press and release events
// to another input method without necessarily having a `GdkEvent`
// available.
func (x *IMContext) FilterKey(PressVar bool, SurfaceVar *gdk.Surface, DeviceVar *gdk.Device, TimeVar uint32, KeycodeVar uint, StateVar gdk.ModifierType, GroupVar int) bool {

	cret := xIMContextFilterKey(x.GoPointer(), PressVar, SurfaceVar.GoPointer(), DeviceVar.GoPointer(), TimeVar, KeycodeVar, StateVar, GroupVar)
	return cret
}

var xIMContextFilterKeypress func(uintptr, uintptr) bool

// Allow an input method to internally handle key press and release
// events.
//
// If this function returns %TRUE, then no further processing
// should be done for this key event.
func (x *IMContext) FilterKeypress(EventVar *gdk.Event) bool {

	cret := xIMContextFilterKeypress(x.GoPointer(), EventVar.GoPointer())
	return cret
}

var xIMContextFocusIn func(uintptr)

// Notify the input method that the widget to which this
// input context corresponds has gained focus.
//
// The input method may, for example, change the displayed
// feedback to reflect this change.
func (x *IMContext) FocusIn() {

	xIMContextFocusIn(x.GoPointer())

}

var xIMContextFocusOut func(uintptr)

// Notify the input method that the widget to which this
// input context corresponds has lost focus.
//
// The input method may, for example, change the displayed
// feedback or reset the contexts state to reflect this change.
func (x *IMContext) FocusOut() {

	xIMContextFocusOut(x.GoPointer())

}

var xIMContextGetPreeditString func(uintptr, string, **pango.AttrList, int)

// Retrieve the current preedit string for the input context,
// and a list of attributes to apply to the string.
//
// This string should be displayed inserted at the insertion point.
func (x *IMContext) GetPreeditString(StrVar string, AttrsVar **pango.AttrList, CursorPosVar int) {

	xIMContextGetPreeditString(x.GoPointer(), StrVar, AttrsVar, CursorPosVar)

}

var xIMContextGetSurrounding func(uintptr, string, int) bool

// Retrieves context around the insertion point.
//
// Input methods typically want context in order to constrain input text
// based on existing text; this is important for languages such as Thai
// where only some sequences of characters are allowed.
//
// This function is implemented by emitting the
// [signal@Gtk.IMContext::retrieve-surrounding] signal on the input method;
// in response to this signal, a widget should provide as much context as
// is available, up to an entire paragraph, by calling
// [method@Gtk.IMContext.set_surrounding].
//
// Note that there is no obligation for a widget to respond to the
// `::retrieve-surrounding` signal, so input methods must be prepared to
// function without context.
func (x *IMContext) GetSurrounding(TextVar string, CursorIndexVar int) bool {

	cret := xIMContextGetSurrounding(x.GoPointer(), TextVar, CursorIndexVar)
	return cret
}

var xIMContextGetSurroundingWithSelection func(uintptr, string, int, int) bool

// Retrieves context around the insertion point.
//
// Input methods typically want context in order to constrain input
// text based on existing text; this is important for languages such
// as Thai where only some sequences of characters are allowed.
//
// This function is implemented by emitting the
// [signal@Gtk.IMContext::retrieve-surrounding] signal on the input method;
// in response to this signal, a widget should provide as much context as
// is available, up to an entire paragraph, by calling
// [method@Gtk.IMContext.set_surrounding_with_selection].
//
// Note that there is no obligation for a widget to respond to the
// `::retrieve-surrounding` signal, so input methods must be prepared to
// function without context.
func (x *IMContext) GetSurroundingWithSelection(TextVar string, CursorIndexVar int, AnchorIndexVar int) bool {

	cret := xIMContextGetSurroundingWithSelection(x.GoPointer(), TextVar, CursorIndexVar, AnchorIndexVar)
	return cret
}

var xIMContextReset func(uintptr)

// Notify the input method that a change such as a change in cursor
// position has been made.
//
// This will typically cause the input method to clear the preedit state.
func (x *IMContext) Reset() {

	xIMContextReset(x.GoPointer())

}

var xIMContextSetClientWidget func(uintptr, uintptr)

// Set the client widget for the input context.
//
// This is the `GtkWidget` holding the input focus. This widget is
// used in order to correctly position status windows, and may
// also be used for purposes internal to the input method.
func (x *IMContext) SetClientWidget(WidgetVar *Widget) {

	xIMContextSetClientWidget(x.GoPointer(), WidgetVar.GoPointer())

}

var xIMContextSetCursorLocation func(uintptr, *gdk.Rectangle)

// Notify the input method that a change in cursor
// position has been made.
//
// The location is relative to the client widget.
func (x *IMContext) SetCursorLocation(AreaVar *gdk.Rectangle) {

	xIMContextSetCursorLocation(x.GoPointer(), AreaVar)

}

var xIMContextSetSurrounding func(uintptr, string, int, int)

// Sets surrounding context around the insertion point and preedit
// string.
//
// This function is expected to be called in response to the
// [signal@Gtk.IMContext::retrieve-surrounding] signal, and will
// likely have no effect if called at other times.
func (x *IMContext) SetSurrounding(TextVar string, LenVar int, CursorIndexVar int) {

	xIMContextSetSurrounding(x.GoPointer(), TextVar, LenVar, CursorIndexVar)

}

var xIMContextSetSurroundingWithSelection func(uintptr, string, int, int, int)

// Sets surrounding context around the insertion point and preedit
// string. This function is expected to be called in response to the
// [signal@Gtk.IMContext::retrieve_surrounding] signal, and will likely
// have no effect if called at other times.
func (x *IMContext) SetSurroundingWithSelection(TextVar string, LenVar int, CursorIndexVar int, AnchorIndexVar int) {

	xIMContextSetSurroundingWithSelection(x.GoPointer(), TextVar, LenVar, CursorIndexVar, AnchorIndexVar)

}

var xIMContextSetUsePreedit func(uintptr, bool)

// Sets whether the IM context should use the preedit string
// to display feedback.
//
// If @use_preedit is %FALSE (default is %TRUE), then the IM context
// may use some other method to display feedback, such as displaying
// it in a child of the root window.
func (x *IMContext) SetUsePreedit(UsePreeditVar bool) {

	xIMContextSetUsePreedit(x.GoPointer(), UsePreeditVar)

}

func (c *IMContext) GoPointer() uintptr {
	return c.Ptr
}

func (c *IMContext) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// The ::commit signal is emitted when a complete input sequence
// has been entered by the user.
//
// If the commit comes after a preediting sequence, the
// ::commit signal is emitted after ::preedit-end.
//
// This can be a single character immediately after a key press or
// the final result of preediting.
func (x *IMContext) ConnectCommit(cb *func(IMContext, string)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "commit", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, StrVarp string) {
		fa := IMContext{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, StrVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "commit", cbRefPtr)
}

// The ::delete-surrounding signal is emitted when the input method
// needs to delete all or part of the context surrounding the cursor.
func (x *IMContext) ConnectDeleteSurrounding(cb *func(IMContext, int, int) bool) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "delete-surrounding", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, OffsetVarp int, NCharsVarp int) bool {
		fa := IMContext{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa, OffsetVarp, NCharsVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "delete-surrounding", cbRefPtr)
}

// The ::preedit-changed signal is emitted whenever the preedit sequence
// currently being entered has changed.
//
// It is also emitted at the end of a preedit sequence, in which case
// [method@Gtk.IMContext.get_preedit_string] returns the empty string.
func (x *IMContext) ConnectPreeditChanged(cb *func(IMContext)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "preedit-changed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := IMContext{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "preedit-changed", cbRefPtr)
}

// The ::preedit-end signal is emitted when a preediting sequence
// has been completed or canceled.
func (x *IMContext) ConnectPreeditEnd(cb *func(IMContext)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "preedit-end", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := IMContext{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "preedit-end", cbRefPtr)
}

// The ::preedit-start signal is emitted when a new preediting sequence
// starts.
func (x *IMContext) ConnectPreeditStart(cb *func(IMContext)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "preedit-start", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := IMContext{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "preedit-start", cbRefPtr)
}

// The ::retrieve-surrounding signal is emitted when the input method
// requires the context surrounding the cursor.
//
// The callback should set the input method surrounding context by
// calling the [method@Gtk.IMContext.set_surrounding] method.
func (x *IMContext) ConnectRetrieveSurrounding(cb *func(IMContext) bool) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "retrieve-surrounding", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) bool {
		fa := IMContext{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "retrieve-surrounding", cbRefPtr)
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xIMContextGLibType, lib, "gtk_im_context_get_type")

	core.PuregoSafeRegister(&xIMContextDeleteSurrounding, lib, "gtk_im_context_delete_surrounding")
	core.PuregoSafeRegister(&xIMContextFilterKey, lib, "gtk_im_context_filter_key")
	core.PuregoSafeRegister(&xIMContextFilterKeypress, lib, "gtk_im_context_filter_keypress")
	core.PuregoSafeRegister(&xIMContextFocusIn, lib, "gtk_im_context_focus_in")
	core.PuregoSafeRegister(&xIMContextFocusOut, lib, "gtk_im_context_focus_out")
	core.PuregoSafeRegister(&xIMContextGetPreeditString, lib, "gtk_im_context_get_preedit_string")
	core.PuregoSafeRegister(&xIMContextGetSurrounding, lib, "gtk_im_context_get_surrounding")
	core.PuregoSafeRegister(&xIMContextGetSurroundingWithSelection, lib, "gtk_im_context_get_surrounding_with_selection")
	core.PuregoSafeRegister(&xIMContextReset, lib, "gtk_im_context_reset")
	core.PuregoSafeRegister(&xIMContextSetClientWidget, lib, "gtk_im_context_set_client_widget")
	core.PuregoSafeRegister(&xIMContextSetCursorLocation, lib, "gtk_im_context_set_cursor_location")
	core.PuregoSafeRegister(&xIMContextSetSurrounding, lib, "gtk_im_context_set_surrounding")
	core.PuregoSafeRegister(&xIMContextSetSurroundingWithSelection, lib, "gtk_im_context_set_surrounding_with_selection")
	core.PuregoSafeRegister(&xIMContextSetUsePreedit, lib, "gtk_im_context_set_use_preedit")

}
