// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// The list of virtual functions for the `GtkSymbolicPaintable` interface.
// No function must be implemented, default implementations exist for each one.
type SymbolicPaintableInterface struct {
	GIface uintptr
}

func (x *SymbolicPaintableInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkSymbolicPaintable` is an interface that support symbolic colors in
// paintables.
//
// `GdkPaintable`s implementing the interface will have the
// [vfunc@Gtk.SymbolicPaintable.snapshot_symbolic] function called and
// have the colors for drawing symbolic icons passed. At least 4 colors are guaranteed
// to be passed every time.
//
// These 4 colors are the foreground color, and the colors to use for errors, warnings
// and success information in that order.
//
// More colors may be added in the future.
type SymbolicPaintable interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	SnapshotSymbolic(SnapshotVar *gdk.Snapshot, WidthVar float64, HeightVar float64, ColorsVar []gdk.RGBA, NColorsVar uint)
}

var xSymbolicPaintableGLibType func() types.GType

func SymbolicPaintableGLibType() types.GType {
	return xSymbolicPaintableGLibType()
}

type SymbolicPaintableBase struct {
	Ptr uintptr
}

func (x *SymbolicPaintableBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *SymbolicPaintableBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Snapshots the paintable with the given colors.
//
// If less than 4 colors are provided, GTK will pad the array with default
// colors.
func (x *SymbolicPaintableBase) SnapshotSymbolic(SnapshotVar *gdk.Snapshot, WidthVar float64, HeightVar float64, ColorsVar []gdk.RGBA, NColorsVar uint) {

	XGtkSymbolicPaintableSnapshotSymbolic(x.GoPointer(), SnapshotVar.GoPointer(), WidthVar, HeightVar, ColorsVar, NColorsVar)

}

var XGtkSymbolicPaintableSnapshotSymbolic func(uintptr, uintptr, float64, float64, []gdk.RGBA, uint)

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xSymbolicPaintableGLibType, lib, "gtk_symbolic_paintable_get_type")

	core.PuregoSafeRegister(&XGtkSymbolicPaintableSnapshotSymbolic, lib, "gtk_symbolic_paintable_snapshot_symbolic")

}
