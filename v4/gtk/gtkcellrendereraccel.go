// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// The available modes for [property@Gtk.CellRendererAccel:accel-mode].
type CellRendererAccelMode int

var xCellRendererAccelModeGLibType func() types.GType

func CellRendererAccelModeGLibType() types.GType {
	return xCellRendererAccelModeGLibType()
}

const (

	// GTK accelerators mode
	CellRendererAccelModeGtkValue CellRendererAccelMode = 0
	// Other accelerator mode
	CellRendererAccelModeOtherValue CellRendererAccelMode = 1
)

// Renders a keyboard accelerator in a cell
//
// `GtkCellRendererAccel` displays a keyboard accelerator (i.e. a key
// combination like `Control + a`). If the cell renderer is editable,
// the accelerator can be changed by simply typing the new combination.
type CellRendererAccel struct {
	CellRendererText
}

var xCellRendererAccelGLibType func() types.GType

func CellRendererAccelGLibType() types.GType {
	return xCellRendererAccelGLibType()
}

func CellRendererAccelNewFromInternalPtr(ptr uintptr) *CellRendererAccel {
	cls := &CellRendererAccel{}
	cls.Ptr = ptr
	return cls
}

var xNewCellRendererAccel func() uintptr

// Creates a new `GtkCellRendererAccel`.
func NewCellRendererAccel() *CellRendererAccel {
	var cls *CellRendererAccel

	cret := xNewCellRendererAccel()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &CellRendererAccel{}
	cls.Ptr = cret
	return cls
}

func (c *CellRendererAccel) GoPointer() uintptr {
	return c.Ptr
}

func (c *CellRendererAccel) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Gets emitted when the user has removed the accelerator.
func (x *CellRendererAccel) ConnectAccelCleared(cb *func(CellRendererAccel, string)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "accel-cleared", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, PathStringVarp string) {
		fa := CellRendererAccel{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, PathStringVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "accel-cleared", cbRefPtr)
}

// Gets emitted when the user has selected a new accelerator.
func (x *CellRendererAccel) ConnectAccelEdited(cb *func(CellRendererAccel, string, uint, gdk.ModifierType, uint)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "accel-edited", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, PathStringVarp string, AccelKeyVarp uint, AccelModsVarp gdk.ModifierType, HardwareKeycodeVarp uint) {
		fa := CellRendererAccel{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, PathStringVarp, AccelKeyVarp, AccelModsVarp, HardwareKeycodeVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "accel-edited", cbRefPtr)
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xCellRendererAccelModeGLibType, lib, "gtk_cell_renderer_accel_mode_get_type")

	core.PuregoSafeRegister(&xCellRendererAccelGLibType, lib, "gtk_cell_renderer_accel_get_type")

	core.PuregoSafeRegister(&xNewCellRendererAccel, lib, "gtk_cell_renderer_accel_new")

}
