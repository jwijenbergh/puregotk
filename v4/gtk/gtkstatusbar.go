// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// A `GtkStatusbar` widget is usually placed along the bottom of an application's
// main [class@Gtk.Window].
//
// ![An example GtkStatusbar](statusbar.png)
//
// A `GtkStatusBar` may provide a regular commentary of the application's
// status (as is usually the case in a web browser, for example), or may be
// used to simply output a message when the status changes, (when an upload
// is complete in an FTP client, for example).
//
// Status bars in GTK maintain a stack of messages. The message at
// the top of the each bar’s stack is the one that will currently be displayed.
//
// Any messages added to a statusbar’s stack must specify a context id that
// is used to uniquely identify the source of a message. This context id can
// be generated by [method@Gtk.Statusbar.get_context_id], given a message and
// the statusbar that it will be added to. Note that messages are stored in a
// stack, and when choosing which message to display, the stack structure is
// adhered to, regardless of the context identifier of a message.
//
// One could say that a statusbar maintains one stack of messages for
// display purposes, but allows multiple message producers to maintain
// sub-stacks of the messages they produced (via context ids).
//
// Status bars are created using [ctor@Gtk.Statusbar.new].
//
// Messages are added to the bar’s stack with [method@Gtk.Statusbar.push].
//
// The message at the top of the stack can be removed using
// [method@Gtk.Statusbar.pop]. A message can be removed from anywhere in the
// stack if its message id was recorded at the time it was added. This is done
// using [method@Gtk.Statusbar.remove].
//
// ## CSS node
//
// `GtkStatusbar` has a single CSS node with name `statusbar`.
type Statusbar struct {
	Widget
}

var xStatusbarGLibType func() types.GType

func StatusbarGLibType() types.GType {
	return xStatusbarGLibType()
}

func StatusbarNewFromInternalPtr(ptr uintptr) *Statusbar {
	cls := &Statusbar{}
	cls.Ptr = ptr
	return cls
}

var xNewStatusbar func() uintptr

// Creates a new `GtkStatusbar` ready for messages.
func NewStatusbar() *Statusbar {
	var cls *Statusbar

	cret := xNewStatusbar()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Statusbar{}
	cls.Ptr = cret
	return cls
}

var xStatusbarGetContextId func(uintptr, string) uint

// Returns a new context identifier, given a description
// of the actual context.
//
// Note that the description is not shown in the UI.
func (x *Statusbar) GetContextId(ContextDescriptionVar string) uint {

	cret := xStatusbarGetContextId(x.GoPointer(), ContextDescriptionVar)
	return cret
}

var xStatusbarPop func(uintptr, uint)

// Removes the first message in the `GtkStatusbar`’s stack
// with the given context id.
//
// Note that this may not change the displayed message,
// if the message at the top of the stack has a different
// context id.
func (x *Statusbar) Pop(ContextIdVar uint) {

	xStatusbarPop(x.GoPointer(), ContextIdVar)

}

var xStatusbarPush func(uintptr, uint, string) uint

// Pushes a new message onto a statusbar’s stack.
func (x *Statusbar) Push(ContextIdVar uint, TextVar string) uint {

	cret := xStatusbarPush(x.GoPointer(), ContextIdVar, TextVar)
	return cret
}

var xStatusbarRemove func(uintptr, uint, uint)

// Forces the removal of a message from a statusbar’s stack.
// The exact @context_id and @message_id must be specified.
func (x *Statusbar) Remove(ContextIdVar uint, MessageIdVar uint) {

	xStatusbarRemove(x.GoPointer(), ContextIdVar, MessageIdVar)

}

var xStatusbarRemoveAll func(uintptr, uint)

// Forces the removal of all messages from a statusbar's
// stack with the exact @context_id.
func (x *Statusbar) RemoveAll(ContextIdVar uint) {

	xStatusbarRemoveAll(x.GoPointer(), ContextIdVar)

}

func (c *Statusbar) GoPointer() uintptr {
	return c.Ptr
}

func (c *Statusbar) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted whenever a new message is popped off a statusbar's stack.
func (x *Statusbar) ConnectTextPopped(cb *func(Statusbar, uint, string)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "text-popped", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, ContextIdVarp uint, TextVarp string) {
		fa := Statusbar{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, ContextIdVarp, TextVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "text-popped", cbRefPtr)
}

// Emitted whenever a new message gets pushed onto a statusbar's stack.
func (x *Statusbar) ConnectTextPushed(cb *func(Statusbar, uint, string)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "text-pushed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, ContextIdVarp uint, TextVarp string) {
		fa := Statusbar{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, ContextIdVarp, TextVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "text-pushed", cbRefPtr)
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *Statusbar) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *Statusbar) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *Statusbar) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *Statusbar) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *Statusbar) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Statusbar) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *Statusbar) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Statusbar) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *Statusbar) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Statusbar) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *Statusbar) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xStatusbarGLibType, lib, "gtk_statusbar_get_type")

	core.PuregoSafeRegister(&xNewStatusbar, lib, "gtk_statusbar_new")

	core.PuregoSafeRegister(&xStatusbarGetContextId, lib, "gtk_statusbar_get_context_id")
	core.PuregoSafeRegister(&xStatusbarPop, lib, "gtk_statusbar_pop")
	core.PuregoSafeRegister(&xStatusbarPush, lib, "gtk_statusbar_push")
	core.PuregoSafeRegister(&xStatusbarRemove, lib, "gtk_statusbar_remove")
	core.PuregoSafeRegister(&xStatusbarRemoveAll, lib, "gtk_statusbar_remove_all")

}
