// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// `GtkSettings` provides a mechanism to share global settings between
// applications.
//
// On the X window system, this sharing is realized by an
// [XSettings](http://www.freedesktop.org/wiki/Specifications/xsettings-spec)
// manager that is usually part of the desktop environment, along with
// utilities that let the user change these settings.
//
// On Wayland, the settings are obtained either via a settings portal,
// or by reading desktop settings from DConf.
//
// In the absence of these sharing mechanisms, GTK reads default values for
// settings from `settings.ini` files in `/etc/gtk-4.0`, `$XDG_CONFIG_DIRS/gtk-4.0`
// and `$XDG_CONFIG_HOME/gtk-4.0`. These files must be valid key files (see
// `GKeyFile`), and have a section called Settings. Themes can also provide
// default values for settings by installing a `settings.ini` file
// next to their `gtk.css` file.
//
// Applications can override system-wide settings by setting the property
// of the `GtkSettings` object with g_object_set(). This should be restricted
// to special cases though; `GtkSettings` are not meant as an application
// configuration facility.
//
// There is one `GtkSettings` instance per display. It can be obtained with
// [func@Gtk.Settings.get_for_display], but in many cases, it is more
// convenient to use [method@Gtk.Widget.get_settings].
type Settings struct {
	gobject.Object
}

var xSettingsGLibType func() types.GType

func SettingsGLibType() types.GType {
	return xSettingsGLibType()
}

func SettingsNewFromInternalPtr(ptr uintptr) *Settings {
	cls := &Settings{}
	cls.Ptr = ptr
	return cls
}

var xSettingsResetProperty func(uintptr, string)

// Undoes the effect of calling g_object_set() to install an
// application-specific value for a setting.
//
// After this call, the setting will again follow the session-wide
// value for this setting.
func (x *Settings) ResetProperty(NameVar string) {

	xSettingsResetProperty(x.GoPointer(), NameVar)

}

func (c *Settings) GoPointer() uintptr {
	return c.Ptr
}

func (c *Settings) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

var xSettingsGetDefault func() uintptr

// Gets the `GtkSettings` object for the default display, creating
// it if necessary.
//
// See [func@Gtk.Settings.get_for_display].
func SettingsGetDefault() *Settings {
	var cls *Settings

	cret := xSettingsGetDefault()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Settings{}
	cls.Ptr = cret
	return cls
}

var xSettingsGetForDisplay func(uintptr) uintptr

// Gets the `GtkSettings` object for @display, creating it if necessary.
func SettingsGetForDisplay(DisplayVar *gdk.Display) *Settings {
	var cls *Settings

	cret := xSettingsGetForDisplay(DisplayVar.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Settings{}
	cls.Ptr = cret
	return cls
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xSettingsGLibType, lib, "gtk_settings_get_type")

	core.PuregoSafeRegister(&xSettingsResetProperty, lib, "gtk_settings_reset_property")

	core.PuregoSafeRegister(&xSettingsGetDefault, lib, "gtk_settings_get_default")
	core.PuregoSafeRegister(&xSettingsGetForDisplay, lib, "gtk_settings_get_for_display")

}
