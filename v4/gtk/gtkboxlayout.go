// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type BoxLayoutClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *BoxLayoutClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// `GtkBoxLayout` is a layout manager that arranges children in a single
// row or column.
//
// Whether it is a row or column depends on the value of its
// [property@Gtk.Orientable:orientation] property. Within the other dimension
// all children all allocated the same size. The `GtkBoxLayout` will respect
// the [property@Gtk.Widget:halign] and [property@Gtk.Widget:valign]
// properties of each child widget.
//
// If you want all children to be assigned the same size, you can use
// the [property@Gtk.BoxLayout:homogeneous] property.
//
// If you want to specify the amount of space placed between each child,
// you can use the [property@Gtk.BoxLayout:spacing] property.
type BoxLayout struct {
	LayoutManager
}

var xBoxLayoutGLibType func() types.GType

func BoxLayoutGLibType() types.GType {
	return xBoxLayoutGLibType()
}

func BoxLayoutNewFromInternalPtr(ptr uintptr) *BoxLayout {
	cls := &BoxLayout{}
	cls.Ptr = ptr
	return cls
}

var xNewBoxLayout func(Orientation) uintptr

// Creates a new `GtkBoxLayout`.
func NewBoxLayout(OrientationVar Orientation) *BoxLayout {
	var cls *BoxLayout

	cret := xNewBoxLayout(OrientationVar)

	if cret == 0 {
		return nil
	}
	cls = &BoxLayout{}
	cls.Ptr = cret
	return cls
}

var xBoxLayoutGetBaselinePosition func(uintptr) BaselinePosition

// Gets the value set by gtk_box_layout_set_baseline_position().
func (x *BoxLayout) GetBaselinePosition() BaselinePosition {

	cret := xBoxLayoutGetBaselinePosition(x.GoPointer())
	return cret
}

var xBoxLayoutGetHomogeneous func(uintptr) bool

// Returns whether the layout is set to be homogeneous.
func (x *BoxLayout) GetHomogeneous() bool {

	cret := xBoxLayoutGetHomogeneous(x.GoPointer())
	return cret
}

var xBoxLayoutGetSpacing func(uintptr) uint

// Returns the space that @box_layout puts between children.
func (x *BoxLayout) GetSpacing() uint {

	cret := xBoxLayoutGetSpacing(x.GoPointer())
	return cret
}

var xBoxLayoutSetBaselinePosition func(uintptr, BaselinePosition)

// Sets the baseline position of a box layout.
//
// The baseline position affects only horizontal boxes with at least one
// baseline aligned child. If there is more vertical space available than
// requested, and the baseline is not allocated by the parent then the
// given @position is used to allocate the baseline within the extra
// space available.
func (x *BoxLayout) SetBaselinePosition(PositionVar BaselinePosition) {

	xBoxLayoutSetBaselinePosition(x.GoPointer(), PositionVar)

}

var xBoxLayoutSetHomogeneous func(uintptr, bool)

// Sets whether the box layout will allocate the same
// size to all children.
func (x *BoxLayout) SetHomogeneous(HomogeneousVar bool) {

	xBoxLayoutSetHomogeneous(x.GoPointer(), HomogeneousVar)

}

var xBoxLayoutSetSpacing func(uintptr, uint)

// Sets how much spacing to put between children.
func (x *BoxLayout) SetSpacing(SpacingVar uint) {

	xBoxLayoutSetSpacing(x.GoPointer(), SpacingVar)

}

func (c *BoxLayout) GoPointer() uintptr {
	return c.Ptr
}

func (c *BoxLayout) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the orientation of the @orientable.
func (x *BoxLayout) GetOrientation() Orientation {

	cret := XGtkOrientableGetOrientation(x.GoPointer())
	return cret
}

// Sets the orientation of the @orientable.
func (x *BoxLayout) SetOrientation(OrientationVar Orientation) {

	XGtkOrientableSetOrientation(x.GoPointer(), OrientationVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xBoxLayoutGLibType, lib, "gtk_box_layout_get_type")

	core.PuregoSafeRegister(&xNewBoxLayout, lib, "gtk_box_layout_new")

	core.PuregoSafeRegister(&xBoxLayoutGetBaselinePosition, lib, "gtk_box_layout_get_baseline_position")
	core.PuregoSafeRegister(&xBoxLayoutGetHomogeneous, lib, "gtk_box_layout_get_homogeneous")
	core.PuregoSafeRegister(&xBoxLayoutGetSpacing, lib, "gtk_box_layout_get_spacing")
	core.PuregoSafeRegister(&xBoxLayoutSetBaselinePosition, lib, "gtk_box_layout_set_baseline_position")
	core.PuregoSafeRegister(&xBoxLayoutSetHomogeneous, lib, "gtk_box_layout_set_homogeneous")
	core.PuregoSafeRegister(&xBoxLayoutSetSpacing, lib, "gtk_box_layout_set_spacing")

}
