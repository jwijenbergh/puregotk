// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

// A `GtkSpinner` widget displays an icon-size spinning animation.
//
// It is often used as an alternative to a [class@Gtk.ProgressBar]
// for displaying indefinite activity, instead of actual progress.
//
// ![An example GtkSpinner](spinner.png)
//
// To start the animation, use [method@Gtk.Spinner.start], to stop it
// use [method@Gtk.Spinner.stop].
//
// # CSS nodes
//
// `GtkSpinner` has a single CSS node with the name spinner.
// When the animation is active, the :checked pseudoclass is
// added to this node.
type Spinner struct {
	Widget
}

func SpinnerNewFromInternalPtr(ptr uintptr) *Spinner {
	cls := &Spinner{}
	cls.Ptr = ptr
	return cls
}

var xNewSpinner func() uintptr

// Returns a new spinner widget. Not yet started.
func NewSpinner() *Spinner {
	var cls *Spinner

	cret := xNewSpinner()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Spinner{}
	cls.Ptr = cret
	return cls
}

var xSpinnerGetSpinning func(uintptr) bool

// Returns whether the spinner is spinning.
func (x *Spinner) GetSpinning() bool {

	cret := xSpinnerGetSpinning(x.GoPointer())
	return cret
}

var xSpinnerSetSpinning func(uintptr, bool)

// Sets the activity of the spinner.
func (x *Spinner) SetSpinning(SpinningVar bool) {

	xSpinnerSetSpinning(x.GoPointer(), SpinningVar)

}

var xSpinnerStart func(uintptr)

// Starts the animation of the spinner.
func (x *Spinner) Start() {

	xSpinnerStart(x.GoPointer())

}

var xSpinnerStop func(uintptr)

// Stops the animation of the spinner.
func (x *Spinner) Stop() {

	xSpinnerStop(x.GoPointer())

}

func (c *Spinner) GoPointer() uintptr {
	return c.Ptr
}

func (c *Spinner) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *Spinner) GetAccessibleRole() AccessibleRole {

	cret := XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *Spinner) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *Spinner) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *Spinner) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *Spinner) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Spinner) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []AccessibleProperty, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *Spinner) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Spinner) UpdateRelationValue(NRelationsVar int, RelationsVar []AccessibleRelation, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *Spinner) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Spinner) UpdateStateValue(NStatesVar int, StatesVar []AccessibleState, ValuesVar []gobject.Value) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *Spinner) GetBuildableId() string {

	cret := XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewSpinner, lib, "gtk_spinner_new")

	core.PuregoSafeRegister(&xSpinnerGetSpinning, lib, "gtk_spinner_get_spinning")
	core.PuregoSafeRegister(&xSpinnerSetSpinning, lib, "gtk_spinner_set_spinning")
	core.PuregoSafeRegister(&xSpinnerStart, lib, "gtk_spinner_start")
	core.PuregoSafeRegister(&xSpinnerStop, lib, "gtk_spinner_stop")

}
