// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type SpinnerPaintableClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *SpinnerPaintableClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A paintable showing a loading spinner.
//
// &lt;picture&gt;
//
//	&lt;source srcset="spinner-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="spinner.png" alt="spinner"&gt;
//
// &lt;/picture&gt;
//
// `AdwSpinnerPaintable` size varies depending on the available space, but is
// capped at 64Ã—64 pixels.
//
// To be able to animate, `AdwSpinnerPaintable` needs a widget. It will be
// animated according to that widget's frame clock, and only if that widget is
// mapped. Ideally it should be the same widget the paintable is displayed in,
// but that's not a requirement.
//
// Most applications should be using [class@Spinner] instead.
// `AdwSpinnerPaintable` is provided for the cases where using a widget is
// impractical or impossible, such as [property@StatusPage:paintable]:
//
// ```xml
// &lt;object class="AdwStatusPage" id="status_page"&gt;
//
//	&lt;property name="paintable"&gt;
//	  &lt;object class="AdwSpinnerPaintable"&gt;
//	    &lt;property name="widget"&gt;status_page&lt;/property&gt;
//	  &lt;/object&gt;
//	&lt;/property&gt;
//	&lt;!-- ... --&gt;
//
// &lt;/object&gt;
// ```
type SpinnerPaintable struct {
	gobject.Object
}

var xSpinnerPaintableGLibType func() types.GType

func SpinnerPaintableGLibType() types.GType {
	return xSpinnerPaintableGLibType()
}

func SpinnerPaintableNewFromInternalPtr(ptr uintptr) *SpinnerPaintable {
	cls := &SpinnerPaintable{}
	cls.Ptr = ptr
	return cls
}

var xNewSpinnerPaintable func(uintptr) uintptr

// Creates a new `AdwSpinnerPaintable` for @widget.
func NewSpinnerPaintable(WidgetVar *gtk.Widget) *SpinnerPaintable {
	var cls *SpinnerPaintable

	cret := xNewSpinnerPaintable(WidgetVar.GoPointer())

	if cret == 0 {
		return nil
	}
	cls = &SpinnerPaintable{}
	cls.Ptr = cret
	return cls
}

var xSpinnerPaintableGetWidget func(uintptr) uintptr

// Gets the widget used for frame clock.
func (x *SpinnerPaintable) GetWidget() *gtk.Widget {
	var cls *gtk.Widget

	cret := xSpinnerPaintableGetWidget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Widget{}
	cls.Ptr = cret
	return cls
}

var xSpinnerPaintableSetWidget func(uintptr, uintptr)

// Sets the widget used for frame clock.
func (x *SpinnerPaintable) SetWidget(WidgetVar *gtk.Widget) {

	xSpinnerPaintableSetWidget(x.GoPointer(), WidgetVar.GoPointer())

}

func (c *SpinnerPaintable) GoPointer() uintptr {
	return c.Ptr
}

func (c *SpinnerPaintable) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Compute a concrete size for the `GdkPaintable`.
//
// Applies the sizing algorithm outlined in the
// [CSS Image spec](https://drafts.csswg.org/css-images-3/#default-sizing)
// to the given @paintable. See that link for more details.
//
// It is not necessary to call this function when both @specified_width
// and @specified_height are known, but it is useful to call this
// function in GtkWidget:measure implementations to compute the
// other dimension when only one dimension is given.
func (x *SpinnerPaintable) ComputeConcreteSize(SpecifiedWidthVar float64, SpecifiedHeightVar float64, DefaultWidthVar float64, DefaultHeightVar float64, ConcreteWidthVar float64, ConcreteHeightVar float64) {

	gdk.XGdkPaintableComputeConcreteSize(x.GoPointer(), SpecifiedWidthVar, SpecifiedHeightVar, DefaultWidthVar, DefaultHeightVar, ConcreteWidthVar, ConcreteHeightVar)

}

// Gets an immutable paintable for the current contents displayed by @paintable.
//
// This is useful when you want to retain the current state of an animation,
// for example to take a screenshot of a running animation.
//
// If the @paintable is already immutable, it will return itself.
func (x *SpinnerPaintable) GetCurrentImage() *gdk.PaintableBase {
	var cls *gdk.PaintableBase

	cret := gdk.XGdkPaintableGetCurrentImage(x.GoPointer())

	if cret == 0 {
		return nil
	}
	cls = &gdk.PaintableBase{}
	cls.Ptr = cret
	return cls
}

// Get flags for the paintable.
//
// This is oftentimes useful for optimizations.
//
// See [flags@Gdk.PaintableFlags] for the flags and what they mean.
func (x *SpinnerPaintable) GetFlags() gdk.PaintableFlags {

	cret := gdk.XGdkPaintableGetFlags(x.GoPointer())
	return cret
}

// Gets the preferred aspect ratio the @paintable would like to be displayed at.
//
// The aspect ratio is the width divided by the height, so a value of 0.5
// means that the @paintable prefers to be displayed twice as high as it
// is wide. Consumers of this interface can use this to preserve aspect
// ratio when displaying the paintable.
//
// This is a purely informational value and does not in any way limit the
// values that may be passed to [method@Gdk.Paintable.snapshot].
//
// Usually when a @paintable returns nonzero values from
// [method@Gdk.Paintable.get_intrinsic_width] and
// [method@Gdk.Paintable.get_intrinsic_height] the aspect ratio
// should conform to those values, though that is not required.
//
// If the @paintable does not have a preferred aspect ratio,
// it returns 0. Negative values are never returned.
func (x *SpinnerPaintable) GetIntrinsicAspectRatio() float64 {

	cret := gdk.XGdkPaintableGetIntrinsicAspectRatio(x.GoPointer())
	return cret
}

// Gets the preferred height the @paintable would like to be displayed at.
//
// Consumers of this interface can use this to reserve enough space to draw
// the paintable.
//
// This is a purely informational value and does not in any way limit the
// values that may be passed to [method@Gdk.Paintable.snapshot].
//
// If the @paintable does not have a preferred height, it returns 0.
// Negative values are never returned.
func (x *SpinnerPaintable) GetIntrinsicHeight() int {

	cret := gdk.XGdkPaintableGetIntrinsicHeight(x.GoPointer())
	return cret
}

// Gets the preferred width the @paintable would like to be displayed at.
//
// Consumers of this interface can use this to reserve enough space to draw
// the paintable.
//
// This is a purely informational value and does not in any way limit the
// values that may be passed to [method@Gdk.Paintable.snapshot].
//
// If the @paintable does not have a preferred width, it returns 0.
// Negative values are never returned.
func (x *SpinnerPaintable) GetIntrinsicWidth() int {

	cret := gdk.XGdkPaintableGetIntrinsicWidth(x.GoPointer())
	return cret
}

// Called by implementations of `GdkPaintable` to invalidate their contents.
//
// Unless the contents are invalidated, implementations must guarantee that
// multiple calls of [method@Gdk.Paintable.snapshot] produce the same output.
//
// This function will emit the [signal@Gdk.Paintable::invalidate-contents]
// signal.
//
// If a @paintable reports the %GDK_PAINTABLE_STATIC_CONTENTS flag,
// it must not call this function.
func (x *SpinnerPaintable) InvalidateContents() {

	gdk.XGdkPaintableInvalidateContents(x.GoPointer())

}

// Called by implementations of `GdkPaintable` to invalidate their size.
//
// As long as the size is not invalidated, @paintable must return the same
// values for its intrinsic width, height and aspect ratio.
//
// This function will emit the [signal@Gdk.Paintable::invalidate-size]
// signal.
//
// If a @paintable reports the %GDK_PAINTABLE_STATIC_SIZE flag,
// it must not call this function.
func (x *SpinnerPaintable) InvalidateSize() {

	gdk.XGdkPaintableInvalidateSize(x.GoPointer())

}

// Snapshots the given paintable with the given @width and @height.
//
// The paintable is drawn at the current (0,0) offset of the @snapshot.
// If @width and @height are not larger than zero, this function will
// do nothing.
func (x *SpinnerPaintable) Snapshot(SnapshotVar *gdk.Snapshot, WidthVar float64, HeightVar float64) {

	gdk.XGdkPaintableSnapshot(x.GoPointer(), SnapshotVar.GoPointer(), WidthVar, HeightVar)

}

// Snapshots the paintable with the given colors.
//
// If less than 4 colors are provided, GTK will pad the array with default
// colors.
func (x *SpinnerPaintable) SnapshotSymbolic(SnapshotVar *gdk.Snapshot, WidthVar float64, HeightVar float64, ColorsVar []gdk.RGBA, NColorsVar uint) {

	gtk.XGtkSymbolicPaintableSnapshotSymbolic(x.GoPointer(), SnapshotVar.GoPointer(), WidthVar, HeightVar, ColorsVar, NColorsVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xSpinnerPaintableGLibType, lib, "adw_spinner_paintable_get_type")

	core.PuregoSafeRegister(&xNewSpinnerPaintable, lib, "adw_spinner_paintable_new")

	core.PuregoSafeRegister(&xSpinnerPaintableGetWidget, lib, "adw_spinner_paintable_get_widget")
	core.PuregoSafeRegister(&xSpinnerPaintableSetWidget, lib, "adw_spinner_paintable_set_widget")

}
