// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type PreferencesPageClass struct {
	_ structs.HostLayout

	ParentClass uintptr

	Padding [4]uintptr
}

func (x *PreferencesPageClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A page from [class@PreferencesDialog].
//
// &lt;picture&gt;
//
//	&lt;source srcset="preferences-page-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="preferences-page.png" alt="preferences-page"&gt;
//
// &lt;/picture&gt;
//
// The `AdwPreferencesPage` widget gathers preferences groups into a single page
// of a preferences window.
//
// ## CSS nodes
//
// `AdwPreferencesPage` has a single CSS node with name `preferencespage`.
//
// ## Accessibility
//
// `AdwPreferencesPage` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.
type PreferencesPage struct {
	gtk.Widget
}

var xPreferencesPageGLibType func() types.GType

func PreferencesPageGLibType() types.GType {
	return xPreferencesPageGLibType()
}

func PreferencesPageNewFromInternalPtr(ptr uintptr) *PreferencesPage {
	cls := &PreferencesPage{}
	cls.Ptr = ptr
	return cls
}

var xNewPreferencesPage func() uintptr

// Creates a new `AdwPreferencesPage`.
func NewPreferencesPage() *PreferencesPage {
	var cls *PreferencesPage

	cret := xNewPreferencesPage()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &PreferencesPage{}
	cls.Ptr = cret
	return cls
}

var xPreferencesPageAdd func(uintptr, uintptr)

// Adds a preferences group to @self.
func (x *PreferencesPage) Add(GroupVar *PreferencesGroup) {

	xPreferencesPageAdd(x.GoPointer(), GroupVar.GoPointer())

}

var xPreferencesPageGetDescription func(uintptr) string

// Gets the description of @self.
func (x *PreferencesPage) GetDescription() string {

	cret := xPreferencesPageGetDescription(x.GoPointer())
	return cret
}

var xPreferencesPageGetDescriptionCentered func(uintptr) bool

// Gets whether the description is centered.
func (x *PreferencesPage) GetDescriptionCentered() bool {

	cret := xPreferencesPageGetDescriptionCentered(x.GoPointer())
	return cret
}

var xPreferencesPageGetIconName func(uintptr) string

// Gets the icon name for @self.
func (x *PreferencesPage) GetIconName() string {

	cret := xPreferencesPageGetIconName(x.GoPointer())
	return cret
}

var xPreferencesPageGetName func(uintptr) string

// Gets the name of @self.
func (x *PreferencesPage) GetName() string {

	cret := xPreferencesPageGetName(x.GoPointer())
	return cret
}

var xPreferencesPageGetTitle func(uintptr) string

// Gets the title of @self.
func (x *PreferencesPage) GetTitle() string {

	cret := xPreferencesPageGetTitle(x.GoPointer())
	return cret
}

var xPreferencesPageGetUseUnderline func(uintptr) bool

// Gets whether an embedded underline in the title indicates a mnemonic.
func (x *PreferencesPage) GetUseUnderline() bool {

	cret := xPreferencesPageGetUseUnderline(x.GoPointer())
	return cret
}

var xPreferencesPageRemove func(uintptr, uintptr)

// Removes a group from @self.
func (x *PreferencesPage) Remove(GroupVar *PreferencesGroup) {

	xPreferencesPageRemove(x.GoPointer(), GroupVar.GoPointer())

}

var xPreferencesPageScrollToTop func(uintptr)

// Scrolls the scrolled window of @self to the top.
func (x *PreferencesPage) ScrollToTop() {

	xPreferencesPageScrollToTop(x.GoPointer())

}

var xPreferencesPageSetDescription func(uintptr, string)

// Sets the description of @self.
//
// The description is displayed at the top of the page.
func (x *PreferencesPage) SetDescription(DescriptionVar string) {

	xPreferencesPageSetDescription(x.GoPointer(), DescriptionVar)

}

var xPreferencesPageSetDescriptionCentered func(uintptr, bool)

// Sets whether the description should be centered.
func (x *PreferencesPage) SetDescriptionCentered(CenteredVar bool) {

	xPreferencesPageSetDescriptionCentered(x.GoPointer(), CenteredVar)

}

var xPreferencesPageSetIconName func(uintptr, string)

// Sets the icon name for @self.
func (x *PreferencesPage) SetIconName(IconNameVar string) {

	xPreferencesPageSetIconName(x.GoPointer(), IconNameVar)

}

var xPreferencesPageSetName func(uintptr, string)

// Sets the name of @self.
func (x *PreferencesPage) SetName(NameVar string) {

	xPreferencesPageSetName(x.GoPointer(), NameVar)

}

var xPreferencesPageSetTitle func(uintptr, string)

// Sets the title of @self.
func (x *PreferencesPage) SetTitle(TitleVar string) {

	xPreferencesPageSetTitle(x.GoPointer(), TitleVar)

}

var xPreferencesPageSetUseUnderline func(uintptr, bool)

// Sets whether an embedded underline in the title indicates a mnemonic.
func (x *PreferencesPage) SetUseUnderline(UseUnderlineVar bool) {

	xPreferencesPageSetUseUnderline(x.GoPointer(), UseUnderlineVar)

}

func (c *PreferencesPage) GoPointer() uintptr {
	return c.Ptr
}

func (c *PreferencesPage) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *PreferencesPage) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *PreferencesPage) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *PreferencesPage) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *PreferencesPage) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *PreferencesPage) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PreferencesPage) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *PreferencesPage) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PreferencesPage) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *PreferencesPage) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PreferencesPage) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *PreferencesPage) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xPreferencesPageGLibType, lib, "adw_preferences_page_get_type")

	core.PuregoSafeRegister(&xNewPreferencesPage, lib, "adw_preferences_page_new")

	core.PuregoSafeRegister(&xPreferencesPageAdd, lib, "adw_preferences_page_add")
	core.PuregoSafeRegister(&xPreferencesPageGetDescription, lib, "adw_preferences_page_get_description")
	core.PuregoSafeRegister(&xPreferencesPageGetDescriptionCentered, lib, "adw_preferences_page_get_description_centered")
	core.PuregoSafeRegister(&xPreferencesPageGetIconName, lib, "adw_preferences_page_get_icon_name")
	core.PuregoSafeRegister(&xPreferencesPageGetName, lib, "adw_preferences_page_get_name")
	core.PuregoSafeRegister(&xPreferencesPageGetTitle, lib, "adw_preferences_page_get_title")
	core.PuregoSafeRegister(&xPreferencesPageGetUseUnderline, lib, "adw_preferences_page_get_use_underline")
	core.PuregoSafeRegister(&xPreferencesPageRemove, lib, "adw_preferences_page_remove")
	core.PuregoSafeRegister(&xPreferencesPageScrollToTop, lib, "adw_preferences_page_scroll_to_top")
	core.PuregoSafeRegister(&xPreferencesPageSetDescription, lib, "adw_preferences_page_set_description")
	core.PuregoSafeRegister(&xPreferencesPageSetDescriptionCentered, lib, "adw_preferences_page_set_description_centered")
	core.PuregoSafeRegister(&xPreferencesPageSetIconName, lib, "adw_preferences_page_set_icon_name")
	core.PuregoSafeRegister(&xPreferencesPageSetName, lib, "adw_preferences_page_set_name")
	core.PuregoSafeRegister(&xPreferencesPageSetTitle, lib, "adw_preferences_page_set_title")
	core.PuregoSafeRegister(&xPreferencesPageSetUseUnderline, lib, "adw_preferences_page_set_use_underline")

}
