// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type AvatarClass struct {
	ParentClass uintptr
}

func (x *AvatarClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A widget displaying an image, with a generated fallback.
//
// &lt;picture&gt;
//
//	&lt;source srcset="avatar-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="avatar.png" alt="avatar"&gt;
//
// &lt;/picture&gt;
//
// `AdwAvatar` is a widget that shows a round avatar.
//
// `AdwAvatar` generates an avatar with the initials of  the
// [property@Avatar:text] on top of a colored background.
//
// The color is picked based on the hash of the [property@Avatar:text].
//
// If [property@Avatar:show-initials] is set to `FALSE`,
// [property@Avatar:icon-name] or `avatar-default-symbolic` is shown instead of
// the initials.
//
// Use [property@Avatar:custom-image] to set a custom image.
//
// ## CSS nodes
//
// `AdwAvatar` has a single CSS node with name `avatar`.
type Avatar struct {
	gtk.Widget
}

func AvatarNewFromInternalPtr(ptr uintptr) *Avatar {
	cls := &Avatar{}
	cls.Ptr = ptr
	return cls
}

var xNewAvatar func(int, string, bool) uintptr

// Creates a new `AdwAvatar`.
func NewAvatar(SizeVar int, TextVar string, ShowInitialsVar bool) *Avatar {
	var cls *Avatar

	cret := xNewAvatar(SizeVar, TextVar, ShowInitialsVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Avatar{}
	cls.Ptr = cret
	return cls
}

var xAvatarDrawToTexture func(uintptr, int) uintptr

// Renders @self into a [class@Gdk.Texture] at @scale_factor.
//
// This can be used to export the fallback avatar.
func (x *Avatar) DrawToTexture(ScaleFactorVar int) *gdk.Texture {
	var cls *gdk.Texture

	cret := xAvatarDrawToTexture(x.GoPointer(), ScaleFactorVar)

	if cret == 0 {
		return nil
	}
	cls = &gdk.Texture{}
	cls.Ptr = cret
	return cls
}

var xAvatarGetCustomImage func(uintptr) uintptr

// Gets the custom image paintable.
func (x *Avatar) GetCustomImage() *gdk.PaintableBase {
	var cls *gdk.PaintableBase

	cret := xAvatarGetCustomImage(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gdk.PaintableBase{}
	cls.Ptr = cret
	return cls
}

var xAvatarGetIconName func(uintptr) string

// Gets the name of an icon to use as a fallback.
func (x *Avatar) GetIconName() string {

	cret := xAvatarGetIconName(x.GoPointer())
	return cret
}

var xAvatarGetShowInitials func(uintptr) bool

// Gets whether initials are used instead of an icon on the fallback avatar.
func (x *Avatar) GetShowInitials() bool {

	cret := xAvatarGetShowInitials(x.GoPointer())
	return cret
}

var xAvatarGetSize func(uintptr) int

// Gets the size of the avatar.
func (x *Avatar) GetSize() int {

	cret := xAvatarGetSize(x.GoPointer())
	return cret
}

var xAvatarGetText func(uintptr) string

// Gets the text used to generate the fallback initials and color.
func (x *Avatar) GetText() string {

	cret := xAvatarGetText(x.GoPointer())
	return cret
}

var xAvatarSetCustomImage func(uintptr, uintptr)

// Sets the custom image paintable.
//
// Custom image is displayed instead of initials or icon.
func (x *Avatar) SetCustomImage(CustomImageVar gdk.Paintable) {

	xAvatarSetCustomImage(x.GoPointer(), CustomImageVar.GoPointer())

}

var xAvatarSetIconName func(uintptr, string)

// Sets the name of an icon to use as a fallback.
//
// If no name is set, `avatar-default-symbolic` will be used.
func (x *Avatar) SetIconName(IconNameVar string) {

	xAvatarSetIconName(x.GoPointer(), IconNameVar)

}

var xAvatarSetShowInitials func(uintptr, bool)

// Sets whether to use initials instead of an icon on the fallback avatar.
//
// See [property@Avatar:icon-name] for how to change the fallback icon.
func (x *Avatar) SetShowInitials(ShowInitialsVar bool) {

	xAvatarSetShowInitials(x.GoPointer(), ShowInitialsVar)

}

var xAvatarSetSize func(uintptr, int)

// Sets the size of the avatar.
func (x *Avatar) SetSize(SizeVar int) {

	xAvatarSetSize(x.GoPointer(), SizeVar)

}

var xAvatarSetText func(uintptr, string)

// Sets the text used to generate the fallback initials and color.
//
// It's only used to generate the color if [property@Avatar:show-initials] is
// `FALSE`.
func (x *Avatar) SetText(TextVar string) {

	xAvatarSetText(x.GoPointer(), TextVar)

}

func (c *Avatar) GoPointer() uintptr {
	return c.Ptr
}

func (c *Avatar) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *Avatar) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *Avatar) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *Avatar) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *Avatar) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *Avatar) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Avatar) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *Avatar) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Avatar) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *Avatar) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *Avatar) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *Avatar) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewAvatar, lib, "adw_avatar_new")

	core.PuregoSafeRegister(&xAvatarDrawToTexture, lib, "adw_avatar_draw_to_texture")
	core.PuregoSafeRegister(&xAvatarGetCustomImage, lib, "adw_avatar_get_custom_image")
	core.PuregoSafeRegister(&xAvatarGetIconName, lib, "adw_avatar_get_icon_name")
	core.PuregoSafeRegister(&xAvatarGetShowInitials, lib, "adw_avatar_get_show_initials")
	core.PuregoSafeRegister(&xAvatarGetSize, lib, "adw_avatar_get_size")
	core.PuregoSafeRegister(&xAvatarGetText, lib, "adw_avatar_get_text")
	core.PuregoSafeRegister(&xAvatarSetCustomImage, lib, "adw_avatar_set_custom_image")
	core.PuregoSafeRegister(&xAvatarSetIconName, lib, "adw_avatar_set_icon_name")
	core.PuregoSafeRegister(&xAvatarSetShowInitials, lib, "adw_avatar_set_show_initials")
	core.PuregoSafeRegister(&xAvatarSetSize, lib, "adw_avatar_set_size")
	core.PuregoSafeRegister(&xAvatarSetText, lib, "adw_avatar_set_text")

}
