// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type TabOverviewClass struct {
	ParentClass uintptr
}

func (x *TabOverviewClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A tab overview for [class@TabView].
//
// &lt;picture&gt;
//
//	&lt;source srcset="tab-overview-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="tab-overview.png" alt="tab-overview"&gt;
//
// &lt;/picture&gt;
//
// `AdwTabOverview` is a widget that can display tabs from an `AdwTabView` in a
// grid.
//
// `AdwTabOverview` shows a thumbnail for each tab. By default thumbnails are
// static for all pages except the selected one. They can be made always live
// by setting [property@TabPage:live-thumbnail] to `TRUE`, or refreshed with
// [method@TabPage.invalidate_thumbnail] or
// [method@TabView.invalidate_thumbnails] otherwise.
//
// If the pages are too tall or too wide, the thumbnails will be cropped; use
// [property@TabPage:thumbnail-xalign] and [property@TabPage:thumbnail-yalign] to
// control which part of the page should be visible in this case.
//
// Pinned tabs are shown as smaller cards without thumbnails above the other
// tabs. Unlike in [class@TabBar], they still have titles, as well as an unpin
// button.
//
// `AdwTabOverview` provides search in open tabs. It searches in tab titles and
// tooltips, as well as [property@TabPage:keyword].
//
// If [property@TabOverview:enable-new-tab] is set to `TRUE`, a new tab button
// will be shown. Connect to the [signal@TabOverview::create-tab] signal to use
// it.
//
// [property@TabOverview:secondary-menu] can be used to provide a secondary menu
// for the overview. Use it to add extra actions, e.g. to open a new window or
// undo closed tab.
//
// `AdwTabOverview` is intended to be used as the direct child of the window,
// with the rest of the window contents set as the [property@TabOverview:child].
// The child is expected to contain an [class@TabView].
//
// `AdwTabOverview` shows window buttons by default. They can be disabled by
// setting [property@TabOverview:show-start-title-buttons] and/or
// [property@TabOverview:show-start-title-buttons] and/or
// [property@TabOverview:show-end-title-buttons] to `FALSE`.
//
// If search and window buttons are disabled, and secondary menu is not set, the
// header bar will be hidden.
//
// ## Actions
//
// `AdwTabOverview` defines the `overview.open` and `overview.close` actions for
// opening and closing itself. They can be convenient when used together with
// [class@TabButton].
//
// ## CSS nodes
//
// `AdwTabOverview` has a single CSS node with name `taboverview`.
type TabOverview struct {
	gtk.Widget
}

func TabOverviewNewFromInternalPtr(ptr uintptr) *TabOverview {
	cls := &TabOverview{}
	cls.Ptr = ptr
	return cls
}

var xNewTabOverview func() uintptr

// Creates a new `AdwTabOverview`.
func NewTabOverview() *TabOverview {
	var cls *TabOverview

	cret := xNewTabOverview()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &TabOverview{}
	cls.Ptr = cret
	return cls
}

var xTabOverviewGetChild func(uintptr) uintptr

// Gets the child widget of @self.
func (x *TabOverview) GetChild() *gtk.Widget {
	var cls *gtk.Widget

	cret := xTabOverviewGetChild(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Widget{}
	cls.Ptr = cret
	return cls
}

var xTabOverviewGetEnableNewTab func(uintptr) bool

// Gets whether to new tab button is enabled for @self.
func (x *TabOverview) GetEnableNewTab() bool {

	cret := xTabOverviewGetEnableNewTab(x.GoPointer())
	return cret
}

var xTabOverviewGetEnableSearch func(uintptr) bool

// Gets whether search in tabs is enabled for @self.
func (x *TabOverview) GetEnableSearch() bool {

	cret := xTabOverviewGetEnableSearch(x.GoPointer())
	return cret
}

var xTabOverviewGetExtraDragPreload func(uintptr) bool

// Gets whether drop data should be preloaded on hover.
func (x *TabOverview) GetExtraDragPreload() bool {

	cret := xTabOverviewGetExtraDragPreload(x.GoPointer())
	return cret
}

var xTabOverviewGetInverted func(uintptr) bool

// Gets whether thumbnails use inverted layout.
func (x *TabOverview) GetInverted() bool {

	cret := xTabOverviewGetInverted(x.GoPointer())
	return cret
}

var xTabOverviewGetOpen func(uintptr) bool

// Gets whether @self is open.
func (x *TabOverview) GetOpen() bool {

	cret := xTabOverviewGetOpen(x.GoPointer())
	return cret
}

var xTabOverviewGetSearchActive func(uintptr) bool

// Gets whether search is currently active for @self.
//
// See [property@TabOverview:enable-search].
func (x *TabOverview) GetSearchActive() bool {

	cret := xTabOverviewGetSearchActive(x.GoPointer())
	return cret
}

var xTabOverviewGetSecondaryMenu func(uintptr) uintptr

// Gets the secondary menu model for @self.
func (x *TabOverview) GetSecondaryMenu() *gio.MenuModel {
	var cls *gio.MenuModel

	cret := xTabOverviewGetSecondaryMenu(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gio.MenuModel{}
	cls.Ptr = cret
	return cls
}

var xTabOverviewGetShowEndTitleButtons func(uintptr) bool

// Gets whether end title buttons are shown in @self's header bar.
func (x *TabOverview) GetShowEndTitleButtons() bool {

	cret := xTabOverviewGetShowEndTitleButtons(x.GoPointer())
	return cret
}

var xTabOverviewGetShowStartTitleButtons func(uintptr) bool

// Gets whether start title buttons are shown in @self's header bar.
func (x *TabOverview) GetShowStartTitleButtons() bool {

	cret := xTabOverviewGetShowStartTitleButtons(x.GoPointer())
	return cret
}

var xTabOverviewGetView func(uintptr) uintptr

// Gets the tab view @self controls.
func (x *TabOverview) GetView() *TabView {
	var cls *TabView

	cret := xTabOverviewGetView(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &TabView{}
	cls.Ptr = cret
	return cls
}

var xTabOverviewSetChild func(uintptr, uintptr)

// Sets the child widget of @self.
func (x *TabOverview) SetChild(ChildVar *gtk.Widget) {

	xTabOverviewSetChild(x.GoPointer(), ChildVar.GoPointer())

}

var xTabOverviewSetEnableNewTab func(uintptr, bool)

// Sets whether to enable new tab button for @self.
//
// Connect to the [signal@TabOverview::create-tab] signal to use it.
func (x *TabOverview) SetEnableNewTab(EnableNewTabVar bool) {

	xTabOverviewSetEnableNewTab(x.GoPointer(), EnableNewTabVar)

}

var xTabOverviewSetEnableSearch func(uintptr, bool)

// Sets whether to enable search in tabs for @self.
//
// Search matches tab titles and tooltips, as well as keywords, set via
// [property@TabPage:keyword]. Use keywords to search in e.g. page URLs in a web
// browser.
//
// During search, tab reordering and drag-n-drop are disabled.
//
// Use [property@TabOverview:search-active] to check out if search is currently
// active.
func (x *TabOverview) SetEnableSearch(EnableSearchVar bool) {

	xTabOverviewSetEnableSearch(x.GoPointer(), EnableSearchVar)

}

var xTabOverviewSetExtraDragPreload func(uintptr, bool)

// Sets whether drop data should be preloaded on hover.
//
// See [property@Gtk.DropTarget:preload].
func (x *TabOverview) SetExtraDragPreload(PreloadVar bool) {

	xTabOverviewSetExtraDragPreload(x.GoPointer(), PreloadVar)

}

var xTabOverviewSetInverted func(uintptr, bool)

// Sets whether thumbnails use inverted layout.
//
// If set to `TRUE`, thumbnails will have the close or unpin button at the
// beginning and the indicator at the end rather than the other way around.
func (x *TabOverview) SetInverted(InvertedVar bool) {

	xTabOverviewSetInverted(x.GoPointer(), InvertedVar)

}

var xTabOverviewSetOpen func(uintptr, bool)

// Sets whether the to open @self.
func (x *TabOverview) SetOpen(OpenVar bool) {

	xTabOverviewSetOpen(x.GoPointer(), OpenVar)

}

var xTabOverviewSetSecondaryMenu func(uintptr, uintptr)

// Sets the secondary menu model for @self.
//
// Use it to add extra actions, e.g. to open a new window or undo closed tab.
func (x *TabOverview) SetSecondaryMenu(SecondaryMenuVar *gio.MenuModel) {

	xTabOverviewSetSecondaryMenu(x.GoPointer(), SecondaryMenuVar.GoPointer())

}

var xTabOverviewSetShowEndTitleButtons func(uintptr, bool)

// Sets whether to show end title buttons in @self's header bar.
//
// See [property@HeaderBar:show-start-title-buttons] for the other side.
func (x *TabOverview) SetShowEndTitleButtons(ShowEndTitleButtonsVar bool) {

	xTabOverviewSetShowEndTitleButtons(x.GoPointer(), ShowEndTitleButtonsVar)

}

var xTabOverviewSetShowStartTitleButtons func(uintptr, bool)

// Sets whether to show start title buttons in @self's header bar.
//
// See [property@HeaderBar:show-end-title-buttons] for the other side.
func (x *TabOverview) SetShowStartTitleButtons(ShowStartTitleButtonsVar bool) {

	xTabOverviewSetShowStartTitleButtons(x.GoPointer(), ShowStartTitleButtonsVar)

}

var xTabOverviewSetView func(uintptr, uintptr)

// Sets the tab view to control.
//
// The view must be inside @self, see [property@TabOverview:child].
func (x *TabOverview) SetView(ViewVar *TabView) {

	xTabOverviewSetView(x.GoPointer(), ViewVar.GoPointer())

}

var xTabOverviewSetupExtraDropTarget func(uintptr, gdk.DragAction, []types.GType, uint)

// Sets the supported types for this drop target.
//
// Sets up an extra drop target on tabs.
//
// This allows to drag arbitrary content onto tabs, for example URLs in a web
// browser.
//
// If a tab is hovered for a certain period of time while dragging the content,
// it will be automatically selected.
//
// The [signal@TabOverview::extra-drag-drop] signal can be used to handle the
// drop.
func (x *TabOverview) SetupExtraDropTarget(ActionsVar gdk.DragAction, TypesVar []types.GType, NTypesVar uint) {

	xTabOverviewSetupExtraDropTarget(x.GoPointer(), ActionsVar, TypesVar, NTypesVar)

}

func (c *TabOverview) GoPointer() uintptr {
	return c.Ptr
}

func (c *TabOverview) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted when a tab needs to be created;
//
// This can happen after the new tab button has been pressed, see
// [property@TabOverview:enable-new-tab].
//
// The signal handler is expected to create a new page in the corresponding
// [class@TabView] and return it.
func (x *TabOverview) ConnectCreateTab(cb *func(TabOverview) TabPage) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "create-tab", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) uintptr {
		fa := TabOverview{}
		fa.Ptr = clsPtr
		cbFn := *cb

		CreateTabCls := cbFn(fa)
		return CreateTabCls.Ptr

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "create-tab", cbRefPtr)
}

// This signal is emitted when content is dropped onto a tab.
//
// The content must be of one of the types set up via
// [method@TabOverview.setup_extra_drop_target].
//
// See [signal@Gtk.DropTarget::drop].
func (x *TabOverview) ConnectExtraDragDrop(cb *func(TabOverview, uintptr, uintptr) bool) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "extra-drag-drop", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, PageVarp uintptr, ValueVarp uintptr) bool {
		fa := TabOverview{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa, PageVarp, ValueVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "extra-drag-drop", cbRefPtr)
}

// This signal is emitted when the dropped content is preloaded.
//
// In order for data to be preloaded, [property@TabOverview:extra-drag-preload]
// must be set to `TRUE`.
//
// The content must be of one of the types set up via
// [method@TabOverview.setup_extra_drop_target].
//
// See [property@Gtk.DropTarget:value].
func (x *TabOverview) ConnectExtraDragValue(cb *func(TabOverview, uintptr, uintptr) gdk.DragAction) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "extra-drag-value", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, PageVarp uintptr, ValueVarp uintptr) gdk.DragAction {
		fa := TabOverview{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa, PageVarp, ValueVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "extra-drag-value", cbRefPtr)
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *TabOverview) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *TabOverview) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *TabOverview) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *TabOverview) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *TabOverview) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *TabOverview) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *TabOverview) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *TabOverview) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *TabOverview) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *TabOverview) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *TabOverview) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewTabOverview, lib, "adw_tab_overview_new")

	core.PuregoSafeRegister(&xTabOverviewGetChild, lib, "adw_tab_overview_get_child")
	core.PuregoSafeRegister(&xTabOverviewGetEnableNewTab, lib, "adw_tab_overview_get_enable_new_tab")
	core.PuregoSafeRegister(&xTabOverviewGetEnableSearch, lib, "adw_tab_overview_get_enable_search")
	core.PuregoSafeRegister(&xTabOverviewGetExtraDragPreload, lib, "adw_tab_overview_get_extra_drag_preload")
	core.PuregoSafeRegister(&xTabOverviewGetInverted, lib, "adw_tab_overview_get_inverted")
	core.PuregoSafeRegister(&xTabOverviewGetOpen, lib, "adw_tab_overview_get_open")
	core.PuregoSafeRegister(&xTabOverviewGetSearchActive, lib, "adw_tab_overview_get_search_active")
	core.PuregoSafeRegister(&xTabOverviewGetSecondaryMenu, lib, "adw_tab_overview_get_secondary_menu")
	core.PuregoSafeRegister(&xTabOverviewGetShowEndTitleButtons, lib, "adw_tab_overview_get_show_end_title_buttons")
	core.PuregoSafeRegister(&xTabOverviewGetShowStartTitleButtons, lib, "adw_tab_overview_get_show_start_title_buttons")
	core.PuregoSafeRegister(&xTabOverviewGetView, lib, "adw_tab_overview_get_view")
	core.PuregoSafeRegister(&xTabOverviewSetChild, lib, "adw_tab_overview_set_child")
	core.PuregoSafeRegister(&xTabOverviewSetEnableNewTab, lib, "adw_tab_overview_set_enable_new_tab")
	core.PuregoSafeRegister(&xTabOverviewSetEnableSearch, lib, "adw_tab_overview_set_enable_search")
	core.PuregoSafeRegister(&xTabOverviewSetExtraDragPreload, lib, "adw_tab_overview_set_extra_drag_preload")
	core.PuregoSafeRegister(&xTabOverviewSetInverted, lib, "adw_tab_overview_set_inverted")
	core.PuregoSafeRegister(&xTabOverviewSetOpen, lib, "adw_tab_overview_set_open")
	core.PuregoSafeRegister(&xTabOverviewSetSecondaryMenu, lib, "adw_tab_overview_set_secondary_menu")
	core.PuregoSafeRegister(&xTabOverviewSetShowEndTitleButtons, lib, "adw_tab_overview_set_show_end_title_buttons")
	core.PuregoSafeRegister(&xTabOverviewSetShowStartTitleButtons, lib, "adw_tab_overview_set_show_start_title_buttons")
	core.PuregoSafeRegister(&xTabOverviewSetView, lib, "adw_tab_overview_set_view")
	core.PuregoSafeRegister(&xTabOverviewSetupExtraDropTarget, lib, "adw_tab_overview_setup_extra_drop_target")

}
