// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type ViewSwitcherClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *ViewSwitcherClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// Describes the adaptive modes of [class@ViewSwitcher].
type ViewSwitcherPolicy int

var xViewSwitcherPolicyGLibType func() types.GType

func ViewSwitcherPolicyGLibType() types.GType {
	return xViewSwitcherPolicyGLibType()
}

const (

	// Force the narrow mode
	ViewSwitcherPolicyNarrowValue ViewSwitcherPolicy = 0
	// Force the wide mode
	ViewSwitcherPolicyWideValue ViewSwitcherPolicy = 1
)

// An adaptive view switcher.
//
// &lt;picture&gt;
//
//	&lt;source srcset="view-switcher-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="view-switcher.png" alt="view-switcher"&gt;
//
// &lt;/picture&gt;
//
// An adaptive view switcher designed to switch between multiple views
// contained in a [class@ViewStack] in a similar fashion to
// [class@Gtk.StackSwitcher].
//
// `AdwViewSwitcher` buttons always have an icon and a label. They can be
// displayed side by side, or icon on top of the label. This can be controlled
// via the [property@ViewSwitcher:policy] property.
//
// `AdwViewSwitcher` is intended to be used in a header bar together with
// [class@ViewSwitcherBar] at the bottom of the window, and a [class@Breakpoint]
// showing the view switcher bar on narrow sizes, while removing the view
// switcher from the header bar, as follows:
//
// ```xml
// &lt;object class="AdwWindow"&gt;
//
//	&lt;child&gt;
//	  &lt;object class="AdwBreakpoint"&gt;
//	    &lt;condition&gt;max-width: 550sp&lt;/condition&gt;
//	    &lt;setter object="switcher_bar" property="reveal"&gt;True&lt;/setter&gt;
//	    &lt;setter object="header_bar" property="title-widget"/&gt;
//	  &lt;/object&gt;
//	&lt;/child&gt;
//	&lt;property name="content"&gt;
//	  &lt;object class="AdwToolbarView"&gt;
//	    &lt;child type="top"&gt;
//	      &lt;object class="AdwHeaderBar" id="header_bar"&gt;
//	        &lt;property name="title-widget"&gt;
//	          &lt;object class="AdwViewSwitcher"&gt;
//	            &lt;property name="stack"&gt;stack&lt;/property&gt;
//	            &lt;property name="policy"&gt;wide&lt;/property&gt;
//	          &lt;/object&gt;
//	        &lt;/property&gt;
//	      &lt;/object&gt;
//	    &lt;/child&gt;
//	    &lt;property name="content"&gt;
//	      &lt;object class="AdwViewStack" id="stack"/&gt;
//	    &lt;/property&gt;
//	    &lt;child type="bottom"&gt;
//	      &lt;object class="AdwViewSwitcherBar" id="switcher_bar"&gt;
//	        &lt;property name="stack"&gt;stack&lt;/property&gt;
//	      &lt;/object&gt;
//	    &lt;/child&gt;
//	  &lt;/object&gt;
//	&lt;/property&gt;
//
// &lt;/object&gt;
// ```
//
// It's recommended to set [property@ViewSwitcher:policy] to
// `ADW_VIEW_SWITCHER_POLICY_WIDE` in this case.
//
// You may have to adjust the breakpoint condition for your specific pages.
//
// ## CSS nodes
//
// `AdwViewSwitcher` has a single CSS node with name `viewswitcher`. It can have
// the style classes `.wide` and `.narrow`, matching its policy.
//
// ## Accessibility
//
// `AdwViewSwitcher` uses the `GTK_ACCESSIBLE_ROLE_TAB_LIST` role and uses the
// `GTK_ACCESSIBLE_ROLE_TAB` for its buttons.
type ViewSwitcher struct {
	gtk.Widget
}

var xViewSwitcherGLibType func() types.GType

func ViewSwitcherGLibType() types.GType {
	return xViewSwitcherGLibType()
}

func ViewSwitcherNewFromInternalPtr(ptr uintptr) *ViewSwitcher {
	cls := &ViewSwitcher{}
	cls.Ptr = ptr
	return cls
}

var xNewViewSwitcher func() uintptr

// Creates a new `AdwViewSwitcher`.
func NewViewSwitcher() *ViewSwitcher {
	var cls *ViewSwitcher

	cret := xNewViewSwitcher()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ViewSwitcher{}
	cls.Ptr = cret
	return cls
}

var xViewSwitcherGetPolicy func(uintptr) ViewSwitcherPolicy

// Gets the policy of @self.
func (x *ViewSwitcher) GetPolicy() ViewSwitcherPolicy {

	cret := xViewSwitcherGetPolicy(x.GoPointer())
	return cret
}

var xViewSwitcherGetStack func(uintptr) uintptr

// Gets the stack controlled by @self.
func (x *ViewSwitcher) GetStack() *ViewStack {
	var cls *ViewStack

	cret := xViewSwitcherGetStack(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ViewStack{}
	cls.Ptr = cret
	return cls
}

var xViewSwitcherSetPolicy func(uintptr, ViewSwitcherPolicy)

// Sets the policy of @self.
func (x *ViewSwitcher) SetPolicy(PolicyVar ViewSwitcherPolicy) {

	xViewSwitcherSetPolicy(x.GoPointer(), PolicyVar)

}

var xViewSwitcherSetStack func(uintptr, uintptr)

// Sets the stack controlled by @self.
func (x *ViewSwitcher) SetStack(StackVar *ViewStack) {

	xViewSwitcherSetStack(x.GoPointer(), StackVar.GoPointer())

}

func (c *ViewSwitcher) GoPointer() uintptr {
	return c.Ptr
}

func (c *ViewSwitcher) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *ViewSwitcher) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *ViewSwitcher) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *ViewSwitcher) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *ViewSwitcher) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *ViewSwitcher) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ViewSwitcher) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *ViewSwitcher) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ViewSwitcher) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *ViewSwitcher) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ViewSwitcher) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *ViewSwitcher) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xViewSwitcherPolicyGLibType, lib, "adw_view_switcher_policy_get_type")

	core.PuregoSafeRegister(&xViewSwitcherGLibType, lib, "adw_view_switcher_get_type")

	core.PuregoSafeRegister(&xNewViewSwitcher, lib, "adw_view_switcher_new")

	core.PuregoSafeRegister(&xViewSwitcherGetPolicy, lib, "adw_view_switcher_get_policy")
	core.PuregoSafeRegister(&xViewSwitcherGetStack, lib, "adw_view_switcher_get_stack")
	core.PuregoSafeRegister(&xViewSwitcherSetPolicy, lib, "adw_view_switcher_set_policy")
	core.PuregoSafeRegister(&xViewSwitcherSetStack, lib, "adw_view_switcher_set_stack")

}
