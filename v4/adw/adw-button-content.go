// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type ButtonContentClass struct {
	ParentClass uintptr
}

func (x *ButtonContentClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A helper widget for creating buttons.
//
// &lt;picture&gt;
//
//	&lt;source srcset="button-content-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="button-content.png" alt="button-content"&gt;
//
// &lt;/picture&gt;
//
// `AdwButtonContent` is a box-like widget with an icon and a label.
//
// It's intended to be used as a direct child of [class@Gtk.Button],
// [class@Gtk.MenuButton] or [class@SplitButton], when they need to have both an
// icon and a label, as follows:
//
// ```xml
// &lt;object class="GtkButton"&gt;
//
//	&lt;property name="child"&gt;
//	  &lt;object class="AdwButtonContent"&gt;
//	    &lt;property name="icon-name"&gt;document-open-symbolic&lt;/property&gt;
//	    &lt;property name="label" translatable="yes"&gt;_Open&lt;/property&gt;
//	    &lt;property name="use-underline"&gt;True&lt;/property&gt;
//	  &lt;/object&gt;
//	&lt;/property&gt;
//
// &lt;/object&gt;
// ```
//
// `AdwButtonContent` handles style classes and connecting the mnemonic to the
// button automatically.
//
// ## CSS nodes
//
// ```
// buttoncontent
// ├── image
// ╰── label
// ```
//
// `AdwButtonContent`'s CSS node is called `buttoncontent`. It contains the
// subnodes `image` and `label`.
//
// When inside a `GtkButton` or `AdwSplitButton`, the button will receive the
// `.image-text-button` style class. When inside a `GtkMenuButton`, the
// internal `GtkButton` will receive it instead.
//
// ## Accessibility
//
// `AdwButtonContent` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.
type ButtonContent struct {
	gtk.Widget
}

var xButtonContentGLibType func() types.GType

func ButtonContentGLibType() types.GType {
	return xButtonContentGLibType()
}

func ButtonContentNewFromInternalPtr(ptr uintptr) *ButtonContent {
	cls := &ButtonContent{}
	cls.Ptr = ptr
	return cls
}

var xNewButtonContent func() uintptr

// Creates a new `AdwButtonContent`.
func NewButtonContent() *ButtonContent {
	var cls *ButtonContent

	cret := xNewButtonContent()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ButtonContent{}
	cls.Ptr = cret
	return cls
}

var xButtonContentGetIconName func(uintptr) string

// Gets the name of the displayed icon.
func (x *ButtonContent) GetIconName() string {

	cret := xButtonContentGetIconName(x.GoPointer())
	return cret
}

var xButtonContentGetLabel func(uintptr) string

// Gets the displayed label.
func (x *ButtonContent) GetLabel() string {

	cret := xButtonContentGetLabel(x.GoPointer())
	return cret
}

var xButtonContentGetUseUnderline func(uintptr) bool

// Gets whether an underline in the text indicates a mnemonic.
func (x *ButtonContent) GetUseUnderline() bool {

	cret := xButtonContentGetUseUnderline(x.GoPointer())
	return cret
}

var xButtonContentSetIconName func(uintptr, string)

// Sets the name of the displayed icon.
//
// If empty, the icon is not shown.
func (x *ButtonContent) SetIconName(IconNameVar string) {

	xButtonContentSetIconName(x.GoPointer(), IconNameVar)

}

var xButtonContentSetLabel func(uintptr, string)

// Sets the displayed label.
func (x *ButtonContent) SetLabel(LabelVar string) {

	xButtonContentSetLabel(x.GoPointer(), LabelVar)

}

var xButtonContentSetUseUnderline func(uintptr, bool)

// Sets whether an underline in the text indicates a mnemonic.
//
// The mnemonic can be used to activate the parent button.
//
// See [property@ButtonContent:label].
func (x *ButtonContent) SetUseUnderline(UseUnderlineVar bool) {

	xButtonContentSetUseUnderline(x.GoPointer(), UseUnderlineVar)

}

func (c *ButtonContent) GoPointer() uintptr {
	return c.Ptr
}

func (c *ButtonContent) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *ButtonContent) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *ButtonContent) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *ButtonContent) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *ButtonContent) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *ButtonContent) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ButtonContent) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *ButtonContent) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ButtonContent) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *ButtonContent) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ButtonContent) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *ButtonContent) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xButtonContentGLibType, lib, "adw_button_content_get_type")

	core.PuregoSafeRegister(&xNewButtonContent, lib, "adw_button_content_new")

	core.PuregoSafeRegister(&xButtonContentGetIconName, lib, "adw_button_content_get_icon_name")
	core.PuregoSafeRegister(&xButtonContentGetLabel, lib, "adw_button_content_get_label")
	core.PuregoSafeRegister(&xButtonContentGetUseUnderline, lib, "adw_button_content_get_use_underline")
	core.PuregoSafeRegister(&xButtonContentSetIconName, lib, "adw_button_content_set_icon_name")
	core.PuregoSafeRegister(&xButtonContentSetLabel, lib, "adw_button_content_set_label")
	core.PuregoSafeRegister(&xButtonContentSetUseUnderline, lib, "adw_button_content_set_use_underline")

}
