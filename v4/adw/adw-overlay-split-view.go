// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type OverlaySplitViewClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *OverlaySplitViewClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A widget presenting sidebar and content side by side or as an overlay.
//
// &lt;picture&gt;
//
//	&lt;source srcset="overlay-split-view-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="overlay-split-view.png" alt="overlay-split-view"&gt;
//
// &lt;/picture&gt;
// &lt;picture&gt;
//
//	&lt;source srcset="overlay-split-view-collapsed-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="overlay-split-view-collapsed.png" alt="overlay-split-view-collapsed"&gt;
//
// &lt;/picture&gt;
//
// `AdwOverlaySplitView` has two children: sidebar and content, and displays
// them side by side.
//
// When [property@OverlaySplitView:collapsed] is set to `TRUE`, the sidebar is
// instead shown as an overlay above the content widget.
//
// The sidebar can be hidden or shown using the
// [property@OverlaySplitView:show-sidebar] property.
//
// Sidebar can be displayed before or after the content, this can be controlled
// with the [property@OverlaySplitView:sidebar-position] property.
//
// Collapsing the split view automatically hides the sidebar widget, and
// uncollapsing it shows the sidebar. If this behavior is not desired, the
// [property@OverlaySplitView:pin-sidebar] property can be used to override it.
//
// `AdwOverlaySplitView` supports an edge swipe gesture for showing the sidebar,
// and a swipe from the sidebar for hiding it. Gestures are only supported on
// touchscreen, but not touchpad. Gestures can be controlled with the
// [property@OverlaySplitView:enable-show-gesture] and
// [property@OverlaySplitView:enable-hide-gesture] properties.
//
// See also [class@NavigationSplitView].
//
// `AdwOverlaySplitView` is typically used together with an [class@Breakpoint]
// setting the `collapsed` property to `TRUE` on small widths, as follows:
//
// ```xml
// &lt;object class="AdwWindow"&gt;
//
//	&lt;property name="default-width"&gt;800&lt;/property&gt;
//	&lt;property name="default-height"&gt;800&lt;/property&gt;
//	&lt;child&gt;
//	  &lt;object class="AdwBreakpoint"&gt;
//	    &lt;condition&gt;max-width: 400sp&lt;/condition&gt;
//	    &lt;setter object="split_view" property="collapsed"&gt;True&lt;/setter&gt;
//	  &lt;/object&gt;
//	&lt;/child&gt;
//	&lt;property name="content"&gt;
//	  &lt;object class="AdwOverlaySplitView" id="split_view"&gt;
//	    &lt;property name="sidebar"&gt;
//	      &lt;!-- ... --&gt;
//	    &lt;/property&gt;
//	    &lt;property name="content"&gt;
//	      &lt;!-- ... --&gt;
//	    &lt;/property&gt;
//	  &lt;/object&gt;
//	&lt;/property&gt;
//
// &lt;/object&gt;
// ```
//
// `AdwOverlaySplitView` is often used for implementing the
// [utility pane](https://developer.gnome.org/hig/patterns/containers/utility-panes.html)
// pattern.
//
// ## Sizing
//
// When not collapsed, `AdwOverlaySplitView` changes the sidebar width
// depending on its own width.
//
// If possible, it tries to allocate a fraction of the total width, controlled
// with the [property@OverlaySplitView:sidebar-width-fraction] property.
//
// The sidebar also has minimum and maximum sizes, controlled with the
// [property@OverlaySplitView:min-sidebar-width] and
// [property@OverlaySplitView:max-sidebar-width] properties.
//
// The minimum and maximum sizes are using the length unit specified with the
// [property@OverlaySplitView:sidebar-width-unit].
//
// By default, sidebar is using 25% of the total width, with 180sp as the
// minimum size and 280sp as the maximum size.
//
// When collapsed, the preferred width fraction is ignored and the sidebar uses
// [property@OverlaySplitView:max-sidebar-width] when possible.
//
// ## Header Bar Integration
//
// When used inside `AdwOverlaySplitView`, [class@HeaderBar] will automatically
// hide the window buttons in the middle.
//
// ## `AdwOverlaySplitView` as `GtkBuildable`
//
// The `AdwOverlaySplitView` implementation of the [iface@Gtk.Buildable]
// interface supports setting the sidebar widget by specifying “sidebar” as the
// “type” attribute of a `&lt;child&gt;` element, Specifying “content” child type or
// omitting it results in setting the content widget.
//
// ## CSS nodes
//
// `AdwOverlaySplitView` has a single CSS node with the name
// `overlay-split-view`.
//
// It contains two nodes with the name `widget`, containing the sidebar and
// content children.
//
// When not collapsed, they have the `.sidebar-view` and `.content-view` style
// classes respectively.
//
// ```
// overlay-split-view
// ├── widget.sidebar-pane
// │   ╰── [sidebar child]
// ╰── widget.content-pane
//
//	╰── [content child]
//
// ```
//
// When collapsed, the one containing the sidebar child has the `.background`
// style class and the other one has no style classes.
//
// ```
// overlay-split-view
// ├── widget.background
// │   ╰── [sidebar child]
// ╰── widget
//
//	╰── [content child]
//
// ```
//
// ## Accessibility
//
// `AdwOverlaySplitView` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.
type OverlaySplitView struct {
	gtk.Widget
}

var xOverlaySplitViewGLibType func() types.GType

func OverlaySplitViewGLibType() types.GType {
	return xOverlaySplitViewGLibType()
}

func OverlaySplitViewNewFromInternalPtr(ptr uintptr) *OverlaySplitView {
	cls := &OverlaySplitView{}
	cls.Ptr = ptr
	return cls
}

var xNewOverlaySplitView func() uintptr

// Creates a new `AdwOverlaySplitView`.
func NewOverlaySplitView() *OverlaySplitView {
	var cls *OverlaySplitView

	cret := xNewOverlaySplitView()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &OverlaySplitView{}
	cls.Ptr = cret
	return cls
}

var xOverlaySplitViewGetCollapsed func(uintptr) bool

// Gets whether @self is collapsed.
func (x *OverlaySplitView) GetCollapsed() bool {

	cret := xOverlaySplitViewGetCollapsed(x.GoPointer())
	return cret
}

var xOverlaySplitViewGetContent func(uintptr) uintptr

// Gets the content widget for @self.
func (x *OverlaySplitView) GetContent() *gtk.Widget {
	var cls *gtk.Widget

	cret := xOverlaySplitViewGetContent(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Widget{}
	cls.Ptr = cret
	return cls
}

var xOverlaySplitViewGetEnableHideGesture func(uintptr) bool

// Gets whether @self can be closed with a swipe gesture.
func (x *OverlaySplitView) GetEnableHideGesture() bool {

	cret := xOverlaySplitViewGetEnableHideGesture(x.GoPointer())
	return cret
}

var xOverlaySplitViewGetEnableShowGesture func(uintptr) bool

// Gets whether @self can be opened with an edge swipe gesture.
func (x *OverlaySplitView) GetEnableShowGesture() bool {

	cret := xOverlaySplitViewGetEnableShowGesture(x.GoPointer())
	return cret
}

var xOverlaySplitViewGetMaxSidebarWidth func(uintptr) float64

// Gets the maximum sidebar width for @self.
func (x *OverlaySplitView) GetMaxSidebarWidth() float64 {

	cret := xOverlaySplitViewGetMaxSidebarWidth(x.GoPointer())
	return cret
}

var xOverlaySplitViewGetMinSidebarWidth func(uintptr) float64

// Gets the minimum sidebar width for @self.
func (x *OverlaySplitView) GetMinSidebarWidth() float64 {

	cret := xOverlaySplitViewGetMinSidebarWidth(x.GoPointer())
	return cret
}

var xOverlaySplitViewGetPinSidebar func(uintptr) bool

// Gets whether the sidebar widget is pinned for @self.
func (x *OverlaySplitView) GetPinSidebar() bool {

	cret := xOverlaySplitViewGetPinSidebar(x.GoPointer())
	return cret
}

var xOverlaySplitViewGetShowSidebar func(uintptr) bool

// Gets whether the sidebar widget is shown for @self.
func (x *OverlaySplitView) GetShowSidebar() bool {

	cret := xOverlaySplitViewGetShowSidebar(x.GoPointer())
	return cret
}

var xOverlaySplitViewGetSidebar func(uintptr) uintptr

// Gets the sidebar widget for @self.
func (x *OverlaySplitView) GetSidebar() *gtk.Widget {
	var cls *gtk.Widget

	cret := xOverlaySplitViewGetSidebar(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Widget{}
	cls.Ptr = cret
	return cls
}

var xOverlaySplitViewGetSidebarPosition func(uintptr) gtk.PackType

// Gets the sidebar position for @self.
func (x *OverlaySplitView) GetSidebarPosition() gtk.PackType {

	cret := xOverlaySplitViewGetSidebarPosition(x.GoPointer())
	return cret
}

var xOverlaySplitViewGetSidebarWidthFraction func(uintptr) float64

// Gets the preferred sidebar width fraction for @self.
func (x *OverlaySplitView) GetSidebarWidthFraction() float64 {

	cret := xOverlaySplitViewGetSidebarWidthFraction(x.GoPointer())
	return cret
}

var xOverlaySplitViewGetSidebarWidthUnit func(uintptr) LengthUnit

// Gets the length unit for minimum and maximum sidebar widths.
func (x *OverlaySplitView) GetSidebarWidthUnit() LengthUnit {

	cret := xOverlaySplitViewGetSidebarWidthUnit(x.GoPointer())
	return cret
}

var xOverlaySplitViewSetCollapsed func(uintptr, bool)

// Sets whether @self view is collapsed.
//
// When collapsed, the sidebar widget is presented as an overlay above the
// content widget, otherwise they are displayed side by side.
func (x *OverlaySplitView) SetCollapsed(CollapsedVar bool) {

	xOverlaySplitViewSetCollapsed(x.GoPointer(), CollapsedVar)

}

var xOverlaySplitViewSetContent func(uintptr, uintptr)

// Sets the content widget for @self.
func (x *OverlaySplitView) SetContent(ContentVar *gtk.Widget) {

	xOverlaySplitViewSetContent(x.GoPointer(), ContentVar.GoPointer())

}

var xOverlaySplitViewSetEnableHideGesture func(uintptr, bool)

// Sets whether @self can be closed with a swipe gesture.
//
// Only touchscreen swipes are supported.
func (x *OverlaySplitView) SetEnableHideGesture(EnableHideGestureVar bool) {

	xOverlaySplitViewSetEnableHideGesture(x.GoPointer(), EnableHideGestureVar)

}

var xOverlaySplitViewSetEnableShowGesture func(uintptr, bool)

// Sets whether @self can be opened with an edge swipe gesture.
//
// Only touchscreen swipes are supported.
func (x *OverlaySplitView) SetEnableShowGesture(EnableShowGestureVar bool) {

	xOverlaySplitViewSetEnableShowGesture(x.GoPointer(), EnableShowGestureVar)

}

var xOverlaySplitViewSetMaxSidebarWidth func(uintptr, float64)

// Sets the maximum sidebar width for @self.
//
// Maximum width is affected by [property@OverlaySplitView:sidebar-width-unit].
//
// The sidebar widget can still be allocated with larger width if its own
// minimum width exceeds it.
func (x *OverlaySplitView) SetMaxSidebarWidth(WidthVar float64) {

	xOverlaySplitViewSetMaxSidebarWidth(x.GoPointer(), WidthVar)

}

var xOverlaySplitViewSetMinSidebarWidth func(uintptr, float64)

// Sets the minimum sidebar width for @self.
//
// Minimum width is affected by [property@OverlaySplitView:sidebar-width-unit].
//
// The sidebar widget can still be allocated with larger width if its own
// minimum width exceeds it.
func (x *OverlaySplitView) SetMinSidebarWidth(WidthVar float64) {

	xOverlaySplitViewSetMinSidebarWidth(x.GoPointer(), WidthVar)

}

var xOverlaySplitViewSetPinSidebar func(uintptr, bool)

// Sets whether the sidebar widget is pinned for @self.
//
// By default, collapsing @self automatically hides the sidebar widget, and
// uncollapsing it shows the sidebar. If set to `TRUE`, sidebar visibility never
// changes on its own.
func (x *OverlaySplitView) SetPinSidebar(PinSidebarVar bool) {

	xOverlaySplitViewSetPinSidebar(x.GoPointer(), PinSidebarVar)

}

var xOverlaySplitViewSetShowSidebar func(uintptr, bool)

// Sets whether the sidebar widget is shown for @self.
func (x *OverlaySplitView) SetShowSidebar(ShowSidebarVar bool) {

	xOverlaySplitViewSetShowSidebar(x.GoPointer(), ShowSidebarVar)

}

var xOverlaySplitViewSetSidebar func(uintptr, uintptr)

// Sets the sidebar widget for @self.
func (x *OverlaySplitView) SetSidebar(SidebarVar *gtk.Widget) {

	xOverlaySplitViewSetSidebar(x.GoPointer(), SidebarVar.GoPointer())

}

var xOverlaySplitViewSetSidebarPosition func(uintptr, gtk.PackType)

// Sets the sidebar position for @self.
//
// If it's set to `GTK_PACK_START`, the sidebar is displayed before the content,
// if `GTK_PACK_END`, it's displayed after the content.
func (x *OverlaySplitView) SetSidebarPosition(PositionVar gtk.PackType) {

	xOverlaySplitViewSetSidebarPosition(x.GoPointer(), PositionVar)

}

var xOverlaySplitViewSetSidebarWidthFraction func(uintptr, float64)

// Sets the preferred sidebar width as a fraction of the total width of @self.
//
// The preferred width is additionally limited by
// [property@OverlaySplitView:min-sidebar-width] and
// [property@OverlaySplitView:max-sidebar-width].
//
// The sidebar widget can be allocated with larger width if its own minimum
// width exceeds the preferred width.
func (x *OverlaySplitView) SetSidebarWidthFraction(FractionVar float64) {

	xOverlaySplitViewSetSidebarWidthFraction(x.GoPointer(), FractionVar)

}

var xOverlaySplitViewSetSidebarWidthUnit func(uintptr, LengthUnit)

// Sets the length unit for minimum and maximum sidebar widths.
//
// See [property@OverlaySplitView:min-sidebar-width] and
// [property@OverlaySplitView:max-sidebar-width].
func (x *OverlaySplitView) SetSidebarWidthUnit(UnitVar LengthUnit) {

	xOverlaySplitViewSetSidebarWidthUnit(x.GoPointer(), UnitVar)

}

func (c *OverlaySplitView) GoPointer() uintptr {
	return c.Ptr
}

func (c *OverlaySplitView) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Gets the progress @self will snap back to after the gesture is canceled.
func (x *OverlaySplitView) GetCancelProgress() float64 {

	cret := XAdwSwipeableGetCancelProgress(x.GoPointer())
	return cret
}

// Gets the swipe distance of @self.
//
// This corresponds to how many pixels 1 unit represents.
func (x *OverlaySplitView) GetDistance() float64 {

	cret := XAdwSwipeableGetDistance(x.GoPointer())
	return cret
}

// Gets the current progress of @self.
func (x *OverlaySplitView) GetProgress() float64 {

	cret := XAdwSwipeableGetProgress(x.GoPointer())
	return cret
}

// Gets the snap points of @self.
//
// Each snap point represents a progress value that is considered acceptable to
// end the swipe on.
func (x *OverlaySplitView) GetSnapPoints(NSnapPointsVar int) []float64 {

	cret := XAdwSwipeableGetSnapPoints(x.GoPointer(), NSnapPointsVar)
	return cret
}

// Gets the area @self can start a swipe from for the given direction and
// gesture type.
//
// This can be used to restrict swipes to only be possible from a certain area,
// for example, to only allow edge swipes, or to have a draggable element and
// ignore swipes elsewhere.
//
// If not implemented, the default implementation returns the allocation of
// @self, allowing swipes from anywhere.
func (x *OverlaySplitView) GetSwipeArea(NavigationDirectionVar NavigationDirection, IsDragVar bool, RectVar *gdk.Rectangle) {

	XAdwSwipeableGetSwipeArea(x.GoPointer(), NavigationDirectionVar, IsDragVar, RectVar)

}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *OverlaySplitView) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *OverlaySplitView) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *OverlaySplitView) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *OverlaySplitView) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *OverlaySplitView) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *OverlaySplitView) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *OverlaySplitView) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *OverlaySplitView) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *OverlaySplitView) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *OverlaySplitView) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *OverlaySplitView) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xOverlaySplitViewGLibType, lib, "adw_overlay_split_view_get_type")

	core.PuregoSafeRegister(&xNewOverlaySplitView, lib, "adw_overlay_split_view_new")

	core.PuregoSafeRegister(&xOverlaySplitViewGetCollapsed, lib, "adw_overlay_split_view_get_collapsed")
	core.PuregoSafeRegister(&xOverlaySplitViewGetContent, lib, "adw_overlay_split_view_get_content")
	core.PuregoSafeRegister(&xOverlaySplitViewGetEnableHideGesture, lib, "adw_overlay_split_view_get_enable_hide_gesture")
	core.PuregoSafeRegister(&xOverlaySplitViewGetEnableShowGesture, lib, "adw_overlay_split_view_get_enable_show_gesture")
	core.PuregoSafeRegister(&xOverlaySplitViewGetMaxSidebarWidth, lib, "adw_overlay_split_view_get_max_sidebar_width")
	core.PuregoSafeRegister(&xOverlaySplitViewGetMinSidebarWidth, lib, "adw_overlay_split_view_get_min_sidebar_width")
	core.PuregoSafeRegister(&xOverlaySplitViewGetPinSidebar, lib, "adw_overlay_split_view_get_pin_sidebar")
	core.PuregoSafeRegister(&xOverlaySplitViewGetShowSidebar, lib, "adw_overlay_split_view_get_show_sidebar")
	core.PuregoSafeRegister(&xOverlaySplitViewGetSidebar, lib, "adw_overlay_split_view_get_sidebar")
	core.PuregoSafeRegister(&xOverlaySplitViewGetSidebarPosition, lib, "adw_overlay_split_view_get_sidebar_position")
	core.PuregoSafeRegister(&xOverlaySplitViewGetSidebarWidthFraction, lib, "adw_overlay_split_view_get_sidebar_width_fraction")
	core.PuregoSafeRegister(&xOverlaySplitViewGetSidebarWidthUnit, lib, "adw_overlay_split_view_get_sidebar_width_unit")
	core.PuregoSafeRegister(&xOverlaySplitViewSetCollapsed, lib, "adw_overlay_split_view_set_collapsed")
	core.PuregoSafeRegister(&xOverlaySplitViewSetContent, lib, "adw_overlay_split_view_set_content")
	core.PuregoSafeRegister(&xOverlaySplitViewSetEnableHideGesture, lib, "adw_overlay_split_view_set_enable_hide_gesture")
	core.PuregoSafeRegister(&xOverlaySplitViewSetEnableShowGesture, lib, "adw_overlay_split_view_set_enable_show_gesture")
	core.PuregoSafeRegister(&xOverlaySplitViewSetMaxSidebarWidth, lib, "adw_overlay_split_view_set_max_sidebar_width")
	core.PuregoSafeRegister(&xOverlaySplitViewSetMinSidebarWidth, lib, "adw_overlay_split_view_set_min_sidebar_width")
	core.PuregoSafeRegister(&xOverlaySplitViewSetPinSidebar, lib, "adw_overlay_split_view_set_pin_sidebar")
	core.PuregoSafeRegister(&xOverlaySplitViewSetShowSidebar, lib, "adw_overlay_split_view_set_show_sidebar")
	core.PuregoSafeRegister(&xOverlaySplitViewSetSidebar, lib, "adw_overlay_split_view_set_sidebar")
	core.PuregoSafeRegister(&xOverlaySplitViewSetSidebarPosition, lib, "adw_overlay_split_view_set_sidebar_position")
	core.PuregoSafeRegister(&xOverlaySplitViewSetSidebarWidthFraction, lib, "adw_overlay_split_view_set_sidebar_width_fraction")
	core.PuregoSafeRegister(&xOverlaySplitViewSetSidebarWidthUnit, lib, "adw_overlay_split_view_set_sidebar_width_unit")

}
