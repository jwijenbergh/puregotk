// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type ExpanderRowClass struct {
	ParentClass uintptr

	Padding [4]uintptr
}

func (x *ExpanderRowClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A [class@Gtk.ListBoxRow] used to reveal widgets.
//
// &lt;picture&gt;
//
//	&lt;source srcset="expander-row-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="expander-row.png" alt="expander-row"&gt;
//
// &lt;/picture&gt;
//
// The `AdwExpanderRow` widget allows the user to reveal or hide widgets below
// it. It also allows the user to enable the expansion of the row, allowing to
// disable all that the row contains.
//
// ## AdwExpanderRow as GtkBuildable
//
// The `AdwExpanderRow` implementation of the [iface@Gtk.Buildable] interface
// supports adding a child as an action widget by specifying “action” as the
// “type” attribute of a &lt;child&gt; element.
//
// It also supports adding it as a prefix widget by specifying “prefix” as the
// “type” attribute of a &lt;child&gt; element.
//
// ## CSS nodes
//
// `AdwExpanderRow` has a main CSS node with name `row` and the `.expander`
// style class. It has the `.empty` style class when it contains no children.
//
// It contains the subnodes `row.header` for its main embedded row,
// `list.nested` for the list it can expand, and `image.expander-row-arrow` for
// its arrow.
type ExpanderRow struct {
	PreferencesRow
}

var xExpanderRowGLibType func() types.GType

func ExpanderRowGLibType() types.GType {
	return xExpanderRowGLibType()
}

func ExpanderRowNewFromInternalPtr(ptr uintptr) *ExpanderRow {
	cls := &ExpanderRow{}
	cls.Ptr = ptr
	return cls
}

var xNewExpanderRow func() uintptr

// Creates a new `AdwExpanderRow`.
func NewExpanderRow() *ExpanderRow {
	var cls *ExpanderRow

	cret := xNewExpanderRow()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ExpanderRow{}
	cls.Ptr = cret
	return cls
}

var xExpanderRowAddAction func(uintptr, uintptr)

// Adds an action widget to @self.
func (x *ExpanderRow) AddAction(WidgetVar *gtk.Widget) {

	xExpanderRowAddAction(x.GoPointer(), WidgetVar.GoPointer())

}

var xExpanderRowAddPrefix func(uintptr, uintptr)

// Adds a prefix widget to @self.
func (x *ExpanderRow) AddPrefix(WidgetVar *gtk.Widget) {

	xExpanderRowAddPrefix(x.GoPointer(), WidgetVar.GoPointer())

}

var xExpanderRowAddRow func(uintptr, uintptr)

// Adds a widget to @self.
//
// The widget will appear in the expanding list below @self.
func (x *ExpanderRow) AddRow(ChildVar *gtk.Widget) {

	xExpanderRowAddRow(x.GoPointer(), ChildVar.GoPointer())

}

var xExpanderRowGetEnableExpansion func(uintptr) bool

// Gets whether the expansion of @self is enabled.
func (x *ExpanderRow) GetEnableExpansion() bool {

	cret := xExpanderRowGetEnableExpansion(x.GoPointer())
	return cret
}

var xExpanderRowGetExpanded func(uintptr) bool

// Gets whether @self is expanded.
func (x *ExpanderRow) GetExpanded() bool {

	cret := xExpanderRowGetExpanded(x.GoPointer())
	return cret
}

var xExpanderRowGetIconName func(uintptr) string

// Gets the icon name for @self.
func (x *ExpanderRow) GetIconName() string {

	cret := xExpanderRowGetIconName(x.GoPointer())
	return cret
}

var xExpanderRowGetShowEnableSwitch func(uintptr) bool

// Gets whether the switch enabling the expansion of @self is visible.
func (x *ExpanderRow) GetShowEnableSwitch() bool {

	cret := xExpanderRowGetShowEnableSwitch(x.GoPointer())
	return cret
}

var xExpanderRowGetSubtitle func(uintptr) string

// Gets the subtitle for @self.
func (x *ExpanderRow) GetSubtitle() string {

	cret := xExpanderRowGetSubtitle(x.GoPointer())
	return cret
}

var xExpanderRowGetSubtitleLines func(uintptr) bool

// Gets the number of lines at the end of which the subtitle label will be
// ellipsized.
func (x *ExpanderRow) GetSubtitleLines() bool {

	cret := xExpanderRowGetSubtitleLines(x.GoPointer())
	return cret
}

var xExpanderRowGetTitleLines func(uintptr) bool

// Gets the number of lines at the end of which the title label will be
// ellipsized.
func (x *ExpanderRow) GetTitleLines() bool {

	cret := xExpanderRowGetTitleLines(x.GoPointer())
	return cret
}

var xExpanderRowRemove func(uintptr, uintptr)

func (x *ExpanderRow) Remove(ChildVar *gtk.Widget) {

	xExpanderRowRemove(x.GoPointer(), ChildVar.GoPointer())

}

var xExpanderRowSetEnableExpansion func(uintptr, bool)

// Sets whether the expansion of @self is enabled.
func (x *ExpanderRow) SetEnableExpansion(EnableExpansionVar bool) {

	xExpanderRowSetEnableExpansion(x.GoPointer(), EnableExpansionVar)

}

var xExpanderRowSetExpanded func(uintptr, bool)

// Sets whether @self is expanded.
func (x *ExpanderRow) SetExpanded(ExpandedVar bool) {

	xExpanderRowSetExpanded(x.GoPointer(), ExpandedVar)

}

var xExpanderRowSetIconName func(uintptr, string)

// Sets the icon name for @self.
func (x *ExpanderRow) SetIconName(IconNameVar string) {

	xExpanderRowSetIconName(x.GoPointer(), IconNameVar)

}

var xExpanderRowSetShowEnableSwitch func(uintptr, bool)

// Sets whether the switch enabling the expansion of @self is visible.
func (x *ExpanderRow) SetShowEnableSwitch(ShowEnableSwitchVar bool) {

	xExpanderRowSetShowEnableSwitch(x.GoPointer(), ShowEnableSwitchVar)

}

var xExpanderRowSetSubtitle func(uintptr, string)

// Sets the subtitle for @self.
//
// The subtitle is interpreted as Pango markup unless
// [property@PreferencesRow:use-markup] is set to `FALSE`.
func (x *ExpanderRow) SetSubtitle(SubtitleVar string) {

	xExpanderRowSetSubtitle(x.GoPointer(), SubtitleVar)

}

var xExpanderRowSetSubtitleLines func(uintptr, int)

// Sets the number of lines at the end of which the subtitle label will be
// ellipsized.
//
// If the value is 0, the number of lines won't be limited.
func (x *ExpanderRow) SetSubtitleLines(SubtitleLinesVar int) {

	xExpanderRowSetSubtitleLines(x.GoPointer(), SubtitleLinesVar)

}

var xExpanderRowSetTitleLines func(uintptr, int)

// Sets the number of lines at the end of which the title label will be
// ellipsized.
//
// If the value is 0, the number of lines won't be limited.
func (x *ExpanderRow) SetTitleLines(TitleLinesVar int) {

	xExpanderRowSetTitleLines(x.GoPointer(), TitleLinesVar)

}

func (c *ExpanderRow) GoPointer() uintptr {
	return c.Ptr
}

func (c *ExpanderRow) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *ExpanderRow) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *ExpanderRow) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *ExpanderRow) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *ExpanderRow) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *ExpanderRow) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ExpanderRow) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *ExpanderRow) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ExpanderRow) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *ExpanderRow) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ExpanderRow) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the action name for @actionable.
func (x *ExpanderRow) GetActionName() string {

	cret := gtk.XGtkActionableGetActionName(x.GoPointer())
	return cret
}

// Gets the current target value of @actionable.
func (x *ExpanderRow) GetActionTargetValue() *glib.Variant {

	cret := gtk.XGtkActionableGetActionTargetValue(x.GoPointer())
	return cret
}

// Specifies the name of the action with which this widget should be
// associated.
//
// If @action_name is %NULL then the widget will be unassociated from
// any previous action.
//
// Usually this function is used when the widget is located (or will be
// located) within the hierarchy of a `GtkApplicationWindow`.
//
// Names are of the form “win.save” or “app.quit” for actions on the
// containing [class@ApplicationWindow] or its associated [class@Application],
// respectively. This is the same form used for actions in the [class@Gio.Menu]
// associated with the window.
func (x *ExpanderRow) SetActionName(ActionNameVar string) {

	gtk.XGtkActionableSetActionName(x.GoPointer(), ActionNameVar)

}

// Sets the target of an actionable widget.
//
// This is a convenience function that calls [ctor@GLib.Variant.new] for
// @format_string and uses the result to call
// [method@Gtk.Actionable.set_action_target_value].
//
// If you are setting a string-valued target and want to set
// the action name at the same time, you can use
// [method@Gtk.Actionable.set_detailed_action_name].
func (x *ExpanderRow) SetActionTarget(FormatStringVar string, varArgs ...interface{}) {

	gtk.XGtkActionableSetActionTarget(x.GoPointer(), FormatStringVar, varArgs...)

}

// Sets the target value of an actionable widget.
//
// If @target_value is %NULL then the target value is unset.
//
// The target value has two purposes. First, it is used as the parameter
// to activation of the action associated with the `GtkActionable` widget.
// Second, it is used to determine if the widget should be rendered as
// “active” — the widget is active if the state is equal to the given target.
//
// Consider the example of associating a set of buttons with a [iface@Gio.Action]
// with string state in a typical “radio button” situation. Each button
// will be associated with the same action, but with a different target
// value for that action. Clicking on a particular button will activate
// the action with the target of that button, which will typically cause
// the action’s state to change to that value. Since the action’s state
// is now equal to the target value of the button, the button will now
// be rendered as active (and the other buttons, with different targets,
// rendered inactive).
func (x *ExpanderRow) SetActionTargetValue(TargetValueVar *glib.Variant) {

	gtk.XGtkActionableSetActionTargetValue(x.GoPointer(), TargetValueVar)

}

// Sets the action-name and associated string target value of an
// actionable widget.
//
// @detailed_action_name is a string in the format accepted by
// [func@Gio.Action.parse_detailed_name].
func (x *ExpanderRow) SetDetailedActionName(DetailedActionNameVar string) {

	gtk.XGtkActionableSetDetailedActionName(x.GoPointer(), DetailedActionNameVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *ExpanderRow) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xExpanderRowGLibType, lib, "adw_expander_row_get_type")

	core.PuregoSafeRegister(&xNewExpanderRow, lib, "adw_expander_row_new")

	core.PuregoSafeRegister(&xExpanderRowAddAction, lib, "adw_expander_row_add_action")
	core.PuregoSafeRegister(&xExpanderRowAddPrefix, lib, "adw_expander_row_add_prefix")
	core.PuregoSafeRegister(&xExpanderRowAddRow, lib, "adw_expander_row_add_row")
	core.PuregoSafeRegister(&xExpanderRowGetEnableExpansion, lib, "adw_expander_row_get_enable_expansion")
	core.PuregoSafeRegister(&xExpanderRowGetExpanded, lib, "adw_expander_row_get_expanded")
	core.PuregoSafeRegister(&xExpanderRowGetIconName, lib, "adw_expander_row_get_icon_name")
	core.PuregoSafeRegister(&xExpanderRowGetShowEnableSwitch, lib, "adw_expander_row_get_show_enable_switch")
	core.PuregoSafeRegister(&xExpanderRowGetSubtitle, lib, "adw_expander_row_get_subtitle")
	core.PuregoSafeRegister(&xExpanderRowGetSubtitleLines, lib, "adw_expander_row_get_subtitle_lines")
	core.PuregoSafeRegister(&xExpanderRowGetTitleLines, lib, "adw_expander_row_get_title_lines")
	core.PuregoSafeRegister(&xExpanderRowRemove, lib, "adw_expander_row_remove")
	core.PuregoSafeRegister(&xExpanderRowSetEnableExpansion, lib, "adw_expander_row_set_enable_expansion")
	core.PuregoSafeRegister(&xExpanderRowSetExpanded, lib, "adw_expander_row_set_expanded")
	core.PuregoSafeRegister(&xExpanderRowSetIconName, lib, "adw_expander_row_set_icon_name")
	core.PuregoSafeRegister(&xExpanderRowSetShowEnableSwitch, lib, "adw_expander_row_set_show_enable_switch")
	core.PuregoSafeRegister(&xExpanderRowSetSubtitle, lib, "adw_expander_row_set_subtitle")
	core.PuregoSafeRegister(&xExpanderRowSetSubtitleLines, lib, "adw_expander_row_set_subtitle_lines")
	core.PuregoSafeRegister(&xExpanderRowSetTitleLines, lib, "adw_expander_row_set_title_lines")

}
