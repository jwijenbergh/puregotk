// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type ClampScrollableClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *ClampScrollableClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A scrollable [class@Clamp].
//
// `AdwClampScrollable` is a variant of [class@Clamp] that implements the
// [iface@Gtk.Scrollable] interface.
//
// The primary use case for `AdwClampScrollable` is clamping
// [class@Gtk.ListView].
//
// See also: [class@ClampLayout].
type ClampScrollable struct {
	gtk.Widget
}

var xClampScrollableGLibType func() types.GType

func ClampScrollableGLibType() types.GType {
	return xClampScrollableGLibType()
}

func ClampScrollableNewFromInternalPtr(ptr uintptr) *ClampScrollable {
	cls := &ClampScrollable{}
	cls.Ptr = ptr
	return cls
}

var xNewClampScrollable func() uintptr

// Creates a new `AdwClampScrollable`.
func NewClampScrollable() *ClampScrollable {
	var cls *ClampScrollable

	cret := xNewClampScrollable()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ClampScrollable{}
	cls.Ptr = cret
	return cls
}

var xClampScrollableGetChild func(uintptr) uintptr

// Gets the child widget of @self.
func (x *ClampScrollable) GetChild() *gtk.Widget {
	var cls *gtk.Widget

	cret := xClampScrollableGetChild(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Widget{}
	cls.Ptr = cret
	return cls
}

var xClampScrollableGetMaximumSize func(uintptr) int

// Gets the maximum size allocated to the child.
func (x *ClampScrollable) GetMaximumSize() int {

	cret := xClampScrollableGetMaximumSize(x.GoPointer())
	return cret
}

var xClampScrollableGetTighteningThreshold func(uintptr) int

// Gets the size above which the child is clamped.
func (x *ClampScrollable) GetTighteningThreshold() int {

	cret := xClampScrollableGetTighteningThreshold(x.GoPointer())
	return cret
}

var xClampScrollableGetUnit func(uintptr) LengthUnit

// Gets the length unit for maximum size and tightening threshold.
func (x *ClampScrollable) GetUnit() LengthUnit {

	cret := xClampScrollableGetUnit(x.GoPointer())
	return cret
}

var xClampScrollableSetChild func(uintptr, uintptr)

// Sets the child widget of @self.
func (x *ClampScrollable) SetChild(ChildVar *gtk.Widget) {

	xClampScrollableSetChild(x.GoPointer(), ChildVar.GoPointer())

}

var xClampScrollableSetMaximumSize func(uintptr, int)

// Sets the maximum size allocated to the child.
//
// It is the width if the clamp is horizontal, or the height if it is vertical.
func (x *ClampScrollable) SetMaximumSize(MaximumSizeVar int) {

	xClampScrollableSetMaximumSize(x.GoPointer(), MaximumSizeVar)

}

var xClampScrollableSetTighteningThreshold func(uintptr, int)

// Sets the size above which the child is clamped.
//
// Starting from this size, the clamp will tighten its grip on the child, slowly
// allocating less and less of the available size up to the maximum allocated
// size. Below that threshold and below the maximum width, the child will be
// allocated all the available size.
//
// If the threshold is greater than the maximum size to allocate to the child,
// the child will be allocated all the width up to the maximum. If the threshold
// is lower than the minimum size to allocate to the child, that size will be
// used as the tightening threshold.
//
// Effectively, tightening the grip on the child before it reaches its maximum
// size makes transitions to and from the maximum size smoother when resizing.
func (x *ClampScrollable) SetTighteningThreshold(TighteningThresholdVar int) {

	xClampScrollableSetTighteningThreshold(x.GoPointer(), TighteningThresholdVar)

}

var xClampScrollableSetUnit func(uintptr, LengthUnit)

// Sets the length unit for maximum size and tightening threshold.
//
// Allows the sizes to vary depending on the text scale factor.
func (x *ClampScrollable) SetUnit(UnitVar LengthUnit) {

	xClampScrollableSetUnit(x.GoPointer(), UnitVar)

}

func (c *ClampScrollable) GoPointer() uintptr {
	return c.Ptr
}

func (c *ClampScrollable) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *ClampScrollable) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *ClampScrollable) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *ClampScrollable) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *ClampScrollable) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *ClampScrollable) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ClampScrollable) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *ClampScrollable) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ClampScrollable) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *ClampScrollable) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ClampScrollable) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *ClampScrollable) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

// Retrieves the orientation of the @orientable.
func (x *ClampScrollable) GetOrientation() gtk.Orientation {

	cret := gtk.XGtkOrientableGetOrientation(x.GoPointer())
	return cret
}

// Sets the orientation of the @orientable.
func (x *ClampScrollable) SetOrientation(OrientationVar gtk.Orientation) {

	gtk.XGtkOrientableSetOrientation(x.GoPointer(), OrientationVar)

}

// Returns the size of a non-scrolling border around the
// outside of the scrollable.
//
// An example for this would be treeview headers. GTK can use
// this information to display overlaid graphics, like the
// overshoot indication, at the right position.
func (x *ClampScrollable) GetBorder(BorderVar *gtk.Border) bool {

	cret := gtk.XGtkScrollableGetBorder(x.GoPointer(), BorderVar)
	return cret
}

// Retrieves the `GtkAdjustment` used for horizontal scrolling.
func (x *ClampScrollable) GetHadjustment() *gtk.Adjustment {
	var cls *gtk.Adjustment

	cret := gtk.XGtkScrollableGetHadjustment(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Adjustment{}
	cls.Ptr = cret
	return cls
}

// Gets the horizontal `GtkScrollablePolicy`.
func (x *ClampScrollable) GetHscrollPolicy() gtk.ScrollablePolicy {

	cret := gtk.XGtkScrollableGetHscrollPolicy(x.GoPointer())
	return cret
}

// Retrieves the `GtkAdjustment` used for vertical scrolling.
func (x *ClampScrollable) GetVadjustment() *gtk.Adjustment {
	var cls *gtk.Adjustment

	cret := gtk.XGtkScrollableGetVadjustment(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Adjustment{}
	cls.Ptr = cret
	return cls
}

// Gets the vertical `GtkScrollablePolicy`.
func (x *ClampScrollable) GetVscrollPolicy() gtk.ScrollablePolicy {

	cret := gtk.XGtkScrollableGetVscrollPolicy(x.GoPointer())
	return cret
}

// Sets the horizontal adjustment of the `GtkScrollable`.
func (x *ClampScrollable) SetHadjustment(HadjustmentVar *gtk.Adjustment) {

	gtk.XGtkScrollableSetHadjustment(x.GoPointer(), HadjustmentVar.GoPointer())

}

// Sets the `GtkScrollablePolicy`.
//
// The policy determines whether horizontal scrolling should start
// below the minimum width or below the natural width.
func (x *ClampScrollable) SetHscrollPolicy(PolicyVar gtk.ScrollablePolicy) {

	gtk.XGtkScrollableSetHscrollPolicy(x.GoPointer(), PolicyVar)

}

// Sets the vertical adjustment of the `GtkScrollable`.
func (x *ClampScrollable) SetVadjustment(VadjustmentVar *gtk.Adjustment) {

	gtk.XGtkScrollableSetVadjustment(x.GoPointer(), VadjustmentVar.GoPointer())

}

// Sets the `GtkScrollablePolicy`.
//
// The policy determines whether vertical scrolling should start
// below the minimum height or below the natural height.
func (x *ClampScrollable) SetVscrollPolicy(PolicyVar gtk.ScrollablePolicy) {

	gtk.XGtkScrollableSetVscrollPolicy(x.GoPointer(), PolicyVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xClampScrollableGLibType, lib, "adw_clamp_scrollable_get_type")

	core.PuregoSafeRegister(&xNewClampScrollable, lib, "adw_clamp_scrollable_new")

	core.PuregoSafeRegister(&xClampScrollableGetChild, lib, "adw_clamp_scrollable_get_child")
	core.PuregoSafeRegister(&xClampScrollableGetMaximumSize, lib, "adw_clamp_scrollable_get_maximum_size")
	core.PuregoSafeRegister(&xClampScrollableGetTighteningThreshold, lib, "adw_clamp_scrollable_get_tightening_threshold")
	core.PuregoSafeRegister(&xClampScrollableGetUnit, lib, "adw_clamp_scrollable_get_unit")
	core.PuregoSafeRegister(&xClampScrollableSetChild, lib, "adw_clamp_scrollable_set_child")
	core.PuregoSafeRegister(&xClampScrollableSetMaximumSize, lib, "adw_clamp_scrollable_set_maximum_size")
	core.PuregoSafeRegister(&xClampScrollableSetTighteningThreshold, lib, "adw_clamp_scrollable_set_tightening_threshold")
	core.PuregoSafeRegister(&xClampScrollableSetUnit, lib, "adw_clamp_scrollable_set_unit")

}
