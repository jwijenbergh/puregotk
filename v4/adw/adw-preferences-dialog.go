// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type PreferencesDialogClass struct {
	_ structs.HostLayout

	ParentClass uintptr

	Padding [4]uintptr
}

func (x *PreferencesDialogClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A dialog showing application's preferences.
//
// &lt;picture&gt;
//
//	&lt;source srcset="preferences-dialog-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="preferences-dialog.png" alt="preferences-dialog"&gt;
//
// &lt;/picture&gt;
//
// The `AdwPreferencesDialog` widget presents an application's preferences
// gathered into pages and groups. The preferences are searchable by the user.
//
// ## Actions
//
// `AdwPrefencesDialog` defines the `navigation.pop` action, it doesn't take any
// parameters and pops the current subpage from the navigation stack, equivalent
// to calling [method@PreferencesDialog.pop_subpage].
//
// ## CSS nodes
//
// `AdwPreferencesDialog` has a main CSS node with the name `dialog` and the
// style class `.preferences`.
type PreferencesDialog struct {
	Dialog
}

var xPreferencesDialogGLibType func() types.GType

func PreferencesDialogGLibType() types.GType {
	return xPreferencesDialogGLibType()
}

func PreferencesDialogNewFromInternalPtr(ptr uintptr) *PreferencesDialog {
	cls := &PreferencesDialog{}
	cls.Ptr = ptr
	return cls
}

var xNewPreferencesDialog func() uintptr

// Creates a new `AdwPreferencesDialog`.
func NewPreferencesDialog() *PreferencesDialog {
	var cls *PreferencesDialog

	cret := xNewPreferencesDialog()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &PreferencesDialog{}
	cls.Ptr = cret
	return cls
}

var xPreferencesDialogAdd func(uintptr, uintptr)

// Adds a preferences page to @self.
func (x *PreferencesDialog) Add(PageVar *PreferencesPage) {

	xPreferencesDialogAdd(x.GoPointer(), PageVar.GoPointer())

}

var xPreferencesDialogAddToast func(uintptr, uintptr)

// Displays @toast.
//
// See [method@ToastOverlay.add_toast].
func (x *PreferencesDialog) AddToast(ToastVar *Toast) {

	xPreferencesDialogAddToast(x.GoPointer(), ToastVar.GoPointer())

}

var xPreferencesDialogGetSearchEnabled func(uintptr) bool

// Gets whether search is enabled for @self.
func (x *PreferencesDialog) GetSearchEnabled() bool {

	cret := xPreferencesDialogGetSearchEnabled(x.GoPointer())
	return cret
}

var xPreferencesDialogGetVisiblePage func(uintptr) uintptr

// Gets the currently visible page of @self.
func (x *PreferencesDialog) GetVisiblePage() *PreferencesPage {
	var cls *PreferencesPage

	cret := xPreferencesDialogGetVisiblePage(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &PreferencesPage{}
	cls.Ptr = cret
	return cls
}

var xPreferencesDialogGetVisiblePageName func(uintptr) string

// Gets the name of currently visible page of @self.
func (x *PreferencesDialog) GetVisiblePageName() string {

	cret := xPreferencesDialogGetVisiblePageName(x.GoPointer())
	return cret
}

var xPreferencesDialogPopSubpage func(uintptr) bool

// Pop the visible page from the subpage stack of @self.
func (x *PreferencesDialog) PopSubpage() bool {

	cret := xPreferencesDialogPopSubpage(x.GoPointer())
	return cret
}

var xPreferencesDialogPushSubpage func(uintptr, uintptr)

// Pushes @page onto the subpage stack of @self.
//
// The page will be automatically removed when popped.
func (x *PreferencesDialog) PushSubpage(PageVar *NavigationPage) {

	xPreferencesDialogPushSubpage(x.GoPointer(), PageVar.GoPointer())

}

var xPreferencesDialogRemove func(uintptr, uintptr)

// Removes a page from @self.
func (x *PreferencesDialog) Remove(PageVar *PreferencesPage) {

	xPreferencesDialogRemove(x.GoPointer(), PageVar.GoPointer())

}

var xPreferencesDialogSetSearchEnabled func(uintptr, bool)

// Sets whether search is enabled for @self.
func (x *PreferencesDialog) SetSearchEnabled(SearchEnabledVar bool) {

	xPreferencesDialogSetSearchEnabled(x.GoPointer(), SearchEnabledVar)

}

var xPreferencesDialogSetVisiblePage func(uintptr, uintptr)

// Makes @page the visible page of @self.
func (x *PreferencesDialog) SetVisiblePage(PageVar *PreferencesPage) {

	xPreferencesDialogSetVisiblePage(x.GoPointer(), PageVar.GoPointer())

}

var xPreferencesDialogSetVisiblePageName func(uintptr, string)

// Makes the page with the given name visible.
//
// See [property@PreferencesDialog:visible-page].
func (x *PreferencesDialog) SetVisiblePageName(NameVar string) {

	xPreferencesDialogSetVisiblePageName(x.GoPointer(), NameVar)

}

func (c *PreferencesDialog) GoPointer() uintptr {
	return c.Ptr
}

func (c *PreferencesDialog) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *PreferencesDialog) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *PreferencesDialog) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *PreferencesDialog) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *PreferencesDialog) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *PreferencesDialog) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PreferencesDialog) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *PreferencesDialog) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PreferencesDialog) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *PreferencesDialog) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PreferencesDialog) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *PreferencesDialog) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xPreferencesDialogGLibType, lib, "adw_preferences_dialog_get_type")

	core.PuregoSafeRegister(&xNewPreferencesDialog, lib, "adw_preferences_dialog_new")

	core.PuregoSafeRegister(&xPreferencesDialogAdd, lib, "adw_preferences_dialog_add")
	core.PuregoSafeRegister(&xPreferencesDialogAddToast, lib, "adw_preferences_dialog_add_toast")
	core.PuregoSafeRegister(&xPreferencesDialogGetSearchEnabled, lib, "adw_preferences_dialog_get_search_enabled")
	core.PuregoSafeRegister(&xPreferencesDialogGetVisiblePage, lib, "adw_preferences_dialog_get_visible_page")
	core.PuregoSafeRegister(&xPreferencesDialogGetVisiblePageName, lib, "adw_preferences_dialog_get_visible_page_name")
	core.PuregoSafeRegister(&xPreferencesDialogPopSubpage, lib, "adw_preferences_dialog_pop_subpage")
	core.PuregoSafeRegister(&xPreferencesDialogPushSubpage, lib, "adw_preferences_dialog_push_subpage")
	core.PuregoSafeRegister(&xPreferencesDialogRemove, lib, "adw_preferences_dialog_remove")
	core.PuregoSafeRegister(&xPreferencesDialogSetSearchEnabled, lib, "adw_preferences_dialog_set_search_enabled")
	core.PuregoSafeRegister(&xPreferencesDialogSetVisiblePage, lib, "adw_preferences_dialog_set_visible_page")
	core.PuregoSafeRegister(&xPreferencesDialogSetVisiblePageName, lib, "adw_preferences_dialog_set_visible_page_name")

}
