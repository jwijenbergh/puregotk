// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type TabBarClass struct {
	ParentClass uintptr
}

func (x *TabBarClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A tab bar for [class@TabView].
//
// &lt;picture&gt;
//
//	&lt;source srcset="tab-bar-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="tab-bar.png" alt="tab-bar"&gt;
//
// &lt;/picture&gt;
//
// The `AdwTabBar` widget is a tab bar that can be used with conjunction with
// `AdwTabView`.
//
// `AdwTabBar` can autohide and can optionally contain action widgets on both
// sides of the tabs.
//
// When there's not enough space to show all the tabs, `AdwTabBar` will scroll
// them. Pinned tabs always stay visible and aren't a part of the scrollable
// area.
//
// ## CSS nodes
//
// `AdwTabBar` has a single CSS node with name `tabbar`.
type TabBar struct {
	gtk.Widget
}

var xTabBarGLibType func() types.GType

func TabBarGLibType() types.GType {
	return xTabBarGLibType()
}

func TabBarNewFromInternalPtr(ptr uintptr) *TabBar {
	cls := &TabBar{}
	cls.Ptr = ptr
	return cls
}

var xNewTabBar func() uintptr

// Creates a new `AdwTabBar`.
func NewTabBar() *TabBar {
	var cls *TabBar

	cret := xNewTabBar()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &TabBar{}
	cls.Ptr = cret
	return cls
}

var xTabBarGetAutohide func(uintptr) bool

// Gets whether the tabs automatically hide.
func (x *TabBar) GetAutohide() bool {

	cret := xTabBarGetAutohide(x.GoPointer())
	return cret
}

var xTabBarGetEndActionWidget func(uintptr) uintptr

// Gets the widget shown after the tabs.
func (x *TabBar) GetEndActionWidget() *gtk.Widget {
	var cls *gtk.Widget

	cret := xTabBarGetEndActionWidget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Widget{}
	cls.Ptr = cret
	return cls
}

var xTabBarGetExpandTabs func(uintptr) bool

// Gets whether tabs expand to full width.
func (x *TabBar) GetExpandTabs() bool {

	cret := xTabBarGetExpandTabs(x.GoPointer())
	return cret
}

var xTabBarGetExtraDragPreload func(uintptr) bool

// Gets whether drop data should be preloaded on hover.
func (x *TabBar) GetExtraDragPreload() bool {

	cret := xTabBarGetExtraDragPreload(x.GoPointer())
	return cret
}

var xTabBarGetInverted func(uintptr) bool

// Gets whether tabs use inverted layout.
func (x *TabBar) GetInverted() bool {

	cret := xTabBarGetInverted(x.GoPointer())
	return cret
}

var xTabBarGetIsOverflowing func(uintptr) bool

// Gets whether @self is overflowing.
//
// If `TRUE`, all tabs cannot be displayed at once and require scrolling.
func (x *TabBar) GetIsOverflowing() bool {

	cret := xTabBarGetIsOverflowing(x.GoPointer())
	return cret
}

var xTabBarGetStartActionWidget func(uintptr) uintptr

// Gets the widget shown before the tabs.
func (x *TabBar) GetStartActionWidget() *gtk.Widget {
	var cls *gtk.Widget

	cret := xTabBarGetStartActionWidget(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Widget{}
	cls.Ptr = cret
	return cls
}

var xTabBarGetTabsRevealed func(uintptr) bool

// Gets whether the tabs are currently revealed.
//
// See [property@TabBar:autohide].
func (x *TabBar) GetTabsRevealed() bool {

	cret := xTabBarGetTabsRevealed(x.GoPointer())
	return cret
}

var xTabBarGetView func(uintptr) uintptr

// Gets the tab view @self controls.
func (x *TabBar) GetView() *TabView {
	var cls *TabView

	cret := xTabBarGetView(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &TabView{}
	cls.Ptr = cret
	return cls
}

var xTabBarSetAutohide func(uintptr, bool)

// Sets whether the tabs automatically hide.
//
// If set to `TRUE`, the tab bar disappears when [property@TabBar:view] has 0
// or 1 tab, no pinned tabs, and no tab is being transferred.
//
// See [property@TabBar:tabs-revealed].
func (x *TabBar) SetAutohide(AutohideVar bool) {

	xTabBarSetAutohide(x.GoPointer(), AutohideVar)

}

var xTabBarSetEndActionWidget func(uintptr, uintptr)

// Sets the widget to show after the tabs.
func (x *TabBar) SetEndActionWidget(WidgetVar *gtk.Widget) {

	xTabBarSetEndActionWidget(x.GoPointer(), WidgetVar.GoPointer())

}

var xTabBarSetExpandTabs func(uintptr, bool)

// Sets whether tabs expand to full width.
//
// If set to `TRUE`, the tabs will always vary width filling the whole width
// when possible, otherwise tabs will always have the minimum possible size.
func (x *TabBar) SetExpandTabs(ExpandTabsVar bool) {

	xTabBarSetExpandTabs(x.GoPointer(), ExpandTabsVar)

}

var xTabBarSetExtraDragPreload func(uintptr, bool)

// Sets whether drop data should be preloaded on hover.
//
// See [property@Gtk.DropTarget:preload].
func (x *TabBar) SetExtraDragPreload(PreloadVar bool) {

	xTabBarSetExtraDragPreload(x.GoPointer(), PreloadVar)

}

var xTabBarSetInverted func(uintptr, bool)

// Sets whether tabs tabs use inverted layout.
//
// If set to `TRUE`, non-pinned tabs will have the close button at the beginning
// and the indicator at the end rather than the opposite.
func (x *TabBar) SetInverted(InvertedVar bool) {

	xTabBarSetInverted(x.GoPointer(), InvertedVar)

}

var xTabBarSetStartActionWidget func(uintptr, uintptr)

// Sets the widget to show before the tabs.
func (x *TabBar) SetStartActionWidget(WidgetVar *gtk.Widget) {

	xTabBarSetStartActionWidget(x.GoPointer(), WidgetVar.GoPointer())

}

var xTabBarSetView func(uintptr, uintptr)

// Sets the tab view @self controls.
func (x *TabBar) SetView(ViewVar *TabView) {

	xTabBarSetView(x.GoPointer(), ViewVar.GoPointer())

}

var xTabBarSetupExtraDropTarget func(uintptr, gdk.DragAction, []types.GType, uint)

// Sets the supported types for this drop target.
//
// Sets up an extra drop target on tabs.
//
// This allows to drag arbitrary content onto tabs, for example URLs in a web
// browser.
//
// If a tab is hovered for a certain period of time while dragging the content,
// it will be automatically selected.
//
// The [signal@TabBar::extra-drag-drop] signal can be used to handle the drop.
func (x *TabBar) SetupExtraDropTarget(ActionsVar gdk.DragAction, TypesVar []types.GType, NTypesVar uint) {

	xTabBarSetupExtraDropTarget(x.GoPointer(), ActionsVar, TypesVar, NTypesVar)

}

func (c *TabBar) GoPointer() uintptr {
	return c.Ptr
}

func (c *TabBar) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// This signal is emitted when content is dropped onto a tab.
//
// The content must be of one of the types set up via
// [method@TabBar.setup_extra_drop_target].
//
// See [signal@Gtk.DropTarget::drop].
func (x *TabBar) ConnectExtraDragDrop(cb *func(TabBar, uintptr, uintptr) bool) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "extra-drag-drop", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, PageVarp uintptr, ValueVarp uintptr) bool {
		fa := TabBar{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa, PageVarp, ValueVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "extra-drag-drop", cbRefPtr)
}

// This signal is emitted when the dropped content is preloaded.
//
// In order for data to be preloaded, [property@TabBar:extra-drag-preload]
// must be set to `TRUE`.
//
// The content must be of one of the types set up via
// [method@TabBar.setup_extra_drop_target].
//
// See [property@Gtk.DropTarget:value].
func (x *TabBar) ConnectExtraDragValue(cb *func(TabBar, uintptr, uintptr) gdk.DragAction) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "extra-drag-value", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, PageVarp uintptr, ValueVarp uintptr) gdk.DragAction {
		fa := TabBar{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa, PageVarp, ValueVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "extra-drag-value", cbRefPtr)
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *TabBar) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *TabBar) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *TabBar) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *TabBar) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *TabBar) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *TabBar) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *TabBar) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *TabBar) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *TabBar) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *TabBar) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *TabBar) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xTabBarGLibType, lib, "adw_tab_bar_get_type")

	core.PuregoSafeRegister(&xNewTabBar, lib, "adw_tab_bar_new")

	core.PuregoSafeRegister(&xTabBarGetAutohide, lib, "adw_tab_bar_get_autohide")
	core.PuregoSafeRegister(&xTabBarGetEndActionWidget, lib, "adw_tab_bar_get_end_action_widget")
	core.PuregoSafeRegister(&xTabBarGetExpandTabs, lib, "adw_tab_bar_get_expand_tabs")
	core.PuregoSafeRegister(&xTabBarGetExtraDragPreload, lib, "adw_tab_bar_get_extra_drag_preload")
	core.PuregoSafeRegister(&xTabBarGetInverted, lib, "adw_tab_bar_get_inverted")
	core.PuregoSafeRegister(&xTabBarGetIsOverflowing, lib, "adw_tab_bar_get_is_overflowing")
	core.PuregoSafeRegister(&xTabBarGetStartActionWidget, lib, "adw_tab_bar_get_start_action_widget")
	core.PuregoSafeRegister(&xTabBarGetTabsRevealed, lib, "adw_tab_bar_get_tabs_revealed")
	core.PuregoSafeRegister(&xTabBarGetView, lib, "adw_tab_bar_get_view")
	core.PuregoSafeRegister(&xTabBarSetAutohide, lib, "adw_tab_bar_set_autohide")
	core.PuregoSafeRegister(&xTabBarSetEndActionWidget, lib, "adw_tab_bar_set_end_action_widget")
	core.PuregoSafeRegister(&xTabBarSetExpandTabs, lib, "adw_tab_bar_set_expand_tabs")
	core.PuregoSafeRegister(&xTabBarSetExtraDragPreload, lib, "adw_tab_bar_set_extra_drag_preload")
	core.PuregoSafeRegister(&xTabBarSetInverted, lib, "adw_tab_bar_set_inverted")
	core.PuregoSafeRegister(&xTabBarSetStartActionWidget, lib, "adw_tab_bar_set_start_action_widget")
	core.PuregoSafeRegister(&xTabBarSetView, lib, "adw_tab_bar_set_view")
	core.PuregoSafeRegister(&xTabBarSetupExtraDropTarget, lib, "adw_tab_bar_setup_extra_drop_target")

}
