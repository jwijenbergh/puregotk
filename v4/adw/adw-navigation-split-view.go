// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type NavigationSplitViewClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *NavigationSplitViewClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A widget presenting sidebar and content side by side or as a navigation view.
//
// &lt;picture&gt;
//
//	&lt;source srcset="navigation-split-view-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="navigation-split-view.png" alt="navigation-split-view"&gt;
//
// &lt;/picture&gt;
// &lt;picture&gt;
//
//	&lt;source srcset="navigation-split-view-collapsed-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="navigation-split-view-collapsed.png" alt="navigation-split-view-collapsed"&gt;
//
// &lt;/picture&gt;
//
// `AdwNavigationSplitView` has two [class@NavigationPage] children: sidebar and
// content, and displays them side by side.
//
// When [property@NavigationSplitView:collapsed] is set to `TRUE`, it instead
// puts both children inside an [class@NavigationView]. The
// [property@NavigationSplitView:show-content] controls which child is visible
// while collapsed.
//
// See also [class@OverlaySplitView].
//
// `AdwNavigationSplitView` is typically used together with an [class@Breakpoint]
// setting the `collapsed` property to `TRUE` on small widths, as follows:
//
// ```xml
// &lt;object class="AdwWindow"&gt;
//
//	&lt;property name="width-request"&gt;280&lt;/property&gt;
//	&lt;property name="height-request"&gt;200&lt;/property&gt;
//	&lt;property name="default-width"&gt;800&lt;/property&gt;
//	&lt;property name="default-height"&gt;800&lt;/property&gt;
//	&lt;child&gt;
//	  &lt;object class="AdwBreakpoint"&gt;
//	    &lt;condition&gt;max-width: 400sp&lt;/condition&gt;
//	    &lt;setter object="split_view" property="collapsed"&gt;True&lt;/setter&gt;
//	  &lt;/object&gt;
//	&lt;/child&gt;
//	&lt;property name="content"&gt;
//	  &lt;object class="AdwNavigationSplitView" id="split_view"&gt;
//	    &lt;property name="sidebar"&gt;
//	      &lt;object class="AdwNavigationPage"&gt;
//	        &lt;property name="title" translatable="yes"&gt;Sidebar&lt;/property&gt;
//	        &lt;property name="child"&gt;
//	          &lt;!-- ... --&gt;
//	        &lt;/property&gt;
//	      &lt;/object&gt;
//	    &lt;/property&gt;
//	    &lt;property name="content"&gt;
//	      &lt;object class="AdwNavigationPage"&gt;
//	        &lt;property name="title" translatable="yes"&gt;Content&lt;/property&gt;
//	        &lt;property name="child"&gt;
//	          &lt;!-- ... --&gt;
//	        &lt;/property&gt;
//	      &lt;/object&gt;
//	    &lt;/property&gt;
//	  &lt;/object&gt;
//	&lt;/property&gt;
//
// &lt;/object&gt;
// ```
//
// ## Sizing
//
// When not collapsed, `AdwNavigationSplitView` changes the sidebar width
// depending on its own width.
//
// If possible, it tries to allocate a fraction of the total width, controlled
// with the [property@NavigationSplitView:sidebar-width-fraction] property.
//
// The sidebar also has minimum and maximum sizes, controlled with the
// [property@NavigationSplitView:min-sidebar-width] and
// [property@NavigationSplitView:max-sidebar-width] properties.
//
// The minimum and maximum sizes are using the length unit specified with the
// [property@NavigationSplitView:sidebar-width-unit].
//
// By default, sidebar is using 25% of the total width, with 180sp as the
// minimum size and 280sp as the maximum size.
//
// ## Header Bar Integration
//
// When used inside `AdwNavigationSplitView`, [class@HeaderBar] will
// automatically hide the window buttons in the middle.
//
// When collapsed, it also displays a back button for the content widget, as
// well as the page titles. See [class@NavigationView] documentation for details.
//
// ## Actions
//
// `AdwNavigationSplitView` defines the same actions as `AdwNavigationView`, but
// they can be used even when the split view is not collapsed:
//
// - `navigation.push` takes a string parameter specifying the tag of the page
// to push. If it matches the tag of the content widget, it sets
// [property@NavigationSplitView:show-content] to `TRUE`.
//
// - `navigation.pop` doesn't take any parameters and sets
// [property@NavigationSplitView:show-content] to `FALSE`.
//
// ## `AdwNavigationSplitView` as `GtkBuildable`
//
// The `AdwNavigationSplitView` implementation of the [iface@Gtk.Buildable]
// interface supports setting the sidebar widget by specifying “sidebar” as the
// “type” attribute of a `&lt;child&gt;` element, Specifying “content” child type or
// omitting it results in setting the content widget.
//
// ## CSS nodes
//
// `AdwNavigationSplitView` has a single CSS node with the name
// `navigation-split-view`.
//
// When collapsed, it contains a child node with the name `navigation-view`
// containing both children.
//
// ```
// navigation-split-view
// ╰── navigation-view
//
//	├── [sidebar child]
//	╰── [content child]
//
// ```
//
// When not collapsed, it contains two nodes with the name `widget`, one with
// the `.sidebar-pane` style class, the other one with `.content-view` style
// class, containing the sidebar and content children respectively.
//
// ```
// navigation-split-view
// ├── widget.sidebar-pane
// │   ╰── [sidebar child]
// ╰── widget.content-pane
//
//	╰── [content child]
//
// ```
//
// ## Accessibility
//
// `AdwNavigationSplitView` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.
type NavigationSplitView struct {
	gtk.Widget
}

var xNavigationSplitViewGLibType func() types.GType

func NavigationSplitViewGLibType() types.GType {
	return xNavigationSplitViewGLibType()
}

func NavigationSplitViewNewFromInternalPtr(ptr uintptr) *NavigationSplitView {
	cls := &NavigationSplitView{}
	cls.Ptr = ptr
	return cls
}

var xNewNavigationSplitView func() uintptr

// Creates a new `AdwNavigationSplitView`.
func NewNavigationSplitView() *NavigationSplitView {
	var cls *NavigationSplitView

	cret := xNewNavigationSplitView()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &NavigationSplitView{}
	cls.Ptr = cret
	return cls
}

var xNavigationSplitViewGetCollapsed func(uintptr) bool

// Gets whether @self is collapsed.
func (x *NavigationSplitView) GetCollapsed() bool {

	cret := xNavigationSplitViewGetCollapsed(x.GoPointer())
	return cret
}

var xNavigationSplitViewGetContent func(uintptr) uintptr

// Sets the content widget for @self.
func (x *NavigationSplitView) GetContent() *NavigationPage {
	var cls *NavigationPage

	cret := xNavigationSplitViewGetContent(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &NavigationPage{}
	cls.Ptr = cret
	return cls
}

var xNavigationSplitViewGetMaxSidebarWidth func(uintptr) float64

// Gets the maximum sidebar width for @self.
func (x *NavigationSplitView) GetMaxSidebarWidth() float64 {

	cret := xNavigationSplitViewGetMaxSidebarWidth(x.GoPointer())
	return cret
}

var xNavigationSplitViewGetMinSidebarWidth func(uintptr) float64

// Gets the minimum sidebar width for @self.
func (x *NavigationSplitView) GetMinSidebarWidth() float64 {

	cret := xNavigationSplitViewGetMinSidebarWidth(x.GoPointer())
	return cret
}

var xNavigationSplitViewGetShowContent func(uintptr) bool

// Gets which page is visible when @self is collapsed.
func (x *NavigationSplitView) GetShowContent() bool {

	cret := xNavigationSplitViewGetShowContent(x.GoPointer())
	return cret
}

var xNavigationSplitViewGetSidebar func(uintptr) uintptr

// Gets the sidebar widget for @self.
func (x *NavigationSplitView) GetSidebar() *NavigationPage {
	var cls *NavigationPage

	cret := xNavigationSplitViewGetSidebar(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &NavigationPage{}
	cls.Ptr = cret
	return cls
}

var xNavigationSplitViewGetSidebarWidthFraction func(uintptr) float64

// Gets the preferred sidebar width fraction for @self.
func (x *NavigationSplitView) GetSidebarWidthFraction() float64 {

	cret := xNavigationSplitViewGetSidebarWidthFraction(x.GoPointer())
	return cret
}

var xNavigationSplitViewGetSidebarWidthUnit func(uintptr) LengthUnit

// Gets the length unit for minimum and maximum sidebar widths.
func (x *NavigationSplitView) GetSidebarWidthUnit() LengthUnit {

	cret := xNavigationSplitViewGetSidebarWidthUnit(x.GoPointer())
	return cret
}

var xNavigationSplitViewSetCollapsed func(uintptr, bool)

// Sets whether @self is collapsed.
//
// When collapsed, the children are put inside an [class@NavigationView],
// otherwise they are displayed side by side.
//
// The [property@NavigationSplitView:show-content] controls which child is
// visible while collapsed.
func (x *NavigationSplitView) SetCollapsed(CollapsedVar bool) {

	xNavigationSplitViewSetCollapsed(x.GoPointer(), CollapsedVar)

}

var xNavigationSplitViewSetContent func(uintptr, uintptr)

// Sets the content widget for @self.
func (x *NavigationSplitView) SetContent(ContentVar *NavigationPage) {

	xNavigationSplitViewSetContent(x.GoPointer(), ContentVar.GoPointer())

}

var xNavigationSplitViewSetMaxSidebarWidth func(uintptr, float64)

// Sets the maximum sidebar width for @self.
//
// Maximum width is affected by
// [property@NavigationSplitView:sidebar-width-unit].
//
// The sidebar widget can still be allocated with larger width if its own
// minimum width exceeds it.
func (x *NavigationSplitView) SetMaxSidebarWidth(WidthVar float64) {

	xNavigationSplitViewSetMaxSidebarWidth(x.GoPointer(), WidthVar)

}

var xNavigationSplitViewSetMinSidebarWidth func(uintptr, float64)

// Sets the minimum sidebar width for @self.
//
// Minimum width is affected by
// [property@NavigationSplitView:sidebar-width-unit].
//
// The sidebar widget can still be allocated with larger width if its own
// minimum width exceeds it.
func (x *NavigationSplitView) SetMinSidebarWidth(WidthVar float64) {

	xNavigationSplitViewSetMinSidebarWidth(x.GoPointer(), WidthVar)

}

var xNavigationSplitViewSetShowContent func(uintptr, bool)

// Sets which page is visible when @self is collapsed.
//
// If set to `TRUE`, the content widget will be the visible page when
// [property@NavigationSplitView:collapsed] is `TRUE`; otherwise the sidebar
// widget will be visible.
//
// If the split view is already collapsed, the visible page changes immediately.
func (x *NavigationSplitView) SetShowContent(ShowContentVar bool) {

	xNavigationSplitViewSetShowContent(x.GoPointer(), ShowContentVar)

}

var xNavigationSplitViewSetSidebar func(uintptr, uintptr)

// Sets the sidebar widget for @self.
func (x *NavigationSplitView) SetSidebar(SidebarVar *NavigationPage) {

	xNavigationSplitViewSetSidebar(x.GoPointer(), SidebarVar.GoPointer())

}

var xNavigationSplitViewSetSidebarWidthFraction func(uintptr, float64)

// Sets the preferred sidebar width as a fraction of the total width of @self.
//
// The preferred width is additionally limited by
// [property@NavigationSplitView:min-sidebar-width] and
// [property@NavigationSplitView:max-sidebar-width].
//
// The sidebar widget can be allocated with larger width if its own minimum
// width exceeds the preferred width.
func (x *NavigationSplitView) SetSidebarWidthFraction(FractionVar float64) {

	xNavigationSplitViewSetSidebarWidthFraction(x.GoPointer(), FractionVar)

}

var xNavigationSplitViewSetSidebarWidthUnit func(uintptr, LengthUnit)

// Sets the length unit for minimum and maximum sidebar widths.
//
// See [property@NavigationSplitView:min-sidebar-width] and
// [property@NavigationSplitView:max-sidebar-width].
func (x *NavigationSplitView) SetSidebarWidthUnit(UnitVar LengthUnit) {

	xNavigationSplitViewSetSidebarWidthUnit(x.GoPointer(), UnitVar)

}

func (c *NavigationSplitView) GoPointer() uintptr {
	return c.Ptr
}

func (c *NavigationSplitView) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *NavigationSplitView) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *NavigationSplitView) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *NavigationSplitView) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *NavigationSplitView) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *NavigationSplitView) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *NavigationSplitView) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *NavigationSplitView) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *NavigationSplitView) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *NavigationSplitView) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *NavigationSplitView) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *NavigationSplitView) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNavigationSplitViewGLibType, lib, "adw_navigation_split_view_get_type")

	core.PuregoSafeRegister(&xNewNavigationSplitView, lib, "adw_navigation_split_view_new")

	core.PuregoSafeRegister(&xNavigationSplitViewGetCollapsed, lib, "adw_navigation_split_view_get_collapsed")
	core.PuregoSafeRegister(&xNavigationSplitViewGetContent, lib, "adw_navigation_split_view_get_content")
	core.PuregoSafeRegister(&xNavigationSplitViewGetMaxSidebarWidth, lib, "adw_navigation_split_view_get_max_sidebar_width")
	core.PuregoSafeRegister(&xNavigationSplitViewGetMinSidebarWidth, lib, "adw_navigation_split_view_get_min_sidebar_width")
	core.PuregoSafeRegister(&xNavigationSplitViewGetShowContent, lib, "adw_navigation_split_view_get_show_content")
	core.PuregoSafeRegister(&xNavigationSplitViewGetSidebar, lib, "adw_navigation_split_view_get_sidebar")
	core.PuregoSafeRegister(&xNavigationSplitViewGetSidebarWidthFraction, lib, "adw_navigation_split_view_get_sidebar_width_fraction")
	core.PuregoSafeRegister(&xNavigationSplitViewGetSidebarWidthUnit, lib, "adw_navigation_split_view_get_sidebar_width_unit")
	core.PuregoSafeRegister(&xNavigationSplitViewSetCollapsed, lib, "adw_navigation_split_view_set_collapsed")
	core.PuregoSafeRegister(&xNavigationSplitViewSetContent, lib, "adw_navigation_split_view_set_content")
	core.PuregoSafeRegister(&xNavigationSplitViewSetMaxSidebarWidth, lib, "adw_navigation_split_view_set_max_sidebar_width")
	core.PuregoSafeRegister(&xNavigationSplitViewSetMinSidebarWidth, lib, "adw_navigation_split_view_set_min_sidebar_width")
	core.PuregoSafeRegister(&xNavigationSplitViewSetShowContent, lib, "adw_navigation_split_view_set_show_content")
	core.PuregoSafeRegister(&xNavigationSplitViewSetSidebar, lib, "adw_navigation_split_view_set_sidebar")
	core.PuregoSafeRegister(&xNavigationSplitViewSetSidebarWidthFraction, lib, "adw_navigation_split_view_set_sidebar_width_fraction")
	core.PuregoSafeRegister(&xNavigationSplitViewSetSidebarWidthUnit, lib, "adw_navigation_split_view_set_sidebar_width_unit")

}
