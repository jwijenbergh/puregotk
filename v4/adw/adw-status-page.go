// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type StatusPageClass struct {
	ParentClass uintptr
}

func (x *StatusPageClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A page used for empty/error states and similar use-cases.
//
// &lt;picture&gt;
//
//	&lt;source srcset="status-page-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="status-page.png" alt="status-page"&gt;
//
// &lt;/picture&gt;
//
// The `AdwStatusPage` widget can have an icon, a title, a description and a
// custom widget which is displayed below them.
//
// ## CSS nodes
//
// `AdwStatusPage` has a main CSS node with name `statuspage`.
//
// `AdwStatusPage` can use the
// [`.compact`](style-classes.html#compact-status-page) style class for when it
// needs to fit into a small space such a sidebar or a popover.
type StatusPage struct {
	gtk.Widget
}

func StatusPageNewFromInternalPtr(ptr uintptr) *StatusPage {
	cls := &StatusPage{}
	cls.Ptr = ptr
	return cls
}

var xNewStatusPage func() uintptr

// Creates a new `AdwStatusPage`.
func NewStatusPage() *StatusPage {
	var cls *StatusPage

	cret := xNewStatusPage()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &StatusPage{}
	cls.Ptr = cret
	return cls
}

var xStatusPageGetChild func(uintptr) uintptr

// Gets the child widget of @self.
func (x *StatusPage) GetChild() *gtk.Widget {
	var cls *gtk.Widget

	cret := xStatusPageGetChild(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Widget{}
	cls.Ptr = cret
	return cls
}

var xStatusPageGetDescription func(uintptr) string

// Gets the description for @self.
func (x *StatusPage) GetDescription() string {

	cret := xStatusPageGetDescription(x.GoPointer())
	return cret
}

var xStatusPageGetIconName func(uintptr) string

// Gets the icon name for @self.
func (x *StatusPage) GetIconName() string {

	cret := xStatusPageGetIconName(x.GoPointer())
	return cret
}

var xStatusPageGetPaintable func(uintptr) uintptr

// Gets the paintable for @self.
func (x *StatusPage) GetPaintable() *gdk.PaintableBase {
	var cls *gdk.PaintableBase

	cret := xStatusPageGetPaintable(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gdk.PaintableBase{}
	cls.Ptr = cret
	return cls
}

var xStatusPageGetTitle func(uintptr) string

// Gets the title for @self.
func (x *StatusPage) GetTitle() string {

	cret := xStatusPageGetTitle(x.GoPointer())
	return cret
}

var xStatusPageSetChild func(uintptr, uintptr)

// Sets the child widget of @self.
func (x *StatusPage) SetChild(ChildVar *gtk.Widget) {

	xStatusPageSetChild(x.GoPointer(), ChildVar.GoPointer())

}

var xStatusPageSetDescription func(uintptr, string)

// Sets the description for @self.
//
// The description is displayed below the title.
func (x *StatusPage) SetDescription(DescriptionVar string) {

	xStatusPageSetDescription(x.GoPointer(), DescriptionVar)

}

var xStatusPageSetIconName func(uintptr, string)

// Sets the icon name for @self.
//
// Changing this will set [property@StatusPage:paintable] to `NULL`.
func (x *StatusPage) SetIconName(IconNameVar string) {

	xStatusPageSetIconName(x.GoPointer(), IconNameVar)

}

var xStatusPageSetPaintable func(uintptr, uintptr)

// Sets the paintable for @self.
//
// Changing this will set [property@StatusPage:icon-name] to `NULL`.
func (x *StatusPage) SetPaintable(PaintableVar gdk.Paintable) {

	xStatusPageSetPaintable(x.GoPointer(), PaintableVar.GoPointer())

}

var xStatusPageSetTitle func(uintptr, string)

// Sets the title for @self.
//
// The title is displayed below the icon.
func (x *StatusPage) SetTitle(TitleVar string) {

	xStatusPageSetTitle(x.GoPointer(), TitleVar)

}

func (c *StatusPage) GoPointer() uintptr {
	return c.Ptr
}

func (c *StatusPage) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *StatusPage) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *StatusPage) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *StatusPage) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *StatusPage) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *StatusPage) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *StatusPage) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *StatusPage) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *StatusPage) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *StatusPage) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *StatusPage) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *StatusPage) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewStatusPage, lib, "adw_status_page_new")

	core.PuregoSafeRegister(&xStatusPageGetChild, lib, "adw_status_page_get_child")
	core.PuregoSafeRegister(&xStatusPageGetDescription, lib, "adw_status_page_get_description")
	core.PuregoSafeRegister(&xStatusPageGetIconName, lib, "adw_status_page_get_icon_name")
	core.PuregoSafeRegister(&xStatusPageGetPaintable, lib, "adw_status_page_get_paintable")
	core.PuregoSafeRegister(&xStatusPageGetTitle, lib, "adw_status_page_get_title")
	core.PuregoSafeRegister(&xStatusPageSetChild, lib, "adw_status_page_set_child")
	core.PuregoSafeRegister(&xStatusPageSetDescription, lib, "adw_status_page_set_description")
	core.PuregoSafeRegister(&xStatusPageSetIconName, lib, "adw_status_page_set_icon_name")
	core.PuregoSafeRegister(&xStatusPageSetPaintable, lib, "adw_status_page_set_paintable")
	core.PuregoSafeRegister(&xStatusPageSetTitle, lib, "adw_status_page_set_title")

}
