// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type BreakpointBinClass struct {
	_ structs.HostLayout

	ParentClass uintptr

	Padding [4]uintptr
}

func (x *BreakpointBinClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A widget that changes layout based on available size.
//
// &lt;picture&gt;
//
//	&lt;source srcset="breakpoint-bin-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="breakpoint-bin.png" alt="breakpoint-bin"&gt;
//
// &lt;/picture&gt;
//
// `AdwBreakpointBin` provides a way to use breakpoints without [class@Window],
// [class@ApplicationWindow] or [class@Dialog]. It can be useful for limiting
// breakpoints to a single page and similar purposes. Most applications
// shouldn't need it.
//
// `AdwBreakpointBin` is similar to [class@Bin]. It has one child, set via the
// [property@BreakpointBin:child] property.
//
// When `AdwBreakpointBin` is resized, its child widget can rearrange its layout
// at specific thresholds.
//
// The thresholds and layout changes are defined via [class@Breakpoint] objects.
// They can be added using [method@BreakpointBin.add_breakpoint].
//
// Each breakpoint has a condition, specifying the bin's size and/or aspect
// ratio, and setters that automatically set object properties when that
// happens. The [signal@Breakpoint::apply] and [signal@Breakpoint::unapply] can
// be used instead for more complex scenarios.
//
// Breakpoints are only allowed to modify widgets inside the `AdwBreakpointBin`,
// but not on the `AdwBreakpointBin` itself or any other widgets.
//
// If multiple breakpoints can be used for the current size, the last one is
// always picked. The current breakpoint can be tracked using the
// [property@BreakpointBin:current-breakpoint] property.
//
// If none of the breakpoints can be used, that property will be set to `NULL`,
// and the original property values will be used instead.
//
// ## Minimum Size
//
// Adding a breakpoint to `AdwBreakpointBin` will result in it having no minimum
// size. The [property@Gtk.Widget:width-request] and
// [property@Gtk.Widget:height-request] properties must always be set when using
// breakpoints, indicating the smallest size you want to support.
//
// The minimum size and breakpoint conditions must be carefully selected so that
// the child widget completely fits. If it doesn't, it will overflow and a
// warning message will be printed.
//
// When choosing minimum size, consider translations and text scale factor
// changes. Make sure to leave enough space for text labels, and enable
// ellipsizing or wrapping if they might not fit.
//
// For [class@Gtk.Label] this can be done via [property@Gtk.Label:ellipsize], or
// via [property@Gtk.Label:wrap] together with [property@Gtk.Label:wrap-mode].
//
// For buttons, use [property@Gtk.Button:can-shrink],
// [property@Gtk.MenuButton:can-shrink], [property@Adw.SplitButton:can-shrink],
// or [property@Adw.ButtonContent:can-shrink].
//
// ## Example
//
// ```c
// GtkWidget *bin, *child;
// AdwBreakpoint *breakpoint;
//
// bin = adw_breakpoint_bin_new ();
// gtk_widget_set_size_request (bin, 150, 150);
//
// child = gtk_label_new ("Wide");
// gtk_label_set_ellipsize (GTK_LABEL (label), PANGO_ELLIPSIZE_END);
// gtk_widget_add_css_class (child, "title-1");
// adw_breakpoint_bin_set_child (ADW_BREAKPOINT_BIN (bin), child);
//
// breakpoint = adw_breakpoint_new (adw_breakpoint_condition_parse ("max-width: 200px"));
// adw_breakpoint_add_setters (breakpoint,
//
//	G_OBJECT (child), "label", "Narrow",
//	NULL);
//
// adw_breakpoint_bin_add_breakpoint (ADW_BREAKPOINT_BIN (bin), breakpoint);
// ```
//
// The bin has a single label inside it, displaying "Wide". When the bin's width
// is smaller than or equal to 200px, it changes to "Narrow".
//
// ## `AdwBreakpointBin` as `GtkBuildable`
//
// `AdwBreakpointBin` allows adding `AdwBreakpoint` objects as children.
//
// Example of an `AdwBreakpointBin` UI definition:
//
// ```xml
// &lt;object class="AdwBreakpointBin"&gt;
//
//	&lt;property name="width-request"&gt;150&lt;/property&gt;
//	&lt;property name="height-request"&gt;150&lt;/property&gt;
//	&lt;property name="child"&gt;
//	  &lt;object class="GtkLabel" id="child"&gt;
//	    &lt;property name="label"&gt;Wide&lt;/property&gt;
//	    &lt;property name="ellipsize"&gt;end&lt;/property&gt;
//	    &lt;style&gt;
//	      &lt;class name="title-1"/&gt;
//	    &lt;/style&gt;
//	  &lt;/object&gt;
//	&lt;/property&gt;
//	&lt;child&gt;
//	  &lt;object class="AdwBreakpoint"&gt;
//	    &lt;condition&gt;max-width: 200px&lt;/condition&gt;
//	    &lt;setter object="child" property="label"&gt;Narrow&lt;/setter&gt;
//	  &lt;/object&gt;
//	&lt;/child&gt;
//
// &lt;/object&gt;
// ```
//
// See [class@Breakpoint] documentation for details.
type BreakpointBin struct {
	gtk.Widget
}

var xBreakpointBinGLibType func() types.GType

func BreakpointBinGLibType() types.GType {
	return xBreakpointBinGLibType()
}

func BreakpointBinNewFromInternalPtr(ptr uintptr) *BreakpointBin {
	cls := &BreakpointBin{}
	cls.Ptr = ptr
	return cls
}

var xNewBreakpointBin func() uintptr

// Creates a new `AdwBreakpointBin`.
func NewBreakpointBin() *BreakpointBin {
	var cls *BreakpointBin

	cret := xNewBreakpointBin()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &BreakpointBin{}
	cls.Ptr = cret
	return cls
}

var xBreakpointBinAddBreakpoint func(uintptr, uintptr)

// Adds @breakpoint to @self.
func (x *BreakpointBin) AddBreakpoint(BreakpointVar *Breakpoint) {

	xBreakpointBinAddBreakpoint(x.GoPointer(), BreakpointVar.GoPointer())

}

var xBreakpointBinGetChild func(uintptr) uintptr

// Gets the child widget of @self.
func (x *BreakpointBin) GetChild() *gtk.Widget {
	var cls *gtk.Widget

	cret := xBreakpointBinGetChild(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Widget{}
	cls.Ptr = cret
	return cls
}

var xBreakpointBinGetCurrentBreakpoint func(uintptr) uintptr

// Gets the current breakpoint.
func (x *BreakpointBin) GetCurrentBreakpoint() *Breakpoint {
	var cls *Breakpoint

	cret := xBreakpointBinGetCurrentBreakpoint(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Breakpoint{}
	cls.Ptr = cret
	return cls
}

var xBreakpointBinRemoveBreakpoint func(uintptr, uintptr)

// Removes @breakpoint from @self.
func (x *BreakpointBin) RemoveBreakpoint(BreakpointVar *Breakpoint) {

	xBreakpointBinRemoveBreakpoint(x.GoPointer(), BreakpointVar.GoPointer())

}

var xBreakpointBinSetChild func(uintptr, uintptr)

// Sets the child widget of @self.
func (x *BreakpointBin) SetChild(ChildVar *gtk.Widget) {

	xBreakpointBinSetChild(x.GoPointer(), ChildVar.GoPointer())

}

func (c *BreakpointBin) GoPointer() uintptr {
	return c.Ptr
}

func (c *BreakpointBin) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *BreakpointBin) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *BreakpointBin) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *BreakpointBin) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *BreakpointBin) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *BreakpointBin) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *BreakpointBin) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *BreakpointBin) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *BreakpointBin) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *BreakpointBin) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *BreakpointBin) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *BreakpointBin) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xBreakpointBinGLibType, lib, "adw_breakpoint_bin_get_type")

	core.PuregoSafeRegister(&xNewBreakpointBin, lib, "adw_breakpoint_bin_new")

	core.PuregoSafeRegister(&xBreakpointBinAddBreakpoint, lib, "adw_breakpoint_bin_add_breakpoint")
	core.PuregoSafeRegister(&xBreakpointBinGetChild, lib, "adw_breakpoint_bin_get_child")
	core.PuregoSafeRegister(&xBreakpointBinGetCurrentBreakpoint, lib, "adw_breakpoint_bin_get_current_breakpoint")
	core.PuregoSafeRegister(&xBreakpointBinRemoveBreakpoint, lib, "adw_breakpoint_bin_remove_breakpoint")
	core.PuregoSafeRegister(&xBreakpointBinSetChild, lib, "adw_breakpoint_bin_set_child")

}
