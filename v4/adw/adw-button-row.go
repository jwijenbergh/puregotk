// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type ButtonRowClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *ButtonRowClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A [class@Gtk.ListBoxRow] that looks like a button.
//
// &lt;picture&gt;
//
//	&lt;source srcset="button-rows-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="button-rows.png" alt="button-rows"&gt;
//
// &lt;/picture&gt;
//
// The `AdwButtonRow` widget has a title and two icons: before and after the
// title.
//
// It is convenient for presenting actions like "Delete" at the end of a boxed
// list.
//
// `AdwButtonRow` is always activatable.
//
// ## CSS nodes
//
// `AdwButtonRow` has a main CSS node with name `row` and the style class
// `.button`.
//
// It contains the subnode `box` for its main horizontal box, which contains the
// nodes: `image.icon.start` for the start icon, `label.title` for the title,
// and `image.icon.end` for the end icon.
//
// ## Style classes
//
// The [`.suggested-action`](style-classes.html#suggested-action) style class
// makes `AdwButtonRow` use accent color for its background. It should be used
// very sparingly to denote important buttons.
//
// &lt;picture&gt;
//
//	&lt;source srcset="button-row-suggested-action-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="button-row-suggested-action.png" alt="button-row-suggested-action"&gt;
//
// &lt;/picture&gt;
//
// The [`.destructive-action`](style-classes.html#destructive-action) style
// makes the row use destructive colors. It can be used to draw attention to the
// potentially damaging consequences of using it. This style acts as a warning
// to the user.
//
// &lt;picture&gt;
//
//	&lt;source srcset="button-row-destructive-action-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="button-row-destructive-action.png" alt="button-row-destructive-action"&gt;
//
// &lt;/picture&gt;
type ButtonRow struct {
	PreferencesRow
}

var xButtonRowGLibType func() types.GType

func ButtonRowGLibType() types.GType {
	return xButtonRowGLibType()
}

func ButtonRowNewFromInternalPtr(ptr uintptr) *ButtonRow {
	cls := &ButtonRow{}
	cls.Ptr = ptr
	return cls
}

var xNewButtonRow func() uintptr

// Creates a new `AdwButtonRow`.
func NewButtonRow() *ButtonRow {
	var cls *ButtonRow

	cret := xNewButtonRow()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ButtonRow{}
	cls.Ptr = cret
	return cls
}

var xButtonRowGetEndIconName func(uintptr) string

// Gets the end icon name for @self.
func (x *ButtonRow) GetEndIconName() string {

	cret := xButtonRowGetEndIconName(x.GoPointer())
	return cret
}

var xButtonRowGetStartIconName func(uintptr) string

// Gets the start icon name for @self.
func (x *ButtonRow) GetStartIconName() string {

	cret := xButtonRowGetStartIconName(x.GoPointer())
	return cret
}

var xButtonRowSetEndIconName func(uintptr, string)

// Sets the end icon name for @self.
func (x *ButtonRow) SetEndIconName(IconNameVar string) {

	xButtonRowSetEndIconName(x.GoPointer(), IconNameVar)

}

var xButtonRowSetStartIconName func(uintptr, string)

// Sets the start icon name for @self.
func (x *ButtonRow) SetStartIconName(IconNameVar string) {

	xButtonRowSetStartIconName(x.GoPointer(), IconNameVar)

}

func (c *ButtonRow) GoPointer() uintptr {
	return c.Ptr
}

func (c *ButtonRow) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// This signal is emitted after the row has been activated.
func (x *ButtonRow) ConnectActivated(cb *func(ButtonRow)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "activated", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := ButtonRow{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "activated", cbRefPtr)
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *ButtonRow) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *ButtonRow) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *ButtonRow) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *ButtonRow) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *ButtonRow) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ButtonRow) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *ButtonRow) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ButtonRow) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *ButtonRow) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ButtonRow) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the action name for @actionable.
func (x *ButtonRow) GetActionName() string {

	cret := gtk.XGtkActionableGetActionName(x.GoPointer())
	return cret
}

// Gets the current target value of @actionable.
func (x *ButtonRow) GetActionTargetValue() *glib.Variant {

	cret := gtk.XGtkActionableGetActionTargetValue(x.GoPointer())
	return cret
}

// Specifies the name of the action with which this widget should be
// associated.
//
// If @action_name is %NULL then the widget will be unassociated from
// any previous action.
//
// Usually this function is used when the widget is located (or will be
// located) within the hierarchy of a `GtkApplicationWindow`.
//
// Names are of the form “win.save” or “app.quit” for actions on the
// containing [class@ApplicationWindow] or its associated [class@Application],
// respectively. This is the same form used for actions in the [class@Gio.Menu]
// associated with the window.
func (x *ButtonRow) SetActionName(ActionNameVar string) {

	gtk.XGtkActionableSetActionName(x.GoPointer(), ActionNameVar)

}

// Sets the target of an actionable widget.
//
// This is a convenience function that calls [ctor@GLib.Variant.new] for
// @format_string and uses the result to call
// [method@Gtk.Actionable.set_action_target_value].
//
// If you are setting a string-valued target and want to set
// the action name at the same time, you can use
// [method@Gtk.Actionable.set_detailed_action_name].
func (x *ButtonRow) SetActionTarget(FormatStringVar string, varArgs ...interface{}) {

	gtk.XGtkActionableSetActionTarget(x.GoPointer(), FormatStringVar, varArgs...)

}

// Sets the target value of an actionable widget.
//
// If @target_value is %NULL then the target value is unset.
//
// The target value has two purposes. First, it is used as the parameter
// to activation of the action associated with the `GtkActionable` widget.
// Second, it is used to determine if the widget should be rendered as
// “active” — the widget is active if the state is equal to the given target.
//
// Consider the example of associating a set of buttons with a [iface@Gio.Action]
// with string state in a typical “radio button” situation. Each button
// will be associated with the same action, but with a different target
// value for that action. Clicking on a particular button will activate
// the action with the target of that button, which will typically cause
// the action’s state to change to that value. Since the action’s state
// is now equal to the target value of the button, the button will now
// be rendered as active (and the other buttons, with different targets,
// rendered inactive).
func (x *ButtonRow) SetActionTargetValue(TargetValueVar *glib.Variant) {

	gtk.XGtkActionableSetActionTargetValue(x.GoPointer(), TargetValueVar)

}

// Sets the action-name and associated string target value of an
// actionable widget.
//
// @detailed_action_name is a string in the format accepted by
// [func@Gio.Action.parse_detailed_name].
func (x *ButtonRow) SetDetailedActionName(DetailedActionNameVar string) {

	gtk.XGtkActionableSetDetailedActionName(x.GoPointer(), DetailedActionNameVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *ButtonRow) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xButtonRowGLibType, lib, "adw_button_row_get_type")

	core.PuregoSafeRegister(&xNewButtonRow, lib, "adw_button_row_new")

	core.PuregoSafeRegister(&xButtonRowGetEndIconName, lib, "adw_button_row_get_end_icon_name")
	core.PuregoSafeRegister(&xButtonRowGetStartIconName, lib, "adw_button_row_get_start_icon_name")
	core.PuregoSafeRegister(&xButtonRowSetEndIconName, lib, "adw_button_row_set_end_icon_name")
	core.PuregoSafeRegister(&xButtonRowSetStartIconName, lib, "adw_button_row_set_start_icon_name")

}
