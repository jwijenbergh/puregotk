// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type ToolbarViewClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *ToolbarViewClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// Describes the possible top or bottom bar styles in an [class@ToolbarView]
// widget.
//
// `ADW_TOOLBAR_FLAT` is suitable for simple content, such as
// [class@StatusPage] or [class@PreferencesPage], where the background at the
// top and bottom parts of the page is uniform. Additionally, windows with
// sidebars should always use this style.
//
// &lt;picture style="min-width: 33%; display: inline-block;"&gt;
//
//	&lt;source srcset="toolbar-view-flat-1-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="toolbar-view-flat-1.png" alt="toolbar-view-flat-1"&gt;
//
// &lt;/picture&gt;
// &lt;picture style="min-width: 33%; display: inline-block;"&gt;
//
//	&lt;source srcset="toolbar-view-flat-2-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="toolbar-view-flat-2.png" alt="toolbar-view-flat-2"&gt;
//
// &lt;/picture&gt;
//
// `ADW_TOOLBAR_RAISED` style is suitable for content such as
// [utility panes](https://developer.gnome.org/hig/patterns/containers/utility-panes.html),
// where some elements are directly adjacent to the top/bottom bars, or
// [class@TabView], where each page can have a different background.
//
// `ADW_TOOLBAR_RAISED_BORDER` style is similar to `ADW_TOOLBAR_RAISED`, but
// with the shadow replaced with a more subtle border. It's intended to be used
// in applications like image viewers, where a shadow over the content might be
// undesired.
//
// &lt;picture style="min-width: 33%; display: inline-block;"&gt;
//
//	&lt;source srcset="toolbar-view-raised-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="toolbar-view-raised.png" alt="toolbar-view-raised"&gt;
//
// &lt;/picture&gt;
// &lt;picture style="min-width: 33%; display: inline-block;"&gt;
//
//	&lt;source srcset="toolbar-view-raised-border-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="toolbar-view-raised-border.png" alt="toolbar-view-raised-border"&gt;
//
// &lt;/picture&gt;
//
// See [property@ToolbarView:top-bar-style] and
// [property@ToolbarView:bottom-bar-style].
//
// New values may be added to this enumeration over time.
type ToolbarStyle int

var xToolbarStyleGLibType func() types.GType

func ToolbarStyleGLibType() types.GType {
	return xToolbarStyleGLibType()
}

const (

	// No background, shadow only for scrolled content
	ToolbarFlatValue ToolbarStyle = 0
	// Opaque background with a persistent shadow
	ToolbarRaisedValue ToolbarStyle = 1
	// Opaque background with a persistent border
	ToolbarRaisedBorderValue ToolbarStyle = 2
)

// A widget containing a page, as well as top and/or bottom bars.
//
// &lt;picture&gt;
//
//	&lt;source srcset="toolbar-view-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="toolbar-view.png" alt="toolbar-view"&gt;
//
// &lt;/picture&gt;
//
// `AdwToolbarView` has a single content widget and one or multiple top and
// bottom bars, shown at the top and bottom sides respectively.
//
// Example of an `AdwToolbarView` UI definition:
// ```xml
// &lt;object class="AdwToolbarView"&gt;
//
//	&lt;child type="top"&gt;
//	  &lt;object class="AdwHeaderBar"/&gt;
//	&lt;/child&gt;
//	&lt;property name="content"&gt;
//	  &lt;object class="AdwPreferencesPage"&gt;
//	    &lt;!-- ... --&gt;
//	  &lt;/object&gt;
//	&lt;/property&gt;
//
// &lt;/object&gt;
// ```
//
// The following kinds of top and bottom bars are supported:
//
//   - [class@HeaderBar]
//   - [class@TabBar]
//   - [class@ViewSwitcherBar]
//   - [class@Gtk.ActionBar]
//   - [class@Gtk.HeaderBar]
//   - [class@Gtk.PopoverMenuBar]
//   - [class@Gtk.SearchBar]
//   - Any [class@Gtk.Box] or a similar widget with the
//     [`.toolbar`](style-classes.html#toolbars) style class
//
// By default, top and bottom bars are flat and scrolling content has a subtle
// undershoot shadow, same as when using the
// [`.undershoot-top`](style-classes.html#undershoot-indicators) and
// [`.undershoot-bottom`](style-classes.html#undershoot-indicators) style
// classes. This works well in most cases, e.g. with [class@StatusPage] or
// [class@PreferencesPage], where the background at the top and bottom parts of
// the page is uniform. Additionally, windows with sidebars should always use
// this style.
//
// [property@ToolbarView:top-bar-style] and
// [property@ToolbarView:bottom-bar-style] properties can be used add an opaque
// background and a persistent shadow to top and bottom bars, this can be useful
// for content such as [utility panes](https://developer.gnome.org/hig/patterns/containers/utility-panes.html),
// where some elements are adjacent to the top/bottom bars, or [class@TabView],
// where each page can have a different background.
//
// &lt;picture style="min-width: 33%; display: inline-block;"&gt;
//
//	&lt;source srcset="toolbar-view-flat-1-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="toolbar-view-flat-1.png" alt="toolbar-view-flat-1"&gt;
//
// &lt;/picture&gt;
// &lt;picture style="min-width: 33%; display: inline-block;"&gt;
//
//	&lt;source srcset="toolbar-view-flat-2-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="toolbar-view-flat-2.png" alt="toolbar-view-flat-2"&gt;
//
// &lt;/picture&gt;
// &lt;picture style="min-width: 33%; display: inline-block;"&gt;
//
//	&lt;source srcset="toolbar-view-raised-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="toolbar-view-raised.png" alt="toolbar-view-raised"&gt;
//
// &lt;/picture&gt;
//
// `AdwToolbarView` ensures the top and bottom bars have consistent backdrop
// styles and vertical spacing. For comparison:
//
// &lt;picture style="min-width: 40%; display: inline-block;"&gt;
//
//	&lt;source srcset="toolbar-view-spacing-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="toolbar-view-spacing.png" alt="toolbar-view-spacing"&gt;
//
// &lt;/picture&gt;
// &lt;picture style="min-width: 40%; display: inline-block;"&gt;
//
//	&lt;source srcset="toolbar-view-spacing-box-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="toolbar-view-spacing-box.png" alt="toolbar-view-spacing-box"&gt;
//
// &lt;/picture&gt;
//
// Any top and bottom bars can also be dragged to move the window, equivalent
// to putting them into a [class@Gtk.WindowHandle].
//
// Content is typically place between top and bottom bars, but can also extend
// behind them. This is controlled with the
// [property@ToolbarView:extend-content-to-top-edge] and
// [property@ToolbarView:extend-content-to-bottom-edge] properties.
//
// Top and bottom bars can be hidden and revealed with an animation using the
// [property@ToolbarView:reveal-top-bars] and
// [property@ToolbarView:reveal-bottom-bars] properties.
//
// ## `AdwToolbarView` as `GtkBuildable`
//
// The `AdwToolbarView` implementation of the [iface@Gtk.Buildable] interface
// supports adding a top bar by specifying “top” as the “type” attribute of a
// `&lt;child&gt;` element, or adding a bottom bar by specifying “bottom”.
//
// ## Accessibility
//
// `AdwToolbarView` uses the `GTK_ACCESSIBLE_ROLE_GROUP` role.
type ToolbarView struct {
	gtk.Widget
}

var xToolbarViewGLibType func() types.GType

func ToolbarViewGLibType() types.GType {
	return xToolbarViewGLibType()
}

func ToolbarViewNewFromInternalPtr(ptr uintptr) *ToolbarView {
	cls := &ToolbarView{}
	cls.Ptr = ptr
	return cls
}

var xNewToolbarView func() uintptr

// Creates a new `AdwToolbarView`.
func NewToolbarView() *ToolbarView {
	var cls *ToolbarView

	cret := xNewToolbarView()

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &ToolbarView{}
	cls.Ptr = cret
	return cls
}

var xToolbarViewAddBottomBar func(uintptr, uintptr)

// Adds a bottom bar to @self.
func (x *ToolbarView) AddBottomBar(WidgetVar *gtk.Widget) {

	xToolbarViewAddBottomBar(x.GoPointer(), WidgetVar.GoPointer())

}

var xToolbarViewAddTopBar func(uintptr, uintptr)

// Adds a top bar to @self.
func (x *ToolbarView) AddTopBar(WidgetVar *gtk.Widget) {

	xToolbarViewAddTopBar(x.GoPointer(), WidgetVar.GoPointer())

}

var xToolbarViewGetBottomBarHeight func(uintptr) int

// Gets the current bottom bar height for @self.
//
// Bottom bar height does change depending on
// [property@ToolbarView:reveal-bottom-bars], including during the transition.
//
// See [method@ToolbarView.get_top_bar_height].
func (x *ToolbarView) GetBottomBarHeight() int {

	cret := xToolbarViewGetBottomBarHeight(x.GoPointer())
	return cret
}

var xToolbarViewGetBottomBarStyle func(uintptr) ToolbarStyle

// Gets appearance of the bottom bars for @self.
func (x *ToolbarView) GetBottomBarStyle() ToolbarStyle {

	cret := xToolbarViewGetBottomBarStyle(x.GoPointer())
	return cret
}

var xToolbarViewGetContent func(uintptr) uintptr

// Gets the content widget for @self.
func (x *ToolbarView) GetContent() *gtk.Widget {
	var cls *gtk.Widget

	cret := xToolbarViewGetContent(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gtk.Widget{}
	cls.Ptr = cret
	return cls
}

var xToolbarViewGetExtendContentToBottomEdge func(uintptr) bool

// Gets whether the content widget can extend behind bottom bars.
func (x *ToolbarView) GetExtendContentToBottomEdge() bool {

	cret := xToolbarViewGetExtendContentToBottomEdge(x.GoPointer())
	return cret
}

var xToolbarViewGetExtendContentToTopEdge func(uintptr) bool

// Gets whether the content widget can extend behind top bars.
func (x *ToolbarView) GetExtendContentToTopEdge() bool {

	cret := xToolbarViewGetExtendContentToTopEdge(x.GoPointer())
	return cret
}

var xToolbarViewGetRevealBottomBars func(uintptr) bool

// Gets whether bottom bars are revealed for @self.
func (x *ToolbarView) GetRevealBottomBars() bool {

	cret := xToolbarViewGetRevealBottomBars(x.GoPointer())
	return cret
}

var xToolbarViewGetRevealTopBars func(uintptr) bool

// Gets whether top bars are revealed for @self.
func (x *ToolbarView) GetRevealTopBars() bool {

	cret := xToolbarViewGetRevealTopBars(x.GoPointer())
	return cret
}

var xToolbarViewGetTopBarHeight func(uintptr) int

// Gets the current top bar height for @self.
//
// Top bar height does change depending on
// [property@ToolbarView:reveal-top-bars], including during the transition.
//
// See [method@ToolbarView.get_bottom_bar_height].
func (x *ToolbarView) GetTopBarHeight() int {

	cret := xToolbarViewGetTopBarHeight(x.GoPointer())
	return cret
}

var xToolbarViewGetTopBarStyle func(uintptr) ToolbarStyle

// Gets appearance of the top bars for @self.
func (x *ToolbarView) GetTopBarStyle() ToolbarStyle {

	cret := xToolbarViewGetTopBarStyle(x.GoPointer())
	return cret
}

var xToolbarViewRemove func(uintptr, uintptr)

// Removes a child from @self.
func (x *ToolbarView) Remove(WidgetVar *gtk.Widget) {

	xToolbarViewRemove(x.GoPointer(), WidgetVar.GoPointer())

}

var xToolbarViewSetBottomBarStyle func(uintptr, ToolbarStyle)

// Sets appearance of the bottom bars for @self.
//
// If set to `ADW_TOOLBAR_FLAT`, bottom bars are flat and scrolling content has
// a subtle undershoot shadow when touching them, same as the
// [`.undershoot-bottom`](style-classes.html#undershoot-indicators)
// style class. This works well for simple content, e.g. [class@StatusPage] or
// [class@PreferencesPage], where the background at the bottom of the page is
// uniform. Additionally, windows with sidebars should always use this style.
//
// Undershoot shadow is only present if a bottom bar is actually present and
// visible. It is also never present if
// [property@ToolbarView:extend-content-to-bottom-edge] is set to `TRUE`.
//
// If set to `ADW_TOOLBAR_RAISED`, bottom bars have an opaque background and a
// persistent shadow, this is suitable for content such as
// [utility panes](https://developer.gnome.org/hig/patterns/containers/utility-panes.html),
// where some elements are directly adjacent to the bottom bars, or
// [class@TabView], where each page can have a different background.
//
// `ADW_TOOLBAR_RAISED_BORDER` is similar to `ADW_TOOLBAR_RAISED`, but the
// shadow is replaced with a more subtle border. This can be useful for
// applications like image viewers.
//
// See also [method@ToolbarView.set_top_bar_style].
func (x *ToolbarView) SetBottomBarStyle(StyleVar ToolbarStyle) {

	xToolbarViewSetBottomBarStyle(x.GoPointer(), StyleVar)

}

var xToolbarViewSetContent func(uintptr, uintptr)

// Sets the content widget for @self.
func (x *ToolbarView) SetContent(ContentVar *gtk.Widget) {

	xToolbarViewSetContent(x.GoPointer(), ContentVar.GoPointer())

}

var xToolbarViewSetExtendContentToBottomEdge func(uintptr, bool)

// Sets whether the content widget can extend behind bottom bars.
//
// This can be used in combination with [property@ToolbarView:reveal-bottom-bars]
// to show and hide toolbars in fullscreen.
//
// See [method@ToolbarView.set_extend_content_to_top_edge].
func (x *ToolbarView) SetExtendContentToBottomEdge(ExtendVar bool) {

	xToolbarViewSetExtendContentToBottomEdge(x.GoPointer(), ExtendVar)

}

var xToolbarViewSetExtendContentToTopEdge func(uintptr, bool)

// Sets whether the content widget can extend behind top bars.
//
// This can be used in combination with [property@ToolbarView:reveal-top-bars]
// to show and hide toolbars in fullscreen.
//
// See [method@ToolbarView.set_extend_content_to_bottom_edge].
func (x *ToolbarView) SetExtendContentToTopEdge(ExtendVar bool) {

	xToolbarViewSetExtendContentToTopEdge(x.GoPointer(), ExtendVar)

}

var xToolbarViewSetRevealBottomBars func(uintptr, bool)

// Sets whether bottom bars are revealed for @self.
//
// The transition will be animated.
//
// This can be used in combination with
// [property@ToolbarView:extend-content-to-bottom-edge] to show and hide
// toolbars in fullscreen.
//
// See [method@ToolbarView.set_reveal_top_bars].
func (x *ToolbarView) SetRevealBottomBars(RevealVar bool) {

	xToolbarViewSetRevealBottomBars(x.GoPointer(), RevealVar)

}

var xToolbarViewSetRevealTopBars func(uintptr, bool)

// Sets whether top bars are revealed for @self.
//
// The transition will be animated.
//
// This can be used in combination with
// [property@ToolbarView:extend-content-to-top-edge] to show and hide toolbars
// in fullscreen.
//
// See [method@ToolbarView.set_reveal_bottom_bars].
func (x *ToolbarView) SetRevealTopBars(RevealVar bool) {

	xToolbarViewSetRevealTopBars(x.GoPointer(), RevealVar)

}

var xToolbarViewSetTopBarStyle func(uintptr, ToolbarStyle)

// Sets appearance of the top bars for @self.
//
// If set to `ADW_TOOLBAR_FLAT`, top bars are flat and scrolling content has a
// subtle undershoot shadow when touching them, same as the
// [`.undershoot-top`](style-classes.html#undershoot-indicators)
// style class. This works well for simple content, e.g. [class@StatusPage] or
// [class@PreferencesPage], where the background at the top of the page is
// uniform. Additionally, windows with sidebars should always use this style.
//
// Undershoot shadow is only present if a top bar is actually present and
// visible. It is also never present if
// [property@ToolbarView:extend-content-to-top-edge] is set to `TRUE`.
//
// If set to `ADW_TOOLBAR_RAISED`, top bars have an opaque background and a
// persistent shadow, this is suitable for content such as
// [utility panes](https://developer.gnome.org/hig/patterns/containers/utility-panes.html),
// where some elements are directly adjacent to the top bars, or
// [class@TabView], where each page can have a different background.
//
// `ADW_TOOLBAR_RAISED_BORDER` is similar to `ADW_TOOLBAR_RAISED`, but the
// shadow is replaced with a more subtle border. This can be useful for
// applications like image viewers.
//
// See also [method@ToolbarView.set_bottom_bar_style].
func (x *ToolbarView) SetTopBarStyle(StyleVar ToolbarStyle) {

	xToolbarViewSetTopBarStyle(x.GoPointer(), StyleVar)

}

func (c *ToolbarView) GoPointer() uintptr {
	return c.Ptr
}

func (c *ToolbarView) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *ToolbarView) GetAccessibleRole() gtk.AccessibleRole {

	cret := gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())
	return cret
}

// Resets the accessible @property to its default value.
func (x *ToolbarView) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *ToolbarView) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *ToolbarView) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *ToolbarView) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ToolbarView) UpdatePropertyValue(NPropertiesVar int, PropertiesVar []gtk.AccessibleProperty, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *ToolbarView) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ToolbarView) UpdateRelationValue(NRelationsVar int, RelationsVar []gtk.AccessibleRelation, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *ToolbarView) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *ToolbarView) UpdateStateValue(NStatesVar int, StatesVar []gtk.AccessibleState, ValuesVar []gobject.Value) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *ToolbarView) GetBuildableId() string {

	cret := gtk.XGtkBuildableGetBuildableId(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xToolbarStyleGLibType, lib, "adw_toolbar_style_get_type")

	core.PuregoSafeRegister(&xToolbarViewGLibType, lib, "adw_toolbar_view_get_type")

	core.PuregoSafeRegister(&xNewToolbarView, lib, "adw_toolbar_view_new")

	core.PuregoSafeRegister(&xToolbarViewAddBottomBar, lib, "adw_toolbar_view_add_bottom_bar")
	core.PuregoSafeRegister(&xToolbarViewAddTopBar, lib, "adw_toolbar_view_add_top_bar")
	core.PuregoSafeRegister(&xToolbarViewGetBottomBarHeight, lib, "adw_toolbar_view_get_bottom_bar_height")
	core.PuregoSafeRegister(&xToolbarViewGetBottomBarStyle, lib, "adw_toolbar_view_get_bottom_bar_style")
	core.PuregoSafeRegister(&xToolbarViewGetContent, lib, "adw_toolbar_view_get_content")
	core.PuregoSafeRegister(&xToolbarViewGetExtendContentToBottomEdge, lib, "adw_toolbar_view_get_extend_content_to_bottom_edge")
	core.PuregoSafeRegister(&xToolbarViewGetExtendContentToTopEdge, lib, "adw_toolbar_view_get_extend_content_to_top_edge")
	core.PuregoSafeRegister(&xToolbarViewGetRevealBottomBars, lib, "adw_toolbar_view_get_reveal_bottom_bars")
	core.PuregoSafeRegister(&xToolbarViewGetRevealTopBars, lib, "adw_toolbar_view_get_reveal_top_bars")
	core.PuregoSafeRegister(&xToolbarViewGetTopBarHeight, lib, "adw_toolbar_view_get_top_bar_height")
	core.PuregoSafeRegister(&xToolbarViewGetTopBarStyle, lib, "adw_toolbar_view_get_top_bar_style")
	core.PuregoSafeRegister(&xToolbarViewRemove, lib, "adw_toolbar_view_remove")
	core.PuregoSafeRegister(&xToolbarViewSetBottomBarStyle, lib, "adw_toolbar_view_set_bottom_bar_style")
	core.PuregoSafeRegister(&xToolbarViewSetContent, lib, "adw_toolbar_view_set_content")
	core.PuregoSafeRegister(&xToolbarViewSetExtendContentToBottomEdge, lib, "adw_toolbar_view_set_extend_content_to_bottom_edge")
	core.PuregoSafeRegister(&xToolbarViewSetExtendContentToTopEdge, lib, "adw_toolbar_view_set_extend_content_to_top_edge")
	core.PuregoSafeRegister(&xToolbarViewSetRevealBottomBars, lib, "adw_toolbar_view_set_reveal_bottom_bars")
	core.PuregoSafeRegister(&xToolbarViewSetRevealTopBars, lib, "adw_toolbar_view_set_reveal_top_bars")
	core.PuregoSafeRegister(&xToolbarViewSetTopBarStyle, lib, "adw_toolbar_view_set_top_bar_style")

}
