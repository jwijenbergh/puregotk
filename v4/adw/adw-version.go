// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

const (
	// Adwaita major version component (e.g. 1 if the version is 1.2.3).
	MAJOR_VERSION int = 1
	// Adwaita micro version component (e.g. 3 if the version is 1.2.3).
	MICRO_VERSION int = 4
	// Adwaita minor version component (e.g. 2 if the version is 1.2.3).
	MINOR_VERSION int = 6
	// Adwaita version, encoded as a string, useful for printing and
	// concatenation.
	VERSION_S string = "1.6.4"
)

var xGetMajorVersion func() uint

// Returns the major version number of the Adwaita library.
//
// For example, in libadwaita version 1.2.3 this is 1.
//
// This function is in the library, so it represents the libadwaita library your
// code is running against. Contrast with the [const@MAJOR_VERSION] constant,
// which represents the major version of the libadwaita headers you have
// included when compiling your code.
func GetMajorVersion() uint {

	cret := xGetMajorVersion()
	return cret
}

var xGetMicroVersion func() uint

// Returns the micro version number of the Adwaita library.
//
// For example, in libadwaita version 1.2.3 this is 3.
//
// This function is in the library, so it represents the libadwaita library your
// code is running against. Contrast with the [const@MAJOR_VERSION] constant,
// which represents the micro version of the libadwaita headers you have
// included when compiling your code.
func GetMicroVersion() uint {

	cret := xGetMicroVersion()
	return cret
}

var xGetMinorVersion func() uint

// Returns the minor version number of the Adwaita library.
//
// For example, in libadwaita version 1.2.3 this is 2.
//
// This function is in the library, so it represents the libadwaita library your
// code is running against. Contrast with the [const@MAJOR_VERSION] constant,
// which represents the minor version of the libadwaita headers you have
// included when compiling your code.
func GetMinorVersion() uint {

	cret := xGetMinorVersion()
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xGetMajorVersion, lib, "adw_get_major_version")
	core.PuregoSafeRegister(&xGetMicroVersion, lib, "adw_get_micro_version")
	core.PuregoSafeRegister(&xGetMinorVersion, lib, "adw_get_minor_version")

}
