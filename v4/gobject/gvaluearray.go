// Package gobject was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gobject

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// A #GValueArray contains an array of #GValue elements.
type ValueArray struct {
	NValues uint

	Values *Value

	NPrealloced uint
}

var xValueArrayGLibType func() types.GType

func ValueArrayGLibType() types.GType {
	return xValueArrayGLibType()
}

func (x *ValueArray) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xNewValueArray func(uint) *ValueArray

// Allocate and initialize a new #GValueArray, optionally preserve space
// for @n_prealloced elements. New arrays always contain 0 elements,
// regardless of the value of @n_prealloced.
func NewValueArray(NPreallocedVar uint) *ValueArray {

	cret := xNewValueArray(NPreallocedVar)
	return cret
}

var xValueArrayAppend func(uintptr, *Value) *ValueArray

// Insert a copy of @value as last element of @value_array. If @value is
// %NULL, an uninitialized value is appended.
func (x *ValueArray) Append(ValueVar *Value) *ValueArray {

	cret := xValueArrayAppend(x.GoPointer(), ValueVar)
	return cret
}

var xValueArrayCopy func(uintptr) *ValueArray

// Construct an exact copy of a #GValueArray by duplicating all its
// contents.
func (x *ValueArray) Copy() *ValueArray {

	cret := xValueArrayCopy(x.GoPointer())
	return cret
}

var xValueArrayFree func(uintptr)

// Free a #GValueArray including its contents.
func (x *ValueArray) Free() {

	xValueArrayFree(x.GoPointer())

}

var xValueArrayGetNth func(uintptr, uint) *Value

// Return a pointer to the value at @index_ containd in @value_array.
func (x *ValueArray) GetNth(IndexVar uint) *Value {

	cret := xValueArrayGetNth(x.GoPointer(), IndexVar)
	return cret
}

var xValueArrayInsert func(uintptr, uint, *Value) *ValueArray

// Insert a copy of @value at specified position into @value_array. If @value
// is %NULL, an uninitialized value is inserted.
func (x *ValueArray) Insert(IndexVar uint, ValueVar *Value) *ValueArray {

	cret := xValueArrayInsert(x.GoPointer(), IndexVar, ValueVar)
	return cret
}

var xValueArrayPrepend func(uintptr, *Value) *ValueArray

// Insert a copy of @value as first element of @value_array. If @value is
// %NULL, an uninitialized value is prepended.
func (x *ValueArray) Prepend(ValueVar *Value) *ValueArray {

	cret := xValueArrayPrepend(x.GoPointer(), ValueVar)
	return cret
}

var xValueArrayRemove func(uintptr, uint) *ValueArray

// Remove the value at position @index_ from @value_array.
func (x *ValueArray) Remove(IndexVar uint) *ValueArray {

	cret := xValueArrayRemove(x.GoPointer(), IndexVar)
	return cret
}

var xValueArraySort func(uintptr, uintptr) *ValueArray

// Sort @value_array using @compare_func to compare the elements according to
// the semantics of #GCompareFunc.
//
// The current implementation uses the same sorting algorithm as standard
// C qsort() function.
func (x *ValueArray) Sort(CompareFuncVar *glib.CompareFunc) *ValueArray {

	cret := xValueArraySort(x.GoPointer(), glib.NewCallback(CompareFuncVar))
	return cret
}

var xValueArraySortWithData func(uintptr, uintptr, uintptr) *ValueArray

// Sort @value_array using @compare_func to compare the elements according
// to the semantics of #GCompareDataFunc.
//
// The current implementation uses the same sorting algorithm as standard
// C qsort() function.
func (x *ValueArray) SortWithData(CompareFuncVar *glib.CompareDataFunc, UserDataVar uintptr) *ValueArray {

	cret := xValueArraySortWithData(x.GoPointer(), glib.NewCallback(CompareFuncVar), UserDataVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xValueArrayGLibType, lib, "g_value_array_get_type")

	core.PuregoSafeRegister(&xNewValueArray, lib, "g_value_array_new")

	core.PuregoSafeRegister(&xValueArrayAppend, lib, "g_value_array_append")
	core.PuregoSafeRegister(&xValueArrayCopy, lib, "g_value_array_copy")
	core.PuregoSafeRegister(&xValueArrayFree, lib, "g_value_array_free")
	core.PuregoSafeRegister(&xValueArrayGetNth, lib, "g_value_array_get_nth")
	core.PuregoSafeRegister(&xValueArrayInsert, lib, "g_value_array_insert")
	core.PuregoSafeRegister(&xValueArrayPrepend, lib, "g_value_array_prepend")
	core.PuregoSafeRegister(&xValueArrayRemove, lib, "g_value_array_remove")
	core.PuregoSafeRegister(&xValueArraySort, lib, "g_value_array_sort")
	core.PuregoSafeRegister(&xValueArraySortWithData, lib, "g_value_array_sort_with_data")

}
