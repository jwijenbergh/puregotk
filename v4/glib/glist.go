// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// The #GList struct is used for each element in a doubly-linked list.
type List struct {
	_ structs.HostLayout

	Data uintptr

	Next *List

	Prev *List
}

func (x *List) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xClearList func(**List, uintptr)

// Clears a pointer to a #GList, freeing it and, optionally, freeing its elements using @destroy.
//
// @list_ptr must be a valid pointer. If @list_ptr points to a null #GList, this does nothing.
func ClearList(ListPtrVar **List, DestroyVar *DestroyNotify) {

	xClearList(ListPtrVar, NewCallback(DestroyVar))

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xClearList, lib, "g_clear_list")

}
