// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// Each piece of memory that is pushed onto the stack
// is cast to a GTrashStack*.
type TrashStack struct {
	Next *TrashStack
}

func (x *TrashStack) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xTrashStackHeight func(**TrashStack) uint

// Returns the height of a #GTrashStack.
//
// Note that execution of this function is of O(N) complexity
// where N denotes the number of items on the stack.
func TrashStackHeight(StackPVar **TrashStack) uint {

	cret := xTrashStackHeight(StackPVar)
	return cret
}

var xTrashStackPeek func(**TrashStack) uintptr

// Returns the element at the top of a #GTrashStack
// which may be %NULL.
func TrashStackPeek(StackPVar **TrashStack) uintptr {

	cret := xTrashStackPeek(StackPVar)
	return cret
}

var xTrashStackPop func(**TrashStack) uintptr

// Pops a piece of memory off a #GTrashStack.
func TrashStackPop(StackPVar **TrashStack) uintptr {

	cret := xTrashStackPop(StackPVar)
	return cret
}

var xTrashStackPush func(**TrashStack, uintptr)

// Pushes a piece of memory onto a #GTrashStack.
func TrashStackPush(StackPVar **TrashStack, DataPVar uintptr) {

	xTrashStackPush(StackPVar, DataPVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xTrashStackHeight, lib, "g_trash_stack_height")
	core.PuregoSafeRegister(&xTrashStackPeek, lib, "g_trash_stack_peek")
	core.PuregoSafeRegister(&xTrashStackPop, lib, "g_trash_stack_pop")
	core.PuregoSafeRegister(&xTrashStackPush, lib, "g_trash_stack_push")

}
