// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// #GStrvBuilder is a method of easily building dynamically sized
// NULL-terminated string arrays.
//
// The following example shows how to build a two element array:
//
// |[&lt;!-- language="C" --&gt;
//
//	g_autoptr(GStrvBuilder) builder = g_strv_builder_new ();
//	g_strv_builder_add (builder, "hello");
//	g_strv_builder_add (builder, "world");
//	g_auto(GStrv) array = g_strv_builder_end (builder);
//
// ]|
type StrvBuilder struct {
	_ structs.HostLayout
}

func (x *StrvBuilder) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xStrvBuilderAdd func(uintptr, string)

// Add a string to the end of the array.
//
// Since 2.68
func (x *StrvBuilder) Add(ValueVar string) {

	xStrvBuilderAdd(x.GoPointer(), ValueVar)

}

var xStrvBuilderAddMany func(uintptr, ...interface{})

// Appends all the given strings to the builder.
//
// Since 2.70
func (x *StrvBuilder) AddMany(varArgs ...interface{}) {

	xStrvBuilderAddMany(x.GoPointer(), varArgs...)

}

var xStrvBuilderAddv func(uintptr, []string)

// Appends all the strings in the given vector to the builder.
//
// Since 2.70
func (x *StrvBuilder) Addv(ValueVar []string) {

	xStrvBuilderAddv(x.GoPointer(), ValueVar)

}

var xStrvBuilderEnd func(uintptr) []string

// Ends the builder process and returns the constructed NULL-terminated string
// array. The returned value should be freed with g_strfreev() when no longer
// needed.
func (x *StrvBuilder) End() []string {

	cret := xStrvBuilderEnd(x.GoPointer())
	return cret
}

var xStrvBuilderRef func(uintptr) *StrvBuilder

// Atomically increments the reference count of @builder by one.
// This function is thread-safe and may be called from any thread.
func (x *StrvBuilder) Ref() *StrvBuilder {

	cret := xStrvBuilderRef(x.GoPointer())
	return cret
}

var xStrvBuilderUnref func(uintptr)

// Decreases the reference count on @builder.
//
// In the event that there are no more references, releases all memory
// associated with the #GStrvBuilder.
func (x *StrvBuilder) Unref() {

	xStrvBuilderUnref(x.GoPointer())

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xStrvBuilderAdd, lib, "g_strv_builder_add")
	core.PuregoSafeRegister(&xStrvBuilderAddMany, lib, "g_strv_builder_add_many")
	core.PuregoSafeRegister(&xStrvBuilderAddv, lib, "g_strv_builder_addv")
	core.PuregoSafeRegister(&xStrvBuilderEnd, lib, "g_strv_builder_end")
	core.PuregoSafeRegister(&xStrvBuilderRef, lib, "g_strv_builder_ref")
	core.PuregoSafeRegister(&xStrvBuilderUnref, lib, "g_strv_builder_unref")

}
