// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// A typedef for a reference-counted string. A pointer to a #GRefString can be
// treated like a standard `char*` array by all code, but can additionally have
// `g_ref_string_*()` methods called on it. `g_ref_string_*()` methods cannot be
// called on `char*` arrays not allocated using g_ref_string_new().
//
// If using #GRefString with autocleanups, g_autoptr() must be used rather than
// g_autofree(), so that the reference counting metadata is also freed.
type RefString = byte

var xRefStringAcquire func(string) string

// Acquires a reference on a string.
func RefStringAcquire(StrVar string) string {

	cret := xRefStringAcquire(StrVar)
	return cret
}

var xRefStringLength func(string) uint

// Retrieves the length of @str.
func RefStringLength(StrVar string) uint {

	cret := xRefStringLength(StrVar)
	return cret
}

var xRefStringNew func(string) string

// Creates a new reference counted string and copies the contents of @str
// into it.
func RefStringNew(StrVar string) string {

	cret := xRefStringNew(StrVar)
	return cret
}

var xRefStringNewIntern func(string) string

// Creates a new reference counted string and copies the content of @str
// into it.
//
// If you call this function multiple times with the same @str, or with
// the same contents of @str, it will return a new reference, instead of
// creating a new string.
func RefStringNewIntern(StrVar string) string {

	cret := xRefStringNewIntern(StrVar)
	return cret
}

var xRefStringNewLen func(string, int) string

// Creates a new reference counted string and copies the contents of @str
// into it, up to @len bytes.
//
// Since this function does not stop at nul bytes, it is the caller's
// responsibility to ensure that @str has at least @len addressable bytes.
func RefStringNewLen(StrVar string, LenVar int) string {

	cret := xRefStringNewLen(StrVar, LenVar)
	return cret
}

var xRefStringRelease func(string)

// Releases a reference on a string; if it was the last reference, the
// resources allocated by the string are freed as well.
func RefStringRelease(StrVar string) {

	xRefStringRelease(StrVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xRefStringAcquire, lib, "g_ref_string_acquire")
	core.PuregoSafeRegister(&xRefStringLength, lib, "g_ref_string_length")
	core.PuregoSafeRegister(&xRefStringNew, lib, "g_ref_string_new")
	core.PuregoSafeRegister(&xRefStringNewIntern, lib, "g_ref_string_new_intern")
	core.PuregoSafeRegister(&xRefStringNewLen, lib, "g_ref_string_new_len")
	core.PuregoSafeRegister(&xRefStringRelease, lib, "g_ref_string_release")

}
