// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// The GString struct contains the public fields of a GString.
type String struct {
	Str uintptr

	Len uint

	AllocatedLen uint
}

var xStringGLibType func() types.GType

func StringGLibType() types.GType {
	return xStringGLibType()
}

func (x *String) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xNewString func(string) *String

// Creates a new #GString, initialized with the given string.
func NewString(InitVar string) *String {

	cret := xNewString(InitVar)
	return cret
}

var xNewStringLen func(string, int) *String

// Creates a new #GString with @len bytes of the @init buffer.
// Because a length is provided, @init need not be nul-terminated,
// and can contain embedded nul bytes.
//
// Since this function does not stop at nul bytes, it is the caller's
// responsibility to ensure that @init has at least @len addressable
// bytes.
func NewStringLen(InitVar string, LenVar int) *String {

	cret := xNewStringLen(InitVar, LenVar)
	return cret
}

var xStringSizedNew func(uint) *String

// Creates a new #GString, with enough space for @dfl_size
// bytes. This is useful if you are going to add a lot of
// text to the string and don't want it to be reallocated
// too often.
func StringSizedNew(DflSizeVar uint) *String {

	cret := xStringSizedNew(DflSizeVar)
	return cret
}

var xStringAppend func(uintptr, string) *String

// Adds a string onto the end of a #GString, expanding
// it if necessary.
func (x *String) Append(ValVar string) *String {

	cret := xStringAppend(x.GoPointer(), ValVar)
	return cret
}

var xStringAppendC func(uintptr, byte) *String

// Adds a byte onto the end of a #GString, expanding
// it if necessary.
func (x *String) AppendC(CVar byte) *String {

	cret := xStringAppendC(x.GoPointer(), CVar)
	return cret
}

var xStringAppendLen func(uintptr, string, int) *String

// Appends @len bytes of @val to @string.
//
// If @len is positive, @val may contain embedded nuls and need
// not be nul-terminated. It is the caller's responsibility to
// ensure that @val has at least @len addressable bytes.
//
// If @len is negative, @val must be nul-terminated and @len
// is considered to request the entire string length. This
// makes g_string_append_len() equivalent to g_string_append().
func (x *String) AppendLen(ValVar string, LenVar int) *String {

	cret := xStringAppendLen(x.GoPointer(), ValVar, LenVar)
	return cret
}

var xStringAppendPrintf func(uintptr, string, ...interface{})

// Appends a formatted string onto the end of a #GString.
// This function is similar to g_string_printf() except
// that the text is appended to the #GString.
func (x *String) AppendPrintf(FormatVar string, varArgs ...interface{}) {

	xStringAppendPrintf(x.GoPointer(), FormatVar, varArgs...)

}

var xStringAppendUnichar func(uintptr, uint32) *String

// Converts a Unicode character into UTF-8, and appends it
// to the string.
func (x *String) AppendUnichar(WcVar uint32) *String {

	cret := xStringAppendUnichar(x.GoPointer(), WcVar)
	return cret
}

var xStringAppendUriEscaped func(uintptr, string, string, bool) *String

// Appends @unescaped to @string, escaping any characters that
// are reserved in URIs using URI-style escape sequences.
func (x *String) AppendUriEscaped(UnescapedVar string, ReservedCharsAllowedVar string, AllowUtf8Var bool) *String {

	cret := xStringAppendUriEscaped(x.GoPointer(), UnescapedVar, ReservedCharsAllowedVar, AllowUtf8Var)
	return cret
}

var xStringAppendVprintf func(uintptr, string, []interface{})

// Appends a formatted string onto the end of a #GString.
// This function is similar to g_string_append_printf()
// except that the arguments to the format string are passed
// as a va_list.
func (x *String) AppendVprintf(FormatVar string, ArgsVar []interface{}) {

	xStringAppendVprintf(x.GoPointer(), FormatVar, ArgsVar)

}

var xStringAsciiDown func(uintptr) *String

// Converts all uppercase ASCII letters to lowercase ASCII letters.
func (x *String) AsciiDown() *String {

	cret := xStringAsciiDown(x.GoPointer())
	return cret
}

var xStringAsciiUp func(uintptr) *String

// Converts all lowercase ASCII letters to uppercase ASCII letters.
func (x *String) AsciiUp() *String {

	cret := xStringAsciiUp(x.GoPointer())
	return cret
}

var xStringAssign func(uintptr, string) *String

// Copies the bytes from a string into a #GString,
// destroying any previous contents. It is rather like
// the standard strcpy() function, except that you do not
// have to worry about having enough space to copy the string.
func (x *String) Assign(RvalVar string) *String {

	cret := xStringAssign(x.GoPointer(), RvalVar)
	return cret
}

var xStringDown func(uintptr) *String

// Converts a #GString to lowercase.
func (x *String) Down() *String {

	cret := xStringDown(x.GoPointer())
	return cret
}

var xStringEqual func(uintptr, *String) bool

// Compares two strings for equality, returning %TRUE if they are equal.
// For use with #GHashTable.
func (x *String) Equal(V2Var *String) bool {

	cret := xStringEqual(x.GoPointer(), V2Var)
	return cret
}

var xStringErase func(uintptr, int, int) *String

// Removes @len bytes from a #GString, starting at position @pos.
// The rest of the #GString is shifted down to fill the gap.
func (x *String) Erase(PosVar int, LenVar int) *String {

	cret := xStringErase(x.GoPointer(), PosVar, LenVar)
	return cret
}

var xStringFree func(uintptr, bool) string

// Frees the memory allocated for the #GString.
// If @free_segment is %TRUE it also frees the character data.  If
// it's %FALSE, the caller gains ownership of the buffer and must
// free it after use with g_free().
func (x *String) Free(FreeSegmentVar bool) string {

	cret := xStringFree(x.GoPointer(), FreeSegmentVar)
	return cret
}

var xStringFreeToBytes func(uintptr) *Bytes

// Transfers ownership of the contents of @string to a newly allocated
// #GBytes.  The #GString structure itself is deallocated, and it is
// therefore invalid to use @string after invoking this function.
//
// Note that while #GString ensures that its buffer always has a
// trailing nul character (not reflected in its "len"), the returned
// #GBytes does not include this extra nul; i.e. it has length exactly
// equal to the "len" member.
func (x *String) FreeToBytes() *Bytes {

	cret := xStringFreeToBytes(x.GoPointer())
	return cret
}

var xStringHash func(uintptr) uint

// Creates a hash code for @str; for use with #GHashTable.
func (x *String) Hash() uint {

	cret := xStringHash(x.GoPointer())
	return cret
}

var xStringInsert func(uintptr, int, string) *String

// Inserts a copy of a string into a #GString,
// expanding it if necessary.
func (x *String) Insert(PosVar int, ValVar string) *String {

	cret := xStringInsert(x.GoPointer(), PosVar, ValVar)
	return cret
}

var xStringInsertC func(uintptr, int, byte) *String

// Inserts a byte into a #GString, expanding it if necessary.
func (x *String) InsertC(PosVar int, CVar byte) *String {

	cret := xStringInsertC(x.GoPointer(), PosVar, CVar)
	return cret
}

var xStringInsertLen func(uintptr, int, string, int) *String

// Inserts @len bytes of @val into @string at @pos.
//
// If @len is positive, @val may contain embedded nuls and need
// not be nul-terminated. It is the caller's responsibility to
// ensure that @val has at least @len addressable bytes.
//
// If @len is negative, @val must be nul-terminated and @len
// is considered to request the entire string length.
//
// If @pos is -1, bytes are inserted at the end of the string.
func (x *String) InsertLen(PosVar int, ValVar string, LenVar int) *String {

	cret := xStringInsertLen(x.GoPointer(), PosVar, ValVar, LenVar)
	return cret
}

var xStringInsertUnichar func(uintptr, int, uint32) *String

// Converts a Unicode character into UTF-8, and insert it
// into the string at the given position.
func (x *String) InsertUnichar(PosVar int, WcVar uint32) *String {

	cret := xStringInsertUnichar(x.GoPointer(), PosVar, WcVar)
	return cret
}

var xStringOverwrite func(uintptr, uint, string) *String

// Overwrites part of a string, lengthening it if necessary.
func (x *String) Overwrite(PosVar uint, ValVar string) *String {

	cret := xStringOverwrite(x.GoPointer(), PosVar, ValVar)
	return cret
}

var xStringOverwriteLen func(uintptr, uint, string, int) *String

// Overwrites part of a string, lengthening it if necessary.
// This function will work with embedded nuls.
func (x *String) OverwriteLen(PosVar uint, ValVar string, LenVar int) *String {

	cret := xStringOverwriteLen(x.GoPointer(), PosVar, ValVar, LenVar)
	return cret
}

var xStringPrepend func(uintptr, string) *String

// Adds a string on to the start of a #GString,
// expanding it if necessary.
func (x *String) Prepend(ValVar string) *String {

	cret := xStringPrepend(x.GoPointer(), ValVar)
	return cret
}

var xStringPrependC func(uintptr, byte) *String

// Adds a byte onto the start of a #GString,
// expanding it if necessary.
func (x *String) PrependC(CVar byte) *String {

	cret := xStringPrependC(x.GoPointer(), CVar)
	return cret
}

var xStringPrependLen func(uintptr, string, int) *String

// Prepends @len bytes of @val to @string.
//
// If @len is positive, @val may contain embedded nuls and need
// not be nul-terminated. It is the caller's responsibility to
// ensure that @val has at least @len addressable bytes.
//
// If @len is negative, @val must be nul-terminated and @len
// is considered to request the entire string length. This
// makes g_string_prepend_len() equivalent to g_string_prepend().
func (x *String) PrependLen(ValVar string, LenVar int) *String {

	cret := xStringPrependLen(x.GoPointer(), ValVar, LenVar)
	return cret
}

var xStringPrependUnichar func(uintptr, uint32) *String

// Converts a Unicode character into UTF-8, and prepends it
// to the string.
func (x *String) PrependUnichar(WcVar uint32) *String {

	cret := xStringPrependUnichar(x.GoPointer(), WcVar)
	return cret
}

var xStringPrintf func(uintptr, string, ...interface{})

// Writes a formatted string into a #GString.
// This is similar to the standard sprintf() function,
// except that the #GString buffer automatically expands
// to contain the results. The previous contents of the
// #GString are destroyed.
func (x *String) Printf(FormatVar string, varArgs ...interface{}) {

	xStringPrintf(x.GoPointer(), FormatVar, varArgs...)

}

var xStringReplace func(uintptr, string, string, uint) uint

// Replaces the string @find with the string @replace in a #GString up to
// @limit times. If the number of instances of @find in the #GString is
// less than @limit, all instances are replaced. If @limit is `0`,
// all instances of @find are replaced.
//
// If @find is the empty string, since versions 2.69.1 and 2.68.4 the
// replacement will be inserted no more than once per possible position
// (beginning of string, end of string and between characters). This did
// not work correctly in earlier versions.
func (x *String) Replace(FindVar string, ReplaceVar string, LimitVar uint) uint {

	cret := xStringReplace(x.GoPointer(), FindVar, ReplaceVar, LimitVar)
	return cret
}

var xStringSetSize func(uintptr, uint) *String

// Sets the length of a #GString. If the length is less than
// the current length, the string will be truncated. If the
// length is greater than the current length, the contents
// of the newly added area are undefined. (However, as
// always, string-&gt;str[string-&gt;len] will be a nul byte.)
func (x *String) SetSize(LenVar uint) *String {

	cret := xStringSetSize(x.GoPointer(), LenVar)
	return cret
}

var xStringTruncate func(uintptr, uint) *String

// Cuts off the end of the GString, leaving the first @len bytes.
func (x *String) Truncate(LenVar uint) *String {

	cret := xStringTruncate(x.GoPointer(), LenVar)
	return cret
}

var xStringUp func(uintptr) *String

// Converts a #GString to uppercase.
func (x *String) Up() *String {

	cret := xStringUp(x.GoPointer())
	return cret
}

var xStringVprintf func(uintptr, string, []interface{})

// Writes a formatted string into a #GString.
// This function is similar to g_string_printf() except that
// the arguments to the format string are passed as a va_list.
func (x *String) Vprintf(FormatVar string, ArgsVar []interface{}) {

	xStringVprintf(x.GoPointer(), FormatVar, ArgsVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xStringGLibType, lib, "g_gstring_get_type")

	core.PuregoSafeRegister(&xNewString, lib, "g_string_new")
	core.PuregoSafeRegister(&xNewStringLen, lib, "g_string_new_len")
	core.PuregoSafeRegister(&xStringSizedNew, lib, "g_string_sized_new")

	core.PuregoSafeRegister(&xStringAppend, lib, "g_string_append")
	core.PuregoSafeRegister(&xStringAppendC, lib, "g_string_append_c")
	core.PuregoSafeRegister(&xStringAppendLen, lib, "g_string_append_len")
	core.PuregoSafeRegister(&xStringAppendPrintf, lib, "g_string_append_printf")
	core.PuregoSafeRegister(&xStringAppendUnichar, lib, "g_string_append_unichar")
	core.PuregoSafeRegister(&xStringAppendUriEscaped, lib, "g_string_append_uri_escaped")
	core.PuregoSafeRegister(&xStringAppendVprintf, lib, "g_string_append_vprintf")
	core.PuregoSafeRegister(&xStringAsciiDown, lib, "g_string_ascii_down")
	core.PuregoSafeRegister(&xStringAsciiUp, lib, "g_string_ascii_up")
	core.PuregoSafeRegister(&xStringAssign, lib, "g_string_assign")
	core.PuregoSafeRegister(&xStringDown, lib, "g_string_down")
	core.PuregoSafeRegister(&xStringEqual, lib, "g_string_equal")
	core.PuregoSafeRegister(&xStringErase, lib, "g_string_erase")
	core.PuregoSafeRegister(&xStringFree, lib, "g_string_free")
	core.PuregoSafeRegister(&xStringFreeToBytes, lib, "g_string_free_to_bytes")
	core.PuregoSafeRegister(&xStringHash, lib, "g_string_hash")
	core.PuregoSafeRegister(&xStringInsert, lib, "g_string_insert")
	core.PuregoSafeRegister(&xStringInsertC, lib, "g_string_insert_c")
	core.PuregoSafeRegister(&xStringInsertLen, lib, "g_string_insert_len")
	core.PuregoSafeRegister(&xStringInsertUnichar, lib, "g_string_insert_unichar")
	core.PuregoSafeRegister(&xStringOverwrite, lib, "g_string_overwrite")
	core.PuregoSafeRegister(&xStringOverwriteLen, lib, "g_string_overwrite_len")
	core.PuregoSafeRegister(&xStringPrepend, lib, "g_string_prepend")
	core.PuregoSafeRegister(&xStringPrependC, lib, "g_string_prepend_c")
	core.PuregoSafeRegister(&xStringPrependLen, lib, "g_string_prepend_len")
	core.PuregoSafeRegister(&xStringPrependUnichar, lib, "g_string_prepend_unichar")
	core.PuregoSafeRegister(&xStringPrintf, lib, "g_string_printf")
	core.PuregoSafeRegister(&xStringReplace, lib, "g_string_replace")
	core.PuregoSafeRegister(&xStringSetSize, lib, "g_string_set_size")
	core.PuregoSafeRegister(&xStringTruncate, lib, "g_string_truncate")
	core.PuregoSafeRegister(&xStringUp, lib, "g_string_up")
	core.PuregoSafeRegister(&xStringVprintf, lib, "g_string_vprintf")

}
