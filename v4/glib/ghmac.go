// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// An opaque structure representing a HMAC operation.
// To create a new GHmac, use g_hmac_new(). To free
// a GHmac, use g_hmac_unref().
type Hmac struct {
}

func (x *Hmac) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xHmacCopy func(uintptr) *Hmac

// Copies a #GHmac. If @hmac has been closed, by calling
// g_hmac_get_string() or g_hmac_get_digest(), the copied
// HMAC will be closed as well.
func (x *Hmac) Copy() *Hmac {

	cret := xHmacCopy(x.GoPointer())
	return cret
}

var xHmacGetDigest func(uintptr, []byte, uint)

// Gets the digest from @checksum as a raw binary array and places it
// into @buffer. The size of the digest depends on the type of checksum.
//
// Once this function has been called, the #GHmac is closed and can
// no longer be updated with g_checksum_update().
func (x *Hmac) GetDigest(BufferVar []byte, DigestLenVar uint) {

	xHmacGetDigest(x.GoPointer(), BufferVar, DigestLenVar)

}

var xHmacGetString func(uintptr) string

// Gets the HMAC as a hexadecimal string.
//
// Once this function has been called the #GHmac can no longer be
// updated with g_hmac_update().
//
// The hexadecimal characters will be lower case.
func (x *Hmac) GetString() string {

	cret := xHmacGetString(x.GoPointer())
	return cret
}

var xHmacRef func(uintptr) *Hmac

// Atomically increments the reference count of @hmac by one.
//
// This function is MT-safe and may be called from any thread.
func (x *Hmac) Ref() *Hmac {

	cret := xHmacRef(x.GoPointer())
	return cret
}

var xHmacUnref func(uintptr)

// Atomically decrements the reference count of @hmac by one.
//
// If the reference count drops to 0, all keys and values will be
// destroyed, and all memory allocated by the hash table is released.
// This function is MT-safe and may be called from any thread.
// Frees the memory allocated for @hmac.
func (x *Hmac) Unref() {

	xHmacUnref(x.GoPointer())

}

var xHmacUpdate func(uintptr, []byte, int)

// Feeds @data into an existing #GHmac.
//
// The HMAC must still be open, that is g_hmac_get_string() or
// g_hmac_get_digest() must not have been called on @hmac.
func (x *Hmac) Update(DataVar []byte, LengthVar int) {

	xHmacUpdate(x.GoPointer(), DataVar, LengthVar)

}

var xComputeHmacForBytes func(ChecksumType, *Bytes, *Bytes) string

// Computes the HMAC for a binary @data. This is a
// convenience wrapper for g_hmac_new(), g_hmac_get_string()
// and g_hmac_unref().
//
// The hexadecimal string returned will be in lower case.
func ComputeHmacForBytes(DigestTypeVar ChecksumType, KeyVar *Bytes, DataVar *Bytes) string {

	cret := xComputeHmacForBytes(DigestTypeVar, KeyVar, DataVar)
	return cret
}

var xComputeHmacForData func(ChecksumType, []byte, uint, []byte, uint) string

// Computes the HMAC for a binary @data of @length. This is a
// convenience wrapper for g_hmac_new(), g_hmac_get_string()
// and g_hmac_unref().
//
// The hexadecimal string returned will be in lower case.
func ComputeHmacForData(DigestTypeVar ChecksumType, KeyVar []byte, KeyLenVar uint, DataVar []byte, LengthVar uint) string {

	cret := xComputeHmacForData(DigestTypeVar, KeyVar, KeyLenVar, DataVar, LengthVar)
	return cret
}

var xComputeHmacForString func(ChecksumType, []byte, uint, string, int) string

// Computes the HMAC for a string.
//
// The hexadecimal string returned will be in lower case.
func ComputeHmacForString(DigestTypeVar ChecksumType, KeyVar []byte, KeyLenVar uint, StrVar string, LengthVar int) string {

	cret := xComputeHmacForString(DigestTypeVar, KeyVar, KeyLenVar, StrVar, LengthVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xComputeHmacForBytes, lib, "g_compute_hmac_for_bytes")
	core.PuregoSafeRegister(&xComputeHmacForData, lib, "g_compute_hmac_for_data")
	core.PuregoSafeRegister(&xComputeHmacForString, lib, "g_compute_hmac_for_string")

	core.PuregoSafeRegister(&xHmacCopy, lib, "g_hmac_copy")
	core.PuregoSafeRegister(&xHmacGetDigest, lib, "g_hmac_get_digest")
	core.PuregoSafeRegister(&xHmacGetString, lib, "g_hmac_get_string")
	core.PuregoSafeRegister(&xHmacRef, lib, "g_hmac_ref")
	core.PuregoSafeRegister(&xHmacUnref, lib, "g_hmac_unref")
	core.PuregoSafeRegister(&xHmacUpdate, lib, "g_hmac_update")

}
