// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// An opaque structure representing an opened directory.
type Dir struct {
	_ structs.HostLayout
}

func (x *Dir) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xDirClose func(uintptr)

// Closes the directory and deallocates all related resources.
func (x *Dir) Close() {

	xDirClose(x.GoPointer())

}

var xDirReadName func(uintptr) string

// Retrieves the name of another entry in the directory, or %NULL.
// The order of entries returned from this function is not defined,
// and may vary by file system or other operating-system dependent
// factors.
//
// %NULL may also be returned in case of errors. On Unix, you can
// check `errno` to find out if %NULL was returned because of an error.
//
// On Unix, the '.' and '..' entries are omitted, and the returned
// name is in the on-disk encoding.
//
// On Windows, as is true of all GLib functions which operate on
// filenames, the returned name is in UTF-8.
func (x *Dir) ReadName() string {

	cret := xDirReadName(x.GoPointer())
	return cret
}

var xDirRewind func(uintptr)

// Resets the given directory. The next call to g_dir_read_name()
// will return the first entry again.
func (x *Dir) Rewind() {

	xDirRewind(x.GoPointer())

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xDirClose, lib, "g_dir_close")
	core.PuregoSafeRegister(&xDirReadName, lib, "g_dir_read_name")
	core.PuregoSafeRegister(&xDirRewind, lib, "g_dir_rewind")

}
