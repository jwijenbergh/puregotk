// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// A bitwise combination representing a condition to watch for on an
// event source.
type IOCondition int

var xIOConditionGLibType func() types.GType

func IOConditionGLibType() types.GType {
	return xIOConditionGLibType()
}

const (

	// There is data to read.
	GIoInValue IOCondition = 1
	// Data can be written (without blocking).
	GIoOutValue IOCondition = 4
	// There is urgent data to read.
	GIoPriValue IOCondition = 2
	// Error condition.
	GIoErrValue IOCondition = 8
	// Hung up (the connection has been broken, usually for
	//            pipes and sockets).
	GIoHupValue IOCondition = 16
	// Invalid request. The file descriptor is not open.
	GIoNvalValue IOCondition = 32
)

var xVariantParserGetErrorQuark func() Quark

// Same as g_variant_error_quark().
func VariantParserGetErrorQuark() Quark {

	cret := xVariantParserGetErrorQuark()
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xIOConditionGLibType, lib, "g_io_condition_get_type")

	core.PuregoSafeRegister(&xVariantParserGetErrorQuark, lib, "g_variant_parser_get_error_quark")

}
