// Package gdk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gdk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// Indicates the specific type of tool being used being a tablet. Such as an
// airbrush, pencil, etc.
type DeviceToolType int

var xDeviceToolTypeGLibType func() types.GType

func DeviceToolTypeGLibType() types.GType {
	return xDeviceToolTypeGLibType()
}

const (

	// Tool is of an unknown type.
	DeviceToolTypeUnknownValue DeviceToolType = 0
	// Tool is a standard tablet stylus.
	DeviceToolTypePenValue DeviceToolType = 1
	// Tool is standard tablet eraser.
	DeviceToolTypeEraserValue DeviceToolType = 2
	// Tool is a brush stylus.
	DeviceToolTypeBrushValue DeviceToolType = 3
	// Tool is a pencil stylus.
	DeviceToolTypePencilValue DeviceToolType = 4
	// Tool is an airbrush stylus.
	DeviceToolTypeAirbrushValue DeviceToolType = 5
	// Tool is a mouse.
	DeviceToolTypeMouseValue DeviceToolType = 6
	// Tool is a lens cursor.
	DeviceToolTypeLensValue DeviceToolType = 7
)

// A physical tool associated to a `GdkDevice`.
type DeviceTool struct {
	gobject.Object
}

var xDeviceToolGLibType func() types.GType

func DeviceToolGLibType() types.GType {
	return xDeviceToolGLibType()
}

func DeviceToolNewFromInternalPtr(ptr uintptr) *DeviceTool {
	cls := &DeviceTool{}
	cls.Ptr = ptr
	return cls
}

var xDeviceToolGetAxes func(uintptr) AxisFlags

// Gets the axes of the tool.
func (x *DeviceTool) GetAxes() AxisFlags {

	cret := xDeviceToolGetAxes(x.GoPointer())
	return cret
}

var xDeviceToolGetHardwareId func(uintptr) uint64

// Gets the hardware ID of this tool, or 0 if it's not known.
//
// When non-zero, the identificator is unique for the given tool model,
// meaning that two identical tools will share the same @hardware_id,
// but will have different serial numbers (see
// [method@Gdk.DeviceTool.get_serial]).
//
// This is a more concrete (and device specific) method to identify
// a `GdkDeviceTool` than [method@Gdk.DeviceTool.get_tool_type],
// as a tablet may support multiple devices with the same
// `GdkDeviceToolType`, but different hardware identificators.
func (x *DeviceTool) GetHardwareId() uint64 {

	cret := xDeviceToolGetHardwareId(x.GoPointer())
	return cret
}

var xDeviceToolGetSerial func(uintptr) uint64

// Gets the serial number of this tool.
//
// This value can be used to identify a physical tool
// (eg. a tablet pen) across program executions.
func (x *DeviceTool) GetSerial() uint64 {

	cret := xDeviceToolGetSerial(x.GoPointer())
	return cret
}

var xDeviceToolGetToolType func(uintptr) DeviceToolType

// Gets the `GdkDeviceToolType` of the tool.
func (x *DeviceTool) GetToolType() DeviceToolType {

	cret := xDeviceToolGetToolType(x.GoPointer())
	return cret
}

func (c *DeviceTool) GoPointer() uintptr {
	return c.Ptr
}

func (c *DeviceTool) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xDeviceToolTypeGLibType, lib, "gdk_device_tool_type_get_type")

	core.PuregoSafeRegister(&xDeviceToolGLibType, lib, "gdk_device_tool_get_type")

	core.PuregoSafeRegister(&xDeviceToolGetAxes, lib, "gdk_device_tool_get_axes")
	core.PuregoSafeRegister(&xDeviceToolGetHardwareId, lib, "gdk_device_tool_get_hardware_id")
	core.PuregoSafeRegister(&xDeviceToolGetSerial, lib, "gdk_device_tool_get_serial")
	core.PuregoSafeRegister(&xDeviceToolGetToolType, lib, "gdk_device_tool_get_tool_type")

}
