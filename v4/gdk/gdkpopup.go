// Package gdk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gdk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type PopupInterface struct {
	_ structs.HostLayout
}

func (x *PopupInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A `GdkPopup` is a surface that is attached to another surface.
//
// The `GdkPopup` is positioned relative to its parent surface.
//
// `GdkPopup`s are typically used to implement menus and similar popups.
// They can be modal, which is indicated by the [property@GdkPopup:autohide]
// property.
type Popup interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	GetAutohide() bool
	GetParent() *Surface
	GetPositionX() int
	GetPositionY() int
	GetRectAnchor() Gravity
	GetSurfaceAnchor() Gravity
	Present(WidthVar int, HeightVar int, LayoutVar *PopupLayout) bool
}

var xPopupGLibType func() types.GType

func PopupGLibType() types.GType {
	return xPopupGLibType()
}

type PopupBase struct {
	Ptr uintptr
}

func (x *PopupBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *PopupBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Returns whether this popup is set to hide on outside clicks.
func (x *PopupBase) GetAutohide() bool {

	cret := XGdkPopupGetAutohide(x.GoPointer())
	return cret
}

// Returns the parent surface of a popup.
func (x *PopupBase) GetParent() *Surface {
	var cls *Surface

	cret := XGdkPopupGetParent(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Surface{}
	cls.Ptr = cret
	return cls
}

// Obtains the position of the popup relative to its parent.
func (x *PopupBase) GetPositionX() int {

	cret := XGdkPopupGetPositionX(x.GoPointer())
	return cret
}

// Obtains the position of the popup relative to its parent.
func (x *PopupBase) GetPositionY() int {

	cret := XGdkPopupGetPositionY(x.GoPointer())
	return cret
}

// Gets the current popup rectangle anchor.
//
// The value returned may change after calling [method@Gdk.Popup.present],
// or after the [signal@Gdk.Surface::layout] signal is emitted.
func (x *PopupBase) GetRectAnchor() Gravity {

	cret := XGdkPopupGetRectAnchor(x.GoPointer())
	return cret
}

// Gets the current popup surface anchor.
//
// The value returned may change after calling [method@Gdk.Popup.present],
// or after the [signal@Gdk.Surface::layout] signal is emitted.
func (x *PopupBase) GetSurfaceAnchor() Gravity {

	cret := XGdkPopupGetSurfaceAnchor(x.GoPointer())
	return cret
}

// Present @popup after having processed the `GdkPopupLayout` rules.
//
// If the popup was previously now showing, it will be showed,
// otherwise it will change position according to @layout.
//
// After calling this function, the result should be handled in response
// to the [signal@GdkSurface::layout] signal being emitted. The resulting
// popup position can be queried using [method@Gdk.Popup.get_position_x],
// [method@Gdk.Popup.get_position_y], and the resulting size will be sent as
// parameters in the layout signal. Use [method@Gdk.Popup.get_rect_anchor]
// and [method@Gdk.Popup.get_surface_anchor] to get the resulting anchors.
//
// Presenting may fail, for example if the @popup is set to autohide
// and is immediately hidden upon being presented. If presenting failed,
// the [signal@Gdk.Surface::layout] signal will not me emitted.
func (x *PopupBase) Present(WidthVar int, HeightVar int, LayoutVar *PopupLayout) bool {

	cret := XGdkPopupPresent(x.GoPointer(), WidthVar, HeightVar, LayoutVar)
	return cret
}

var XGdkPopupGetAutohide func(uintptr) bool
var XGdkPopupGetParent func(uintptr) uintptr
var XGdkPopupGetPositionX func(uintptr) int
var XGdkPopupGetPositionY func(uintptr) int
var XGdkPopupGetRectAnchor func(uintptr) Gravity
var XGdkPopupGetSurfaceAnchor func(uintptr) Gravity
var XGdkPopupPresent func(uintptr, int, int, *PopupLayout) bool

func init() {
	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xPopupGLibType, lib, "gdk_popup_get_type")

	core.PuregoSafeRegister(&XGdkPopupGetAutohide, lib, "gdk_popup_get_autohide")
	core.PuregoSafeRegister(&XGdkPopupGetParent, lib, "gdk_popup_get_parent")
	core.PuregoSafeRegister(&XGdkPopupGetPositionX, lib, "gdk_popup_get_position_x")
	core.PuregoSafeRegister(&XGdkPopupGetPositionY, lib, "gdk_popup_get_position_y")
	core.PuregoSafeRegister(&XGdkPopupGetRectAnchor, lib, "gdk_popup_get_rect_anchor")
	core.PuregoSafeRegister(&XGdkPopupGetSurfaceAnchor, lib, "gdk_popup_get_surface_anchor")
	core.PuregoSafeRegister(&XGdkPopupPresent, lib, "gdk_popup_present")

}
