// Package gdk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gdk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/cairo"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// `GdkCairoContext` is an object representing the platform-specific
// draw context.
//
// `GdkCairoContext`s are created for a surface using
// [method@Gdk.Surface.create_cairo_context], and the context
// can then be used to draw on that surface.
type CairoContext struct {
	DrawContext
}

var xCairoContextGLibType func() types.GType

func CairoContextGLibType() types.GType {
	return xCairoContextGLibType()
}

func CairoContextNewFromInternalPtr(ptr uintptr) *CairoContext {
	cls := &CairoContext{}
	cls.Ptr = ptr
	return cls
}

var xCairoContextCairoCreate func(uintptr) *cairo.Context

// Retrieves a Cairo context to be used to draw on the `GdkSurface`
// of @context.
//
// A call to [method@Gdk.DrawContext.begin_frame] with this
// @context must have been done or this function will return %NULL.
//
// The returned context is guaranteed to be valid until
// [method@Gdk.DrawContext.end_frame] is called.
func (x *CairoContext) CairoCreate() *cairo.Context {

	cret := xCairoContextCairoCreate(x.GoPointer())
	return cret
}

func (c *CairoContext) GoPointer() uintptr {
	return c.Ptr
}

func (c *CairoContext) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xCairoContextGLibType, lib, "gdk_cairo_context_get_type")

	core.PuregoSafeRegister(&xCairoContextCairoCreate, lib, "gdk_cairo_context_cairo_create")

}
