// Package gdk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gdk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type ToplevelInterface struct {
	_ structs.HostLayout
}

func (x *ToplevelInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A `GdkToplevel` is a freestanding toplevel surface.
//
// The `GdkToplevel` interface provides useful APIs for interacting with
// the windowing system, such as controlling maximization and size of the
// surface, setting icons and transient parents for dialogs.
type Toplevel interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	BeginMove(DeviceVar *Device, ButtonVar int, XVar float64, YVar float64, TimestampVar uint32)
	BeginResize(EdgeVar SurfaceEdge, DeviceVar *Device, ButtonVar int, XVar float64, YVar float64, TimestampVar uint32)
	Focus(TimestampVar uint32)
	GetState() ToplevelState
	InhibitSystemShortcuts(EventVar *Event)
	Lower() bool
	Minimize() bool
	Present(LayoutVar *ToplevelLayout)
	RestoreSystemShortcuts()
	SetDecorated(DecoratedVar bool)
	SetDeletable(DeletableVar bool)
	SetIconList(SurfacesVar *glib.List)
	SetModal(ModalVar bool)
	SetStartupId(StartupIdVar string)
	SetTitle(TitleVar string)
	SetTransientFor(ParentVar *Surface)
	ShowWindowMenu(EventVar *Event) bool
	SupportsEdgeConstraints() bool
	TitlebarGesture(GestureVar TitlebarGesture) bool
}

var xToplevelGLibType func() types.GType

func ToplevelGLibType() types.GType {
	return xToplevelGLibType()
}

type ToplevelBase struct {
	Ptr uintptr
}

func (x *ToplevelBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *ToplevelBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Begins an interactive move operation.
//
// You might use this function to implement draggable titlebars.
func (x *ToplevelBase) BeginMove(DeviceVar *Device, ButtonVar int, XVar float64, YVar float64, TimestampVar uint32) {

	XGdkToplevelBeginMove(x.GoPointer(), DeviceVar.GoPointer(), ButtonVar, XVar, YVar, TimestampVar)

}

// Begins an interactive resize operation.
//
// You might use this function to implement a “window resize grip.”
func (x *ToplevelBase) BeginResize(EdgeVar SurfaceEdge, DeviceVar *Device, ButtonVar int, XVar float64, YVar float64, TimestampVar uint32) {

	XGdkToplevelBeginResize(x.GoPointer(), EdgeVar, DeviceVar.GoPointer(), ButtonVar, XVar, YVar, TimestampVar)

}

// Sets keyboard focus to @surface.
//
// In most cases, [method@Gtk.Window.present_with_time] should be
// used on a [class@Gtk.Window], rather than calling this function.
func (x *ToplevelBase) Focus(TimestampVar uint32) {

	XGdkToplevelFocus(x.GoPointer(), TimestampVar)

}

// Gets the bitwise or of the currently active surface state flags,
// from the `GdkToplevelState` enumeration.
func (x *ToplevelBase) GetState() ToplevelState {

	cret := XGdkToplevelGetState(x.GoPointer())
	return cret
}

// Requests that the @toplevel inhibit the system shortcuts.
//
// This is asking the desktop environment/windowing system to let all
// keyboard events reach the surface, as long as it is focused, instead
// of triggering system actions.
//
// If granted, the rerouting remains active until the default shortcuts
// processing is restored with [method@Gdk.Toplevel.restore_system_shortcuts],
// or the request is revoked by the desktop environment, windowing system
// or the user.
//
// A typical use case for this API is remote desktop or virtual machine
// viewers which need to inhibit the default system keyboard shortcuts
// so that the remote session or virtual host gets those instead of the
// local environment.
//
// The windowing system or desktop environment may ask the user to grant
// or deny the request or even choose to ignore the request entirely.
//
// The caller can be notified whenever the request is granted or revoked
// by listening to the [property@Gdk.Toplevel:shortcuts-inhibited] property.
func (x *ToplevelBase) InhibitSystemShortcuts(EventVar *Event) {

	XGdkToplevelInhibitSystemShortcuts(x.GoPointer(), EventVar.GoPointer())

}

// Asks to lower the @toplevel below other windows.
//
// The windowing system may choose to ignore the request.
func (x *ToplevelBase) Lower() bool {

	cret := XGdkToplevelLower(x.GoPointer())
	return cret
}

// Asks to minimize the @toplevel.
//
// The windowing system may choose to ignore the request.
func (x *ToplevelBase) Minimize() bool {

	cret := XGdkToplevelMinimize(x.GoPointer())
	return cret
}

// Present @toplevel after having processed the `GdkToplevelLayout` rules.
//
// If the toplevel was previously not showing, it will be showed,
// otherwise it will change layout according to @layout.
//
// GDK may emit the [signal@Gdk.Toplevel::compute-size] signal to let
// the user of this toplevel compute the preferred size of the toplevel
// surface.
//
// Presenting is asynchronous and the specified layout parameters are not
// guaranteed to be respected.
func (x *ToplevelBase) Present(LayoutVar *ToplevelLayout) {

	XGdkToplevelPresent(x.GoPointer(), LayoutVar)

}

// Restore default system keyboard shortcuts which were previously
// inhibited.
//
// This undoes the effect of [method@Gdk.Toplevel.inhibit_system_shortcuts].
func (x *ToplevelBase) RestoreSystemShortcuts() {

	XGdkToplevelRestoreSystemShortcuts(x.GoPointer())

}

// Sets the toplevel to be decorated.
//
// Setting @decorated to %FALSE hints the desktop environment
// that the surface has its own, client-side decorations and
// does not need to have window decorations added.
func (x *ToplevelBase) SetDecorated(DecoratedVar bool) {

	XGdkToplevelSetDecorated(x.GoPointer(), DecoratedVar)

}

// Sets the toplevel to be deletable.
//
// Setting @deletable to %TRUE hints the desktop environment
// that it should offer the user a way to close the surface.
func (x *ToplevelBase) SetDeletable(DeletableVar bool) {

	XGdkToplevelSetDeletable(x.GoPointer(), DeletableVar)

}

// Sets a list of icons for the surface.
//
// One of these will be used to represent the surface in iconic form.
// The icon may be shown in window lists or task bars. Which icon
// size is shown depends on the window manager. The window manager
// can scale the icon but setting several size icons can give better
// image quality.
//
// Note that some platforms don't support surface icons.
func (x *ToplevelBase) SetIconList(SurfacesVar *glib.List) {

	XGdkToplevelSetIconList(x.GoPointer(), SurfacesVar)

}

// Sets the toplevel to be modal.
//
// The application can use this hint to tell the
// window manager that a certain surface has modal
// behaviour. The window manager can use this information
// to handle modal surfaces in a special way.
//
// You should only use this on surfaces for which you have
// previously called [method@Gdk.Toplevel.set_transient_for].
func (x *ToplevelBase) SetModal(ModalVar bool) {

	XGdkToplevelSetModal(x.GoPointer(), ModalVar)

}

// Sets the startup notification ID.
//
// When using GTK, typically you should use
// [method@Gtk.Window.set_startup_id] instead of this
// low-level function.
func (x *ToplevelBase) SetStartupId(StartupIdVar string) {

	XGdkToplevelSetStartupId(x.GoPointer(), StartupIdVar)

}

// Sets the title of a toplevel surface.
//
// The title maybe be displayed in the titlebar,
// in lists of windows, etc.
func (x *ToplevelBase) SetTitle(TitleVar string) {

	XGdkToplevelSetTitle(x.GoPointer(), TitleVar)

}

// Sets a transient-for parent.
//
// Indicates to the window manager that @surface is a transient
// dialog associated with the application surface @parent. This
// allows the window manager to do things like center @surface
// on @parent and keep @surface above @parent.
//
// See [method@Gtk.Window.set_transient_for] if you’re using
// [class@Gtk.Window] or [class@Gtk.Dialog].
func (x *ToplevelBase) SetTransientFor(ParentVar *Surface) {

	XGdkToplevelSetTransientFor(x.GoPointer(), ParentVar.GoPointer())

}

// Asks the windowing system to show the window menu.
//
// The window menu is the menu shown when right-clicking the titlebar
// on traditional windows managed by the window manager. This is useful
// for windows using client-side decorations, activating it with a
// right-click on the window decorations.
func (x *ToplevelBase) ShowWindowMenu(EventVar *Event) bool {

	cret := XGdkToplevelShowWindowMenu(x.GoPointer(), EventVar.GoPointer())
	return cret
}

// Returns whether the desktop environment supports
// tiled window states.
func (x *ToplevelBase) SupportsEdgeConstraints() bool {

	cret := XGdkToplevelSupportsEdgeConstraints(x.GoPointer())
	return cret
}

func (x *ToplevelBase) TitlebarGesture(GestureVar TitlebarGesture) bool {

	cret := XGdkToplevelTitlebarGesture(x.GoPointer(), GestureVar)
	return cret
}

var XGdkToplevelBeginMove func(uintptr, uintptr, int, float64, float64, uint32)
var XGdkToplevelBeginResize func(uintptr, SurfaceEdge, uintptr, int, float64, float64, uint32)
var XGdkToplevelFocus func(uintptr, uint32)
var XGdkToplevelGetState func(uintptr) ToplevelState
var XGdkToplevelInhibitSystemShortcuts func(uintptr, uintptr)
var XGdkToplevelLower func(uintptr) bool
var XGdkToplevelMinimize func(uintptr) bool
var XGdkToplevelPresent func(uintptr, *ToplevelLayout)
var XGdkToplevelRestoreSystemShortcuts func(uintptr)
var XGdkToplevelSetDecorated func(uintptr, bool)
var XGdkToplevelSetDeletable func(uintptr, bool)
var XGdkToplevelSetIconList func(uintptr, *glib.List)
var XGdkToplevelSetModal func(uintptr, bool)
var XGdkToplevelSetStartupId func(uintptr, string)
var XGdkToplevelSetTitle func(uintptr, string)
var XGdkToplevelSetTransientFor func(uintptr, uintptr)
var XGdkToplevelShowWindowMenu func(uintptr, uintptr) bool
var XGdkToplevelSupportsEdgeConstraints func(uintptr) bool
var XGdkToplevelTitlebarGesture func(uintptr, TitlebarGesture) bool

// Specifies the state of a toplevel surface.
//
// On platforms that support information about individual edges, the
// %GDK_TOPLEVEL_STATE_TILED state will be set whenever any of the individual
// tiled states is set. On platforms that lack that support, the tiled state
// will give an indication of tiledness without any of the per-edge states
// being set.
type ToplevelState int

var xToplevelStateGLibType func() types.GType

func ToplevelStateGLibType() types.GType {
	return xToplevelStateGLibType()
}

const (

	// the surface is minimized
	ToplevelStateMinimizedValue ToplevelState = 1
	// the surface is maximized
	ToplevelStateMaximizedValue ToplevelState = 2
	// the surface is sticky
	ToplevelStateStickyValue ToplevelState = 4
	// the surface is maximized without decorations
	ToplevelStateFullscreenValue ToplevelState = 8
	// the surface is kept above other surfaces
	ToplevelStateAboveValue ToplevelState = 16
	// the surface is kept below other surfaces
	ToplevelStateBelowValue ToplevelState = 32
	// the surface is presented as focused (with active decorations)
	ToplevelStateFocusedValue ToplevelState = 64
	// the surface is in a tiled state
	ToplevelStateTiledValue ToplevelState = 128
	// whether the top edge is tiled
	ToplevelStateTopTiledValue ToplevelState = 256
	// whether the top edge is resizable
	ToplevelStateTopResizableValue ToplevelState = 512
	// whether the right edge is tiled
	ToplevelStateRightTiledValue ToplevelState = 1024
	// whether the right edge is resizable
	ToplevelStateRightResizableValue ToplevelState = 2048
	// whether the bottom edge is tiled
	ToplevelStateBottomTiledValue ToplevelState = 4096
	// whether the bottom edge is resizable
	ToplevelStateBottomResizableValue ToplevelState = 8192
	// whether the left edge is tiled
	ToplevelStateLeftTiledValue ToplevelState = 16384
	// whether the left edge is resizable
	ToplevelStateLeftResizableValue ToplevelState = 32768
)

// Indicates which monitor a surface should span over when in fullscreen mode.
type FullscreenMode int

var xFullscreenModeGLibType func() types.GType

func FullscreenModeGLibType() types.GType {
	return xFullscreenModeGLibType()
}

const (

	// Fullscreen on current monitor only.
	FullscreenOnCurrentMonitorValue FullscreenMode = 0
	// Span across all monitors when fullscreen.
	FullscreenOnAllMonitorsValue FullscreenMode = 1
)

// Determines a surface edge or corner.
type SurfaceEdge int

var xSurfaceEdgeGLibType func() types.GType

func SurfaceEdgeGLibType() types.GType {
	return xSurfaceEdgeGLibType()
}

const (

	// the top left corner.
	SurfaceEdgeNorthWestValue SurfaceEdge = 0
	// the top edge.
	SurfaceEdgeNorthValue SurfaceEdge = 1
	// the top right corner.
	SurfaceEdgeNorthEastValue SurfaceEdge = 2
	// the left edge.
	SurfaceEdgeWestValue SurfaceEdge = 3
	// the right edge.
	SurfaceEdgeEastValue SurfaceEdge = 4
	// the lower left corner.
	SurfaceEdgeSouthWestValue SurfaceEdge = 5
	// the lower edge.
	SurfaceEdgeSouthValue SurfaceEdge = 6
	// the lower right corner.
	SurfaceEdgeSouthEastValue SurfaceEdge = 7
)

func init() {
	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xToplevelStateGLibType, lib, "gdk_toplevel_state_get_type")

	core.PuregoSafeRegister(&xFullscreenModeGLibType, lib, "gdk_fullscreen_mode_get_type")

	core.PuregoSafeRegister(&xSurfaceEdgeGLibType, lib, "gdk_surface_edge_get_type")

	core.PuregoSafeRegister(&xToplevelGLibType, lib, "gdk_toplevel_get_type")

	core.PuregoSafeRegister(&XGdkToplevelBeginMove, lib, "gdk_toplevel_begin_move")
	core.PuregoSafeRegister(&XGdkToplevelBeginResize, lib, "gdk_toplevel_begin_resize")
	core.PuregoSafeRegister(&XGdkToplevelFocus, lib, "gdk_toplevel_focus")
	core.PuregoSafeRegister(&XGdkToplevelGetState, lib, "gdk_toplevel_get_state")
	core.PuregoSafeRegister(&XGdkToplevelInhibitSystemShortcuts, lib, "gdk_toplevel_inhibit_system_shortcuts")
	core.PuregoSafeRegister(&XGdkToplevelLower, lib, "gdk_toplevel_lower")
	core.PuregoSafeRegister(&XGdkToplevelMinimize, lib, "gdk_toplevel_minimize")
	core.PuregoSafeRegister(&XGdkToplevelPresent, lib, "gdk_toplevel_present")
	core.PuregoSafeRegister(&XGdkToplevelRestoreSystemShortcuts, lib, "gdk_toplevel_restore_system_shortcuts")
	core.PuregoSafeRegister(&XGdkToplevelSetDecorated, lib, "gdk_toplevel_set_decorated")
	core.PuregoSafeRegister(&XGdkToplevelSetDeletable, lib, "gdk_toplevel_set_deletable")
	core.PuregoSafeRegister(&XGdkToplevelSetIconList, lib, "gdk_toplevel_set_icon_list")
	core.PuregoSafeRegister(&XGdkToplevelSetModal, lib, "gdk_toplevel_set_modal")
	core.PuregoSafeRegister(&XGdkToplevelSetStartupId, lib, "gdk_toplevel_set_startup_id")
	core.PuregoSafeRegister(&XGdkToplevelSetTitle, lib, "gdk_toplevel_set_title")
	core.PuregoSafeRegister(&XGdkToplevelSetTransientFor, lib, "gdk_toplevel_set_transient_for")
	core.PuregoSafeRegister(&XGdkToplevelShowWindowMenu, lib, "gdk_toplevel_show_window_menu")
	core.PuregoSafeRegister(&XGdkToplevelSupportsEdgeConstraints, lib, "gdk_toplevel_supports_edge_constraints")
	core.PuregoSafeRegister(&XGdkToplevelTitlebarGesture, lib, "gdk_toplevel_titlebar_gesture")

}
