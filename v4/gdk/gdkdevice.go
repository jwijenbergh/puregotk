// Package gdk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gdk

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/pango"
)

// A `GdkTimeCoord` stores a single event in a motion history.
//
// To check whether an axis is present, check whether the corresponding
// flag from the [flags@Gdk.AxisFlags] enumeration is set in the @flags
// To access individual axis values, use the values of the values of
// the [enum@Gdk.AxisUse] enumerations as indices.
type TimeCoord struct {
	Time uint32

	Flags AxisFlags

	Axes [12]float64
}

func (x *TimeCoord) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// An enumeration describing the type of an input device in general terms.
type InputSource int

const (

	// the device is a mouse. (This will be reported for the core
	//   pointer, even if it is something else, such as a trackball.)
	SourceMouseValue InputSource = 0
	// the device is a stylus of a graphics tablet or similar device.
	SourcePenValue InputSource = 1
	// the device is a keyboard.
	SourceKeyboardValue InputSource = 2
	// the device is a direct-input touch device, such
	//   as a touchscreen or tablet
	SourceTouchscreenValue InputSource = 3
	// the device is an indirect touch device, such
	//   as a touchpad
	SourceTouchpadValue InputSource = 4
	// the device is a trackpoint
	SourceTrackpointValue InputSource = 5
	// the device is a "pad", a collection of buttons,
	//   rings and strips found in drawing tablets
	SourceTabletPadValue InputSource = 6
)

// The `GdkDevice` object represents an input device, such
// as a keyboard, a mouse, or a touchpad.
//
// See the [class@Gdk.Seat] documentation for more information
// about the various kinds of devices, and their relationships.
type Device struct {
	gobject.Object
}

func DeviceNewFromInternalPtr(ptr uintptr) *Device {
	cls := &Device{}
	cls.Ptr = ptr
	return cls
}

var xDeviceGetCapsLockState func(uintptr) bool

// Retrieves whether the Caps Lock modifier of the keyboard is locked.
//
// This is only relevant for keyboard devices.
func (x *Device) GetCapsLockState() bool {

	cret := xDeviceGetCapsLockState(x.GoPointer())
	return cret
}

var xDeviceGetDeviceTool func(uintptr) uintptr

// Retrieves the current tool for @device.
func (x *Device) GetDeviceTool() *DeviceTool {
	var cls *DeviceTool

	cret := xDeviceGetDeviceTool(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &DeviceTool{}
	cls.Ptr = cret
	return cls
}

var xDeviceGetDirection func(uintptr) pango.Direction

// Returns the direction of effective layout of the keyboard.
//
// This is only relevant for keyboard devices.
//
// The direction of a layout is the direction of the majority
// of its symbols. See [func@Pango.unichar_direction].
func (x *Device) GetDirection() pango.Direction {

	cret := xDeviceGetDirection(x.GoPointer())
	return cret
}

var xDeviceGetDisplay func(uintptr) uintptr

// Returns the `GdkDisplay` to which @device pertains.
func (x *Device) GetDisplay() *Display {
	var cls *Display

	cret := xDeviceGetDisplay(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Display{}
	cls.Ptr = cret
	return cls
}

var xDeviceGetHasCursor func(uintptr) bool

// Determines whether the pointer follows device motion.
//
// This is not meaningful for keyboard devices, which
// don't have a pointer.
func (x *Device) GetHasCursor() bool {

	cret := xDeviceGetHasCursor(x.GoPointer())
	return cret
}

var xDeviceGetModifierState func(uintptr) ModifierType

// Retrieves the current modifier state of the keyboard.
//
// This is only relevant for keyboard devices.
func (x *Device) GetModifierState() ModifierType {

	cret := xDeviceGetModifierState(x.GoPointer())
	return cret
}

var xDeviceGetName func(uintptr) string

// The name of the device, suitable for showing in a user interface.
func (x *Device) GetName() string {

	cret := xDeviceGetName(x.GoPointer())
	return cret
}

var xDeviceGetNumLockState func(uintptr) bool

// Retrieves whether the Num Lock modifier of the keyboard is locked.
//
// This is only relevant for keyboard devices.
func (x *Device) GetNumLockState() bool {

	cret := xDeviceGetNumLockState(x.GoPointer())
	return cret
}

var xDeviceGetNumTouches func(uintptr) uint

// Retrieves the number of touch points associated to @device.
func (x *Device) GetNumTouches() uint {

	cret := xDeviceGetNumTouches(x.GoPointer())
	return cret
}

var xDeviceGetProductId func(uintptr) string

// Returns the product ID of this device.
//
// This ID is retrieved from the device, and does not change.
// See [method@Gdk.Device.get_vendor_id] for more information.
func (x *Device) GetProductId() string {

	cret := xDeviceGetProductId(x.GoPointer())
	return cret
}

var xDeviceGetScrollLockState func(uintptr) bool

// Retrieves whether the Scroll Lock modifier of the keyboard is locked.
//
// This is only relevant for keyboard devices.
func (x *Device) GetScrollLockState() bool {

	cret := xDeviceGetScrollLockState(x.GoPointer())
	return cret
}

var xDeviceGetSeat func(uintptr) uintptr

// Returns the `GdkSeat` the device belongs to.
func (x *Device) GetSeat() *Seat {
	var cls *Seat

	cret := xDeviceGetSeat(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Seat{}
	cls.Ptr = cret
	return cls
}

var xDeviceGetSource func(uintptr) InputSource

// Determines the type of the device.
func (x *Device) GetSource() InputSource {

	cret := xDeviceGetSource(x.GoPointer())
	return cret
}

var xDeviceGetSurfaceAtPosition func(uintptr, float64, float64) uintptr

// Obtains the surface underneath @device, returning the location of the
// device in @win_x and @win_y.
//
// Returns %NULL if the surface tree under @device is not known to GDK
// (for example, belongs to another application).
func (x *Device) GetSurfaceAtPosition(WinXVar float64, WinYVar float64) *Surface {
	var cls *Surface

	cret := xDeviceGetSurfaceAtPosition(x.GoPointer(), WinXVar, WinYVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &Surface{}
	cls.Ptr = cret
	return cls
}

var xDeviceGetTimestamp func(uintptr) uint32

// Returns the timestamp of the last activity for this device.
//
// In practice, this means the timestamp of the last event that was
// received from the OS for this device. (GTK may occasionally produce
// events for a device that are not received from the OS, and will not
// update the timestamp).
func (x *Device) GetTimestamp() uint32 {

	cret := xDeviceGetTimestamp(x.GoPointer())
	return cret
}

var xDeviceGetVendorId func(uintptr) string

// Returns the vendor ID of this device.
//
// This ID is retrieved from the device, and does not change.
//
// This function, together with [method@Gdk.Device.get_product_id],
// can be used to eg. compose `GSettings` paths to store settings
// for this device.
//
// ```c
//
//	static GSettings *
//	get_device_settings (GdkDevice *device)
//	{
//	  const char *vendor, *product;
//	  GSettings *settings;
//	  GdkDevice *device;
//	  char *path;
//
//	  vendor = gdk_device_get_vendor_id (device);
//	  product = gdk_device_get_product_id (device);
//
//	  path = g_strdup_printf ("/org/example/app/devices/%s:%s/", vendor, product);
//	  settings = g_settings_new_with_path (DEVICE_SCHEMA, path);
//	  g_free (path);
//
//	  return settings;
//	}
//
// ```
func (x *Device) GetVendorId() string {

	cret := xDeviceGetVendorId(x.GoPointer())
	return cret
}

var xDeviceHasBidiLayouts func(uintptr) bool

// Determines if layouts for both right-to-left and
// left-to-right languages are in use on the keyboard.
//
// This is only relevant for keyboard devices.
func (x *Device) HasBidiLayouts() bool {

	cret := xDeviceHasBidiLayouts(x.GoPointer())
	return cret
}

func (c *Device) GoPointer() uintptr {
	return c.Ptr
}

func (c *Device) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted either when the number of either axes or keys changes.
//
// On X11 this will normally happen when the physical device
// routing events through the logical device changes (for
// example, user switches from the USB mouse to a tablet); in
// that case the logical device will change to reflect the axes
// and keys on the new physical device.
func (x *Device) ConnectChanged(cb *func(Device)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "changed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := Device{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "changed", cbRefPtr)
}

// Emitted on pen/eraser devices whenever tools enter or leave proximity.
func (x *Device) ConnectToolChanged(cb *func(Device, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "tool-changed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, ToolVarp uintptr) {
		fa := Device{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, ToolVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "tool-changed", cbRefPtr)
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xDeviceGetCapsLockState, lib, "gdk_device_get_caps_lock_state")
	core.PuregoSafeRegister(&xDeviceGetDeviceTool, lib, "gdk_device_get_device_tool")
	core.PuregoSafeRegister(&xDeviceGetDirection, lib, "gdk_device_get_direction")
	core.PuregoSafeRegister(&xDeviceGetDisplay, lib, "gdk_device_get_display")
	core.PuregoSafeRegister(&xDeviceGetHasCursor, lib, "gdk_device_get_has_cursor")
	core.PuregoSafeRegister(&xDeviceGetModifierState, lib, "gdk_device_get_modifier_state")
	core.PuregoSafeRegister(&xDeviceGetName, lib, "gdk_device_get_name")
	core.PuregoSafeRegister(&xDeviceGetNumLockState, lib, "gdk_device_get_num_lock_state")
	core.PuregoSafeRegister(&xDeviceGetNumTouches, lib, "gdk_device_get_num_touches")
	core.PuregoSafeRegister(&xDeviceGetProductId, lib, "gdk_device_get_product_id")
	core.PuregoSafeRegister(&xDeviceGetScrollLockState, lib, "gdk_device_get_scroll_lock_state")
	core.PuregoSafeRegister(&xDeviceGetSeat, lib, "gdk_device_get_seat")
	core.PuregoSafeRegister(&xDeviceGetSource, lib, "gdk_device_get_source")
	core.PuregoSafeRegister(&xDeviceGetSurfaceAtPosition, lib, "gdk_device_get_surface_at_position")
	core.PuregoSafeRegister(&xDeviceGetTimestamp, lib, "gdk_device_get_timestamp")
	core.PuregoSafeRegister(&xDeviceGetVendorId, lib, "gdk_device_get_vendor_id")
	core.PuregoSafeRegister(&xDeviceHasBidiLayouts, lib, "gdk_device_has_bidi_layouts")

}
