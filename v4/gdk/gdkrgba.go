// Package gdk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gdk

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// A `GdkRGBA` is used to represent a color, in a way that is compatible
// with cairo’s notion of color.
//
// `GdkRGBA` is a convenient way to pass colors around. It’s based on
// cairo’s way to deal with colors and mirrors its behavior. All values
// are in the range from 0.0 to 1.0 inclusive. So the color
// (0.0, 0.0, 0.0, 0.0) represents transparent black and
// (1.0, 1.0, 1.0, 1.0) is opaque white. Other values will
// be clamped to this range when drawing.
type RGBA struct {
	_ structs.HostLayout

	Red float32

	Green float32

	Blue float32

	Alpha float32
}

var xRGBAGLibType func() types.GType

func RGBAGLibType() types.GType {
	return xRGBAGLibType()
}

func (x *RGBA) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xRGBACopy func(uintptr) *RGBA

// Makes a copy of a `GdkRGBA`.
//
// The result must be freed through [method@Gdk.RGBA.free].
func (x *RGBA) Copy() *RGBA {

	cret := xRGBACopy(x.GoPointer())
	return cret
}

var xRGBAEqual func(uintptr, uintptr) bool

// Compares two `GdkRGBA` colors.
func (x *RGBA) Equal(P2Var uintptr) bool {

	cret := xRGBAEqual(x.GoPointer(), P2Var)
	return cret
}

var xRGBAFree func(uintptr)

// Frees a `GdkRGBA`.
func (x *RGBA) Free() {

	xRGBAFree(x.GoPointer())

}

var xRGBAHash func(uintptr) uint

// A hash function suitable for using for a hash
// table that stores `GdkRGBA`s.
func (x *RGBA) Hash() uint {

	cret := xRGBAHash(x.GoPointer())
	return cret
}

var xRGBAIsClear func(uintptr) bool

// Checks if an @rgba value is transparent.
//
// That is, drawing with the value would not produce any change.
func (x *RGBA) IsClear() bool {

	cret := xRGBAIsClear(x.GoPointer())
	return cret
}

var xRGBAIsOpaque func(uintptr) bool

// Checks if an @rgba value is opaque.
//
// That is, drawing with the value will not retain any results
// from previous contents.
func (x *RGBA) IsOpaque() bool {

	cret := xRGBAIsOpaque(x.GoPointer())
	return cret
}

var xRGBAParse func(uintptr, string) bool

// Parses a textual representation of a color.
//
// The string can be either one of:
//
//   - A standard name (Taken from the Css specification).
//   - A hexadecimal value in the form “\#rgb”, “\#rrggbb”,
//     “\#rrrgggbbb” or ”\#rrrrggggbbbb”
//   - A hexadecimal value in the form “\#rgba”, “\#rrggbbaa”,
//     or ”\#rrrrggggbbbbaaaa”
//   - A RGB color in the form “rgb(r,g,b)” (In this case the color
//     will have full opacity)
//   - A RGBA color in the form “rgba(r,g,b,a)”
//
// Where “r”, “g”, “b” and “a” are respectively the red, green,
// blue and alpha color values. In the last two cases, “r”, “g”,
// and “b” are either integers in the range 0 to 255 or percentage
// values in the range 0% to 100%, and a is a floating point value
// in the range 0 to 1.
func (x *RGBA) Parse(SpecVar string) bool {

	cret := xRGBAParse(x.GoPointer(), SpecVar)
	return cret
}

var xRGBAToString func(uintptr) string

// Returns a textual specification of @rgba in the form
// `rgb(r,g,b)` or `rgba(r,g,b,a)`, where “r”, “g”, “b” and
// “a” represent the red, green, blue and alpha values
// respectively. “r”, “g”, and “b” are represented as integers
// in the range 0 to 255, and “a” is represented as a floating
// point value in the range 0 to 1.
//
// These string forms are string forms that are supported by
// the CSS3 colors module, and can be parsed by [method@Gdk.RGBA.parse].
//
// Note that this string representation may lose some precision,
// since “r”, “g” and “b” are represented as 8-bit integers. If
// this is a concern, you should use a different representation.
func (x *RGBA) ToString() string {

	cret := xRGBAToString(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xRGBAGLibType, lib, "gdk_rgba_get_type")

	core.PuregoSafeRegister(&xRGBACopy, lib, "gdk_rgba_copy")
	core.PuregoSafeRegister(&xRGBAEqual, lib, "gdk_rgba_equal")
	core.PuregoSafeRegister(&xRGBAFree, lib, "gdk_rgba_free")
	core.PuregoSafeRegister(&xRGBAHash, lib, "gdk_rgba_hash")
	core.PuregoSafeRegister(&xRGBAIsClear, lib, "gdk_rgba_is_clear")
	core.PuregoSafeRegister(&xRGBAIsOpaque, lib, "gdk_rgba_is_opaque")
	core.PuregoSafeRegister(&xRGBAParse, lib, "gdk_rgba_parse")
	core.PuregoSafeRegister(&xRGBAToString, lib, "gdk_rgba_to_string")

}
