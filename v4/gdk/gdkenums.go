// Package gdk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gdk

import "github.com/jwijenbergh/puregotk/v4/gobject/types"

const (
	// Defines all possible DND actions.
	//
	// This can be used in [method@Gdk.Drop.status] messages when any drop
	// can be accepted or a more specific drop method is not yet known.
	ACTION_ALL int = 7
	// A mask covering all entries in `GdkModifierType`.
	MODIFIER_MASK int = 469769999
)

// Flags describing the current capabilities of a device/tool.
type AxisFlags int

var xAxisFlagsGLibType func() types.GType

func AxisFlagsGLibType() types.GType {
	return xAxisFlagsGLibType()
}

const (

	// X axis is present
	AxisFlagXValue AxisFlags = 2
	// Y axis is present
	AxisFlagYValue AxisFlags = 4
	// Scroll X delta axis is present
	AxisFlagDeltaXValue AxisFlags = 8
	// Scroll Y delta axis is present
	AxisFlagDeltaYValue AxisFlags = 16
	// Pressure axis is present
	AxisFlagPressureValue AxisFlags = 32
	// X tilt axis is present
	AxisFlagXtiltValue AxisFlags = 64
	// Y tilt axis is present
	AxisFlagYtiltValue AxisFlags = 128
	// Wheel axis is present
	AxisFlagWheelValue AxisFlags = 256
	// Distance axis is present
	AxisFlagDistanceValue AxisFlags = 512
	// Z-axis rotation is present
	AxisFlagRotationValue AxisFlags = 1024
	// Slider axis is present
	AxisFlagSliderValue AxisFlags = 2048
)

// Used in `GdkDrop` and `GdkDrag` to indicate the actions that the
// destination can and should do with the dropped data.
type DragAction int

var xDragActionGLibType func() types.GType

func DragActionGLibType() types.GType {
	return xDragActionGLibType()
}

const (

	// Copy the data.
	ActionCopyValue DragAction = 1
	// Move the data, i.e. first copy it, then delete
	//   it from the source using the DELETE target of the X selection protocol.
	ActionMoveValue DragAction = 2
	// Add a link to the data. Note that this is only
	//   useful if source and destination agree on what it means, and is not
	//   supported on all platforms.
	ActionLinkValue DragAction = 4
	// Ask the user what to do with the data.
	ActionAskValue DragAction = 8
)

// Flags to indicate the state of modifier keys and mouse buttons
// in events.
//
// Typical modifier keys are Shift, Control, Meta, Super, Hyper, Alt, Compose,
// Apple, CapsLock or ShiftLock.
//
// Note that GDK may add internal values to events which include values outside
// of this enumeration. Your code should preserve and ignore them.  You can use
// %GDK_MODIFIER_MASK to remove all private values.
type ModifierType int

var xModifierTypeGLibType func() types.GType

func ModifierTypeGLibType() types.GType {
	return xModifierTypeGLibType()
}

const (

	// the Shift key.
	ShiftMaskValue ModifierType = 1
	// a Lock key (depending on the modifier mapping of the
	//  X server this may either be CapsLock or ShiftLock).
	LockMaskValue ModifierType = 2
	// the Control key.
	ControlMaskValue ModifierType = 4
	// the fourth modifier key (it depends on the modifier
	//  mapping of the X server which key is interpreted as this modifier, but
	//  normally it is the Alt key).
	AltMaskValue ModifierType = 8
	// the first mouse button.
	Button1MaskValue ModifierType = 256
	// the second mouse button.
	Button2MaskValue ModifierType = 512
	// the third mouse button.
	Button3MaskValue ModifierType = 1024
	// the fourth mouse button.
	Button4MaskValue ModifierType = 2048
	// the fifth mouse button.
	Button5MaskValue ModifierType = 4096
	// the Super modifier
	SuperMaskValue ModifierType = 67108864
	// the Hyper modifier
	HyperMaskValue ModifierType = 134217728
	// the Meta modifier
	MetaMaskValue ModifierType = 268435456
)

// Defines how device axes are interpreted by GTK.
//
// Note that the X and Y axes are not really needed; pointer devices
// report their location via the x/y members of events regardless. Whether
// X and Y are present as axes depends on the GDK backend.
type AxisUse int

var xAxisUseGLibType func() types.GType

func AxisUseGLibType() types.GType {
	return xAxisUseGLibType()
}

const (

	// the axis is ignored.
	AxisIgnoreValue AxisUse = 0
	// the axis is used as the x axis.
	AxisXValue AxisUse = 1
	// the axis is used as the y axis.
	AxisYValue AxisUse = 2
	// the axis is used as the scroll x delta
	AxisDeltaXValue AxisUse = 3
	// the axis is used as the scroll y delta
	AxisDeltaYValue AxisUse = 4
	// the axis is used for pressure information.
	AxisPressureValue AxisUse = 5
	// the axis is used for x tilt information.
	AxisXtiltValue AxisUse = 6
	// the axis is used for y tilt information.
	AxisYtiltValue AxisUse = 7
	// the axis is used for wheel information.
	AxisWheelValue AxisUse = 8
	// the axis is used for pen/tablet distance information
	AxisDistanceValue AxisUse = 9
	// the axis is used for pen rotation information
	AxisRotationValue AxisUse = 10
	// the axis is used for pen slider information
	AxisSliderValue AxisUse = 11
	// a constant equal to the numerically highest axis value.
	AxisLastValue AxisUse = 12
)

// Error enumeration for `GdkGLContext`.
type GLError int

var xGLErrorGLibType func() types.GType

func GLErrorGLibType() types.GType {
	return xGLErrorGLibType()
}

const (

	// OpenGL support is not available
	GlErrorNotAvailableValue GLError = 0
	// The requested visual format is not supported
	GlErrorUnsupportedFormatValue GLError = 1
	// The requested profile is not supported
	GlErrorUnsupportedProfileValue GLError = 2
	// The shader compilation failed
	GlErrorCompilationFailedValue GLError = 3
	// The shader linking failed
	GlErrorLinkFailedValue GLError = 4
)

// Defines the reference point of a surface and is used in `GdkPopupLayout`.
type Gravity int

var xGravityGLibType func() types.GType

func GravityGLibType() types.GType {
	return xGravityGLibType()
}

const (

	// the reference point is at the top left corner.
	GravityNorthWestValue Gravity = 1
	// the reference point is in the middle of the top edge.
	GravityNorthValue Gravity = 2
	// the reference point is at the top right corner.
	GravityNorthEastValue Gravity = 3
	// the reference point is at the middle of the left edge.
	GravityWestValue Gravity = 4
	// the reference point is at the center of the surface.
	GravityCenterValue Gravity = 5
	// the reference point is at the middle of the right edge.
	GravityEastValue Gravity = 6
	// the reference point is at the lower left corner.
	GravitySouthWestValue Gravity = 7
	// the reference point is at the middle of the lower edge.
	GravitySouthValue Gravity = 8
	// the reference point is at the lower right corner.
	GravitySouthEastValue Gravity = 9
	// the reference point is at the top left corner of the
	//  surface itself, ignoring window manager decorations.
	GravityStaticValue Gravity = 10
)

// `GdkMemoryFormat` describes formats that image data can have in memory.
//
// It describes formats by listing the contents of the memory passed to it.
// So GDK_MEMORY_A8R8G8B8 will be 1 byte (8 bits) of alpha, followed by a
// byte each of red, green and blue. It is not endian-dependent, so
// CAIRO_FORMAT_ARGB32 is represented by different `GdkMemoryFormats`
// on architectures with different endiannesses.
//
// Its naming is modelled after
// [VkFormat](https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#VkFormat)
// for details).
type MemoryFormat int

var xMemoryFormatGLibType func() types.GType

func MemoryFormatGLibType() types.GType {
	return xMemoryFormatGLibType()
}

const (

	// 4 bytes; for blue, green, red, alpha.
	//   The color values are premultiplied with the alpha value.
	MemoryB8g8r8a8PremultipliedValue MemoryFormat = 0
	// 4 bytes; for alpha, red, green, blue.
	//   The color values are premultiplied with the alpha value.
	MemoryA8r8g8b8PremultipliedValue MemoryFormat = 1
	// 4 bytes; for red, green, blue, alpha
	//   The color values are premultiplied with the alpha value.
	MemoryR8g8b8a8PremultipliedValue MemoryFormat = 2
	// 4 bytes; for blue, green, red, alpha.
	MemoryB8g8r8a8Value MemoryFormat = 3
	// 4 bytes; for alpha, red, green, blue.
	MemoryA8r8g8b8Value MemoryFormat = 4
	// 4 bytes; for red, green, blue, alpha.
	MemoryR8g8b8a8Value MemoryFormat = 5
	// 4 bytes; for alpha, blue, green, red.
	MemoryA8b8g8r8Value MemoryFormat = 6
	// 3 bytes; for red, green, blue. The data is opaque.
	MemoryR8g8b8Value MemoryFormat = 7
	// 3 bytes; for blue, green, red. The data is opaque.
	MemoryB8g8r8Value MemoryFormat = 8
	// 3 guint16 values; for red, green, blue. Since: 4.6
	MemoryR16g16b16Value MemoryFormat = 9
	// 4 guint16 values; for red, green,
	//   blue, alpha. The color values are premultiplied with the alpha value.
	//  Since: 4.6
	MemoryR16g16b16a16PremultipliedValue MemoryFormat = 10
	// 4 guint16 values; for red, green, blue, alpha.
	//  Since: 4.6
	MemoryR16g16b16a16Value MemoryFormat = 11
	// 3 half-float values; for red, green, blue.
	//   The data is opaque. Since: 4.6
	MemoryR16g16b16FloatValue MemoryFormat = 12
	// 4 half-float values; for
	//   red, green, blue and alpha. The color values are premultiplied with
	//   the alpha value. Since: 4.6
	MemoryR16g16b16a16FloatPremultipliedValue MemoryFormat = 13
	// 4 half-float values; for red, green,
	//   blue and alpha. Since: 4.6
	MemoryR16g16b16a16FloatValue MemoryFormat = 14

	MemoryR32g32b32FloatValue MemoryFormat = 15
	// 4 float values; for
	//   red, green, blue and alpha. The color values are premultiplied with
	//   the alpha value. Since: 4.6
	MemoryR32g32b32a32FloatPremultipliedValue MemoryFormat = 16
	// 4 float values; for red, green, blue and
	//   alpha. Since: 4.6
	MemoryR32g32b32a32FloatValue MemoryFormat = 17
	// The number of formats. This value will change as
	//   more formats get added, so do not rely on its concrete integer.
	MemoryNFormatsValue MemoryFormat = 18
)

// Error enumeration for `GdkVulkanContext`.
type VulkanError int

var xVulkanErrorGLibType func() types.GType

func VulkanErrorGLibType() types.GType {
	return xVulkanErrorGLibType()
}

const (

	// Vulkan is not supported on this backend or has not been
	//   compiled in.
	VulkanErrorUnsupportedValue VulkanError = 0
	// Vulkan support is not available on this Surface
	VulkanErrorNotAvailableValue VulkanError = 1
)
