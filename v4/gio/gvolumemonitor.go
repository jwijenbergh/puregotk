// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type VolumeMonitorClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *VolumeMonitorClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

const (
	// Extension point for volume monitor functionality.
	// See [Extending GIO][extending-gio].
	VOLUME_MONITOR_EXTENSION_POINT_NAME string = "gio-volume-monitor"
)

// #GVolumeMonitor is for listing the user interesting devices and volumes
// on the computer. In other words, what a file selector or file manager
// would show in a sidebar.
//
// #GVolumeMonitor is not
// [thread-default-context aware][g-main-context-push-thread-default],
// and so should not be used other than from the main thread, with no
// thread-default-context active.
//
// In order to receive updates about volumes and mounts monitored through GVFS,
// a main loop must be running.
type VolumeMonitor struct {
	gobject.Object
}

var xVolumeMonitorGLibType func() types.GType

func VolumeMonitorGLibType() types.GType {
	return xVolumeMonitorGLibType()
}

func VolumeMonitorNewFromInternalPtr(ptr uintptr) *VolumeMonitor {
	cls := &VolumeMonitor{}
	cls.Ptr = ptr
	return cls
}

var xVolumeMonitorGetConnectedDrives func(uintptr) *glib.List

// Gets a list of drives connected to the system.
//
// The returned list should be freed with g_list_free(), after
// its elements have been unreffed with g_object_unref().
func (x *VolumeMonitor) GetConnectedDrives() *glib.List {

	cret := xVolumeMonitorGetConnectedDrives(x.GoPointer())
	return cret
}

var xVolumeMonitorGetMountForUuid func(uintptr, string) uintptr

// Finds a #GMount object by its UUID (see g_mount_get_uuid())
func (x *VolumeMonitor) GetMountForUuid(UuidVar string) *MountBase {
	var cls *MountBase

	cret := xVolumeMonitorGetMountForUuid(x.GoPointer(), UuidVar)

	if cret == 0 {
		return nil
	}
	cls = &MountBase{}
	cls.Ptr = cret
	return cls
}

var xVolumeMonitorGetMounts func(uintptr) *glib.List

// Gets a list of the mounts on the system.
//
// The returned list should be freed with g_list_free(), after
// its elements have been unreffed with g_object_unref().
func (x *VolumeMonitor) GetMounts() *glib.List {

	cret := xVolumeMonitorGetMounts(x.GoPointer())
	return cret
}

var xVolumeMonitorGetVolumeForUuid func(uintptr, string) uintptr

// Finds a #GVolume object by its UUID (see g_volume_get_uuid())
func (x *VolumeMonitor) GetVolumeForUuid(UuidVar string) *VolumeBase {
	var cls *VolumeBase

	cret := xVolumeMonitorGetVolumeForUuid(x.GoPointer(), UuidVar)

	if cret == 0 {
		return nil
	}
	cls = &VolumeBase{}
	cls.Ptr = cret
	return cls
}

var xVolumeMonitorGetVolumes func(uintptr) *glib.List

// Gets a list of the volumes on the system.
//
// The returned list should be freed with g_list_free(), after
// its elements have been unreffed with g_object_unref().
func (x *VolumeMonitor) GetVolumes() *glib.List {

	cret := xVolumeMonitorGetVolumes(x.GoPointer())
	return cret
}

func (c *VolumeMonitor) GoPointer() uintptr {
	return c.Ptr
}

func (c *VolumeMonitor) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted when a drive changes.
func (x *VolumeMonitor) ConnectDriveChanged(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "drive-changed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, DriveVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, DriveVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "drive-changed", cbRefPtr)
}

// Emitted when a drive is connected to the system.
func (x *VolumeMonitor) ConnectDriveConnected(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "drive-connected", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, DriveVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, DriveVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "drive-connected", cbRefPtr)
}

// Emitted when a drive is disconnected from the system.
func (x *VolumeMonitor) ConnectDriveDisconnected(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "drive-disconnected", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, DriveVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, DriveVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "drive-disconnected", cbRefPtr)
}

// Emitted when the eject button is pressed on @drive.
func (x *VolumeMonitor) ConnectDriveEjectButton(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "drive-eject-button", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, DriveVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, DriveVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "drive-eject-button", cbRefPtr)
}

// Emitted when the stop button is pressed on @drive.
func (x *VolumeMonitor) ConnectDriveStopButton(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "drive-stop-button", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, DriveVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, DriveVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "drive-stop-button", cbRefPtr)
}

// Emitted when a mount is added.
func (x *VolumeMonitor) ConnectMountAdded(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "mount-added", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, MountVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, MountVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "mount-added", cbRefPtr)
}

// Emitted when a mount changes.
func (x *VolumeMonitor) ConnectMountChanged(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "mount-changed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, MountVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, MountVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "mount-changed", cbRefPtr)
}

// May be emitted when a mount is about to be removed.
//
// This signal depends on the backend and is only emitted if
// GIO was used to unmount.
func (x *VolumeMonitor) ConnectMountPreUnmount(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "mount-pre-unmount", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, MountVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, MountVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "mount-pre-unmount", cbRefPtr)
}

// Emitted when a mount is removed.
func (x *VolumeMonitor) ConnectMountRemoved(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "mount-removed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, MountVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, MountVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "mount-removed", cbRefPtr)
}

// Emitted when a mountable volume is added to the system.
func (x *VolumeMonitor) ConnectVolumeAdded(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "volume-added", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, VolumeVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, VolumeVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "volume-added", cbRefPtr)
}

// Emitted when mountable volume is changed.
func (x *VolumeMonitor) ConnectVolumeChanged(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "volume-changed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, VolumeVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, VolumeVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "volume-changed", cbRefPtr)
}

// Emitted when a mountable volume is removed from the system.
func (x *VolumeMonitor) ConnectVolumeRemoved(cb *func(VolumeMonitor, uintptr)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "volume-removed", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, VolumeVarp uintptr) {
		fa := VolumeMonitor{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, VolumeVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "volume-removed", cbRefPtr)
}

var xVolumeMonitorAdoptOrphanMount func(uintptr) uintptr

// This function should be called by any #GVolumeMonitor
// implementation when a new #GMount object is created that is not
// associated with a #GVolume object. It must be called just before
// emitting the @mount_added signal.
//
// If the return value is not %NULL, the caller must associate the
// returned #GVolume object with the #GMount. This involves returning
// it in its g_mount_get_volume() implementation. The caller must
// also listen for the "removed" signal on the returned object
// and give up its reference when handling that signal
//
// Similarly, if implementing g_volume_monitor_adopt_orphan_mount(),
// the implementor must take a reference to @mount and return it in
// its g_volume_get_mount() implemented. Also, the implementor must
// listen for the "unmounted" signal on @mount and give up its
// reference upon handling that signal.
//
// There are two main use cases for this function.
//
// One is when implementing a user space file system driver that reads
// blocks of a block device that is already represented by the native
// volume monitor (for example a CD Audio file system driver). Such
// a driver will generate its own #GMount object that needs to be
// associated with the #GVolume object that represents the volume.
//
// The other is for implementing a #GVolumeMonitor whose sole purpose
// is to return #GVolume objects representing entries in the users
// "favorite servers" list or similar.
func VolumeMonitorAdoptOrphanMount(MountVar Mount) *VolumeBase {
	var cls *VolumeBase

	cret := xVolumeMonitorAdoptOrphanMount(MountVar.GoPointer())

	if cret == 0 {
		return nil
	}
	cls = &VolumeBase{}
	cls.Ptr = cret
	return cls
}

var xVolumeMonitorGet func() uintptr

// Gets the volume monitor used by gio.
func VolumeMonitorGet() *VolumeMonitor {
	var cls *VolumeMonitor

	cret := xVolumeMonitorGet()

	if cret == 0 {
		return nil
	}
	cls = &VolumeMonitor{}
	cls.Ptr = cret
	return cls
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xVolumeMonitorGLibType, lib, "g_volume_monitor_get_type")

	core.PuregoSafeRegister(&xVolumeMonitorGetConnectedDrives, lib, "g_volume_monitor_get_connected_drives")
	core.PuregoSafeRegister(&xVolumeMonitorGetMountForUuid, lib, "g_volume_monitor_get_mount_for_uuid")
	core.PuregoSafeRegister(&xVolumeMonitorGetMounts, lib, "g_volume_monitor_get_mounts")
	core.PuregoSafeRegister(&xVolumeMonitorGetVolumeForUuid, lib, "g_volume_monitor_get_volume_for_uuid")
	core.PuregoSafeRegister(&xVolumeMonitorGetVolumes, lib, "g_volume_monitor_get_volumes")

	core.PuregoSafeRegister(&xVolumeMonitorAdoptOrphanMount, lib, "g_volume_monitor_adopt_orphan_mount")
	core.PuregoSafeRegister(&xVolumeMonitorGet, lib, "g_volume_monitor_get")

}
