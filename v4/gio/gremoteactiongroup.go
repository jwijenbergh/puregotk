// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// The virtual function table for #GRemoteActionGroup.
type RemoteActionGroupInterface struct {
	GIface uintptr
}

func (x *RemoteActionGroupInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// The GRemoteActionGroup interface is implemented by #GActionGroup
// instances that either transmit action invocations to other processes
// or receive action invocations in the local process from other
// processes.
//
// The interface has `_full` variants of the two
// methods on #GActionGroup used to activate actions:
// g_action_group_activate_action() and
// g_action_group_change_action_state(). These variants allow a
// "platform data" #GVariant to be specified: a dictionary providing
// context for the action invocation (for example: timestamps, startup
// notification IDs, etc).
//
// #GDBusActionGroup implements #GRemoteActionGroup.  This provides a
// mechanism to send platform data for action invocations over D-Bus.
//
// Additionally, g_dbus_connection_export_action_group() will check if
// the exported #GActionGroup implements #GRemoteActionGroup and use the
// `_full` variants of the calls if available.  This
// provides a mechanism by which to receive platform data for action
// invocations that arrive by way of D-Bus.
type RemoteActionGroup interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	ActivateActionFull(ActionNameVar string, ParameterVar *glib.Variant, PlatformDataVar *glib.Variant)
	ChangeActionStateFull(ActionNameVar string, ValueVar *glib.Variant, PlatformDataVar *glib.Variant)
}

var xRemoteActionGroupGLibType func() types.GType

func RemoteActionGroupGLibType() types.GType {
	return xRemoteActionGroupGLibType()
}

type RemoteActionGroupBase struct {
	Ptr uintptr
}

func (x *RemoteActionGroupBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *RemoteActionGroupBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Activates the remote action.
//
// This is the same as g_action_group_activate_action() except that it
// allows for provision of "platform data" to be sent along with the
// activation request.  This typically contains details such as the user
// interaction timestamp or startup notification information.
//
// @platform_data must be non-%NULL and must have the type
// %G_VARIANT_TYPE_VARDICT.  If it is floating, it will be consumed.
func (x *RemoteActionGroupBase) ActivateActionFull(ActionNameVar string, ParameterVar *glib.Variant, PlatformDataVar *glib.Variant) {

	XGRemoteActionGroupActivateActionFull(x.GoPointer(), ActionNameVar, ParameterVar, PlatformDataVar)

}

// Changes the state of a remote action.
//
// This is the same as g_action_group_change_action_state() except that
// it allows for provision of "platform data" to be sent along with the
// state change request.  This typically contains details such as the
// user interaction timestamp or startup notification information.
//
// @platform_data must be non-%NULL and must have the type
// %G_VARIANT_TYPE_VARDICT.  If it is floating, it will be consumed.
func (x *RemoteActionGroupBase) ChangeActionStateFull(ActionNameVar string, ValueVar *glib.Variant, PlatformDataVar *glib.Variant) {

	XGRemoteActionGroupChangeActionStateFull(x.GoPointer(), ActionNameVar, ValueVar, PlatformDataVar)

}

var XGRemoteActionGroupActivateActionFull func(uintptr, string, *glib.Variant, *glib.Variant)
var XGRemoteActionGroupChangeActionStateFull func(uintptr, string, *glib.Variant, *glib.Variant)

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xRemoteActionGroupGLibType, lib, "g_remote_action_group_get_type")

	core.PuregoSafeRegister(&XGRemoteActionGroupActivateActionFull, lib, "g_remote_action_group_activate_action_full")
	core.PuregoSafeRegister(&XGRemoteActionGroupChangeActionStateFull, lib, "g_remote_action_group_change_action_state_full")

}
