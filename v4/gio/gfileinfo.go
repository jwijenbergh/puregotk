// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type FileInfoClass struct {
	_ structs.HostLayout
}

func (x *FileInfoClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

const (
	// A key in the "access" namespace for checking deletion privileges.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	//
	// This attribute will be %TRUE if the user is able to delete the file.
	FILE_ATTRIBUTE_ACCESS_CAN_DELETE string = "access::can-delete"
	// A key in the "access" namespace for getting execution privileges.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	//
	// This attribute will be %TRUE if the user is able to execute the file.
	FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE string = "access::can-execute"
	// A key in the "access" namespace for getting read privileges.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	//
	// This attribute will be %TRUE if the user is able to read the file.
	FILE_ATTRIBUTE_ACCESS_CAN_READ string = "access::can-read"
	// A key in the "access" namespace for checking renaming privileges.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	//
	// This attribute will be %TRUE if the user is able to rename the file.
	FILE_ATTRIBUTE_ACCESS_CAN_RENAME string = "access::can-rename"
	// A key in the "access" namespace for checking trashing privileges.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	//
	// This attribute will be %TRUE if the user is able to move the file to
	// the trash.
	FILE_ATTRIBUTE_ACCESS_CAN_TRASH string = "access::can-trash"
	// A key in the "access" namespace for getting write privileges.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	//
	// This attribute will be %TRUE if the user is able to write to the file.
	FILE_ATTRIBUTE_ACCESS_CAN_WRITE string = "access::can-write"
	// A key in the "dos" namespace for checking if the file's archive flag
	// is set.
	//
	// This attribute is %TRUE if the archive flag is set.
	//
	// This attribute is only available for DOS file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_DOS_IS_ARCHIVE string = "dos::is-archive"
	// A key in the "dos" namespace for checking if the file is a NTFS mount point
	// (a volume mount or a junction point).
	//
	// This attribute is %TRUE if file is a reparse point of type
	// [IO_REPARSE_TAG_MOUNT_POINT](https://msdn.microsoft.com/en-us/library/dd541667.aspx).
	//
	// This attribute is only available for DOS file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT string = "dos::is-mountpoint"
	// A key in the "dos" namespace for checking if the file's backup flag
	// is set.
	//
	// This attribute is %TRUE if the backup flag is set.
	//
	// This attribute is only available for DOS file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_DOS_IS_SYSTEM string = "dos::is-system"
	// A key in the "dos" namespace for getting the file NTFS reparse tag.
	//
	// This value is 0 for files that are not reparse points.
	//
	// See the [Reparse Tags](https://msdn.microsoft.com/en-us/library/dd541667.aspx)
	// page for possible reparse tag values.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG string = "dos::reparse-point-tag"
	// A key in the "etag" namespace for getting the value of the file's
	// entity tag.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_ETAG_VALUE string = "etag::value"
	// A key in the "filesystem" namespace for getting the number of bytes
	// of free space left on the file system.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
	FILE_ATTRIBUTE_FILESYSTEM_FREE string = "filesystem::free"
	// A key in the "filesystem" namespace for checking if the file system
	// is read only.
	//
	// Is set to %TRUE if the file system is read only.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_FILESYSTEM_READONLY string = "filesystem::readonly"
	// A key in the "filesystem" namespace for checking if the file system
	// is remote.
	//
	// Is set to %TRUE if the file system is remote.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_FILESYSTEM_REMOTE string = "filesystem::remote"
	// A key in the "filesystem" namespace for getting the total size (in
	// bytes) of the file system, used in g_file_query_filesystem_info().
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
	FILE_ATTRIBUTE_FILESYSTEM_SIZE string = "filesystem::size"
	// A key in the "filesystem" namespace for getting the file system's type.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_FILESYSTEM_TYPE string = "filesystem::type"
	// A key in the "filesystem" namespace for getting the number of bytes
	// used by data on the file system.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
	FILE_ATTRIBUTE_FILESYSTEM_USED string = "filesystem::used"
	// A key in the "filesystem" namespace for hinting a file manager
	// application whether it should preview (e.g. thumbnail) files on the
	// file system.
	//
	// The value for this key contain a #GFilesystemPreviewType.
	FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW string = "filesystem::use-preview"
	// A key in the "gvfs" namespace that gets the name of the current
	// GVFS backend in use.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_GVFS_BACKEND string = "gvfs::backend"
	// A key in the "id" namespace for getting a file identifier.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	//
	// An example use would be during listing files, to avoid recursive
	// directory scanning.
	FILE_ATTRIBUTE_ID_FILE string = "id::file"
	// A key in the "id" namespace for getting the file system identifier.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	//
	// An example use would be during drag and drop to see if the source
	// and target are on the same filesystem (default to move) or not (default
	// to copy).
	FILE_ATTRIBUTE_ID_FILESYSTEM string = "id::filesystem"
	// A key in the "mountable" namespace for checking if a file (of
	// type G_FILE_TYPE_MOUNTABLE) can be ejected.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT string = "mountable::can-eject"
	// A key in the "mountable" namespace for checking if a file (of
	// type G_FILE_TYPE_MOUNTABLE) is mountable.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT string = "mountable::can-mount"
	// A key in the "mountable" namespace for checking if a file (of
	// type G_FILE_TYPE_MOUNTABLE) can be polled.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL string = "mountable::can-poll"
	// A key in the "mountable" namespace for checking if a file (of
	// type G_FILE_TYPE_MOUNTABLE) can be started.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_MOUNTABLE_CAN_START string = "mountable::can-start"
	// A key in the "mountable" namespace for checking if a file (of
	// type G_FILE_TYPE_MOUNTABLE) can be started degraded.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED string = "mountable::can-start-degraded"
	// A key in the "mountable" namespace for checking if a file (of
	// type G_FILE_TYPE_MOUNTABLE) can be stopped.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP string = "mountable::can-stop"
	// A key in the "mountable" namespace for checking if a file (of
	// type G_FILE_TYPE_MOUNTABLE)  is unmountable.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT string = "mountable::can-unmount"
	// A key in the "mountable" namespace for getting the HAL UDI for the mountable
	// file.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI string = "mountable::hal-udi"
	// A key in the "mountable" namespace for checking if a file (of
	// type G_FILE_TYPE_MOUNTABLE) is automatically polled for media.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC string = "mountable::is-media-check-automatic"
	// A key in the "mountable" namespace for getting the #GDriveStartStopType.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE string = "mountable::start-stop-type"
	// A key in the "mountable" namespace for getting the unix device.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE string = "mountable::unix-device"
	// A key in the "mountable" namespace for getting the unix device file.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE string = "mountable::unix-device-file"
	// A key in the "owner" namespace for getting the file owner's group.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_OWNER_GROUP string = "owner::group"
	// A key in the "owner" namespace for getting the user name of the
	// file's owner.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_OWNER_USER string = "owner::user"
	// A key in the "owner" namespace for getting the real name of the
	// user that owns the file.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_OWNER_USER_REAL string = "owner::user-real"
	// A key in the "preview" namespace for getting a #GIcon that can be
	// used to get preview of the file.
	//
	// For example, it may be a low resolution thumbnail without metadata.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.
	//
	// The value for this key should contain a #GIcon.
	FILE_ATTRIBUTE_PREVIEW_ICON string = "preview::icon"
	// A key in the "recent" namespace for getting time, when the metadata for the
	// file in `recent:///` was last changed.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_INT64.
	FILE_ATTRIBUTE_RECENT_MODIFIED string = "recent::modified"
	// A key in the "selinux" namespace for getting the file's SELinux
	// context.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	//
	// Note that this attribute is only available if GLib has been built
	// with SELinux support.
	FILE_ATTRIBUTE_SELINUX_CONTEXT string = "selinux::context"
	// A key in the "standard" namespace for getting the amount of disk space
	// that is consumed by the file (in bytes).
	//
	// This will generally be larger than the file size (due to block size
	// overhead) but can occasionally be smaller (for example, for sparse files).
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
	FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE string = "standard::allocated-size"
	// A key in the "standard" namespace for getting the content type of the file.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	//
	// The value for this key should contain a valid content type.
	FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE string = "standard::content-type"
	// A key in the "standard" namespace for getting the copy name of the file.
	//
	// The copy name is an optional version of the name. If available it's always
	// in UTF8, and corresponds directly to the original filename (only transcoded to
	// UTF8). This is useful if you want to copy the file to another filesystem that
	// might have a different encoding. If the filename is not a valid string in the
	// encoding selected for the filesystem it is in then the copy name will not be set.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_STANDARD_COPY_NAME string = "standard::copy-name"
	// A key in the "standard" namespace for getting the description of the file.
	//
	// The description is a utf8 string that describes the file, generally containing
	// the filename, but can also contain further information. Example descriptions
	// could be "filename (on hostname)" for a remote file or "filename (in trash)"
	// for a file in the trash. This is useful for instance as the window title
	// when displaying a directory or for a bookmarks menu.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_STANDARD_DESCRIPTION string = "standard::description"
	// A key in the "standard" namespace for getting the display name of the file.
	//
	// A display name is guaranteed to be in UTF-8 and can thus be displayed in
	// the UI. It is guaranteed to be set on every file.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME string = "standard::display-name"
	// A key in the "standard" namespace for edit name of the file.
	//
	// An edit name is similar to the display name, but it is meant to be
	// used when you want to rename the file in the UI. The display name
	// might contain information you don't want in the new filename (such as
	// "(invalid unicode)" if the filename was in an invalid encoding).
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_STANDARD_EDIT_NAME string = "standard::edit-name"
	// A key in the "standard" namespace for getting the fast content type.
	//
	// The fast content type isn't as reliable as the regular one, as it
	// only uses the filename to guess it, but it is faster to calculate than the
	// regular content type.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE string = "standard::fast-content-type"
	// A key in the "standard" namespace for getting the icon for the file.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.
	//
	// The value for this key should contain a #GIcon.
	FILE_ATTRIBUTE_STANDARD_ICON string = "standard::icon"
	// A key in the "standard" namespace for checking if a file is a backup file.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_STANDARD_IS_BACKUP string = "standard::is-backup"
	// A key in the "standard" namespace for checking if a file is hidden.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_STANDARD_IS_HIDDEN string = "standard::is-hidden"
	// A key in the "standard" namespace for checking if the file is a symlink.
	// Typically the actual type is something else, if we followed the symlink
	// to get the type.
	//
	// On Windows NTFS mountpoints are considered to be symlinks as well.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_STANDARD_IS_SYMLINK string = "standard::is-symlink"
	// A key in the "standard" namespace for checking if a file is virtual.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL string = "standard::is-virtual"
	// A key in the "standard" namespace for checking if a file is
	// volatile. This is meant for opaque, non-POSIX-like backends to
	// indicate that the URI is not persistent. Applications should look
	// at %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET for the persistent URI.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_STANDARD_IS_VOLATILE string = "standard::is-volatile"
	// A key in the "standard" namespace for getting the name of the file.
	//
	// The name is the on-disk filename which may not be in any known encoding,
	// and can thus not be generally displayed as is. It is guaranteed to be set on
	// every file.
	//
	// Use %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME if you need to display the
	// name in a user interface.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
	FILE_ATTRIBUTE_STANDARD_NAME string = "standard::name"
	// A key in the "standard" namespace for getting the file's size (in bytes).
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
	FILE_ATTRIBUTE_STANDARD_SIZE string = "standard::size"
	// A key in the "standard" namespace for setting the sort order of a file.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_INT32.
	//
	// An example use would be in file managers, which would use this key
	// to set the order files are displayed. Files with smaller sort order
	// should be sorted first, and files without sort order as if sort order
	// was zero.
	FILE_ATTRIBUTE_STANDARD_SORT_ORDER string = "standard::sort-order"
	// A key in the "standard" namespace for getting the symbolic icon for the file.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_OBJECT.
	//
	// The value for this key should contain a #GIcon.
	FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON string = "standard::symbolic-icon"
	// A key in the "standard" namespace for getting the symlink target, if the file
	// is a symlink.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
	FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET string = "standard::symlink-target"
	// A key in the "standard" namespace for getting the target URI for the file, in
	// the case of %G_FILE_TYPE_SHORTCUT or %G_FILE_TYPE_MOUNTABLE files.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_STANDARD_TARGET_URI string = "standard::target-uri"
	// A key in the "standard" namespace for storing file types.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	//
	// The value for this key should contain a #GFileType.
	FILE_ATTRIBUTE_STANDARD_TYPE string = "standard::type"
	// A key in the "thumbnail" namespace for checking if thumbnailing failed.
	//
	// This attribute is %TRUE if thumbnailing failed.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_THUMBNAILING_FAILED string = "thumbnail::failed"
	// A key in the "thumbnail" namespace for checking whether the thumbnail is outdated.
	//
	// This attribute is %TRUE if the thumbnail is up-to-date with the file it represents,
	// and %FALSE if the file has been modified since the thumbnail was generated.
	//
	// If %G_FILE_ATTRIBUTE_THUMBNAILING_FAILED is %TRUE and this attribute is %FALSE,
	// it indicates that thumbnailing may be attempted again and may succeed.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_THUMBNAIL_IS_VALID string = "thumbnail::is-valid"
	// A key in the "thumbnail" namespace for getting the path to the thumbnail
	// image.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
	FILE_ATTRIBUTE_THUMBNAIL_PATH string = "thumbnail::path"
	// A key in the "time" namespace for getting the time the file was last
	// accessed.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64, and
	// contains the time since the file was last accessed, in seconds since the
	// UNIX epoch.
	FILE_ATTRIBUTE_TIME_ACCESS string = "time::access"
	// A key in the "time" namespace for getting the microseconds of the time
	// the file was last accessed.
	//
	// This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_ACCESS.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_TIME_ACCESS_USEC string = "time::access-usec"
	// A key in the "time" namespace for getting the time the file was last
	// changed.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64,
	// and contains the time since the file was last changed, in seconds since
	// the UNIX epoch.
	//
	// This corresponds to the traditional UNIX ctime.
	FILE_ATTRIBUTE_TIME_CHANGED string = "time::changed"
	// A key in the "time" namespace for getting the microseconds of the time
	// the file was last changed.
	//
	// This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_CHANGED.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_TIME_CHANGED_USEC string = "time::changed-usec"
	// A key in the "time" namespace for getting the time the file was created.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64,
	// and contains the time since the file was created, in seconds since the UNIX
	// epoch.
	//
	// This may correspond to Linux `stx_btime`, FreeBSD `st_birthtim`, NetBSD
	// `st_birthtime` or NTFS `ctime`.
	FILE_ATTRIBUTE_TIME_CREATED string = "time::created"
	// A key in the "time" namespace for getting the microseconds of the time
	// the file was created.
	//
	// This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_CREATED.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_TIME_CREATED_USEC string = "time::created-usec"
	// A key in the "time" namespace for getting the time the file was last
	// modified.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64, and
	// contains the time since the file was modified, in seconds since the UNIX
	// epoch.
	FILE_ATTRIBUTE_TIME_MODIFIED string = "time::modified"
	// A key in the "time" namespace for getting the microseconds of the time
	// the file was last modified.
	//
	// This should be used in conjunction with %G_FILE_ATTRIBUTE_TIME_MODIFIED.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_TIME_MODIFIED_USEC string = "time::modified-usec"
	// A key in the "trash" namespace for getting the deletion date and time
	// of a file inside the `trash:///` folder.
	//
	// The format of the returned string is `YYYY-MM-DDThh:mm:ss`.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_STRING.
	FILE_ATTRIBUTE_TRASH_DELETION_DATE string = "trash::deletion-date"
	// A key in the "trash" namespace for getting the number of (toplevel) items
	// that are present in the `trash:///` folder.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_TRASH_ITEM_COUNT string = "trash::item-count"
	// A key in the "trash" namespace for getting the original path of a file
	// inside the `trash:///` folder before it was trashed.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
	FILE_ATTRIBUTE_TRASH_ORIG_PATH string = "trash::orig-path"
	// A key in the "unix" namespace for getting the number of blocks allocated
	// for the file.
	//
	// This attribute is only available for UNIX file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
	FILE_ATTRIBUTE_UNIX_BLOCKS string = "unix::blocks"
	// A key in the "unix" namespace for getting the block size for the file
	// system.
	//
	// This attribute is only available for UNIX file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_UNIX_BLOCK_SIZE string = "unix::block-size"
	// A key in the "unix" namespace for getting the device id of the device the
	// file is located on (see stat() documentation).
	//
	// This attribute is only available for UNIX file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_UNIX_DEVICE string = "unix::device"
	// A key in the "unix" namespace for getting the group ID for the file.
	//
	// This attribute is only available for UNIX file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_UNIX_GID string = "unix::gid"
	// A key in the "unix" namespace for getting the inode of the file.
	//
	// This attribute is only available for UNIX file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT64.
	FILE_ATTRIBUTE_UNIX_INODE string = "unix::inode"
	// A key in the "unix" namespace for checking if the file represents a
	// UNIX mount point.
	//
	// This attribute is %TRUE if the file is a UNIX mount point.
	//
	// Since 2.58, `/` is considered to be a mount point.
	//
	// This attribute is only available for UNIX file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
	FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT string = "unix::is-mountpoint"
	// A key in the "unix" namespace for getting the mode of the file
	// (e.g. whether the file is a regular file, symlink, etc).
	//
	// See the documentation for `lstat()`: this attribute is equivalent to
	// the `st_mode` member of `struct stat`, and includes both the file type
	// and permissions.
	//
	// This attribute is only available for UNIX file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_UNIX_MODE string = "unix::mode"
	// A key in the "unix" namespace for getting the number of hard links
	// for a file.
	//
	// See the documentation for `lstat()`.
	//
	// This attribute is only available for UNIX file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_UNIX_NLINK string = "unix::nlink"
	// A key in the "unix" namespace for getting the device ID for the file
	// (if it is a special file).
	//
	// See the documentation for `lstat()`.
	//
	// This attribute is only available for UNIX file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_UNIX_RDEV string = "unix::rdev"
	// A key in the "unix" namespace for getting the user ID for the file.
	//
	// This attribute is only available for UNIX file systems.
	//
	// Corresponding #GFileAttributeType is %G_FILE_ATTRIBUTE_TYPE_UINT32.
	FILE_ATTRIBUTE_UNIX_UID string = "unix::uid"
)

// Functionality for manipulating basic metadata for files. #GFileInfo
// implements methods for getting information that all files should
// contain, and allows for manipulation of extended attributes.
//
// See [GFileAttribute][gio-GFileAttribute] for more information on how
// GIO handles file attributes.
//
// To obtain a #GFileInfo for a #GFile, use g_file_query_info() (or its
// async variant). To obtain a #GFileInfo for a file input or output
// stream, use g_file_input_stream_query_info() or
// g_file_output_stream_query_info() (or their async variants).
//
// To change the actual attributes of a file, you should then set the
// attribute in the #GFileInfo and call g_file_set_attributes_from_info()
// or g_file_set_attributes_async() on a GFile.
//
// However, not all attributes can be changed in the file. For instance,
// the actual size of a file cannot be changed via g_file_info_set_size().
// You may call g_file_query_settable_attributes() and
// g_file_query_writable_namespaces() to discover the settable attributes
// of a particular file at runtime.
//
// The direct accessors, such as g_file_info_get_name(), are slightly more
// optimized than the generic attribute accessors, such as
// g_file_info_get_attribute_byte_string().This optimization will matter
// only if calling the API in a tight loop.
//
// #GFileAttributeMatcher allows for searching through a #GFileInfo for
// attributes.
type FileInfo struct {
	gobject.Object
}

var xFileInfoGLibType func() types.GType

func FileInfoGLibType() types.GType {
	return xFileInfoGLibType()
}

func FileInfoNewFromInternalPtr(ptr uintptr) *FileInfo {
	cls := &FileInfo{}
	cls.Ptr = ptr
	return cls
}

var xNewFileInfo func() uintptr

// Creates a new file info structure.
func NewFileInfo() *FileInfo {
	var cls *FileInfo

	cret := xNewFileInfo()

	if cret == 0 {
		return nil
	}
	cls = &FileInfo{}
	cls.Ptr = cret
	return cls
}

var xFileInfoClearStatus func(uintptr)

// Clears the status information from @info.
func (x *FileInfo) ClearStatus() {

	xFileInfoClearStatus(x.GoPointer())

}

var xFileInfoCopyInto func(uintptr, uintptr)

// First clears all of the [GFileAttribute][gio-GFileAttribute] of @dest_info,
// and then copies all of the file attributes from @src_info to @dest_info.
func (x *FileInfo) CopyInto(DestInfoVar *FileInfo) {

	xFileInfoCopyInto(x.GoPointer(), DestInfoVar.GoPointer())

}

var xFileInfoDup func(uintptr) uintptr

// Duplicates a file info structure.
func (x *FileInfo) Dup() *FileInfo {
	var cls *FileInfo

	cret := xFileInfoDup(x.GoPointer())

	if cret == 0 {
		return nil
	}
	cls = &FileInfo{}
	cls.Ptr = cret
	return cls
}

var xFileInfoGetAccessDateTime func(uintptr) *glib.DateTime

// Gets the access time of the current @info and returns it as a
// #GDateTime.
//
// This requires the %G_FILE_ATTRIBUTE_TIME_ACCESS attribute. If
// %G_FILE_ATTRIBUTE_TIME_ACCESS_USEC is provided, the resulting #GDateTime
// will have microsecond precision.
func (x *FileInfo) GetAccessDateTime() *glib.DateTime {

	cret := xFileInfoGetAccessDateTime(x.GoPointer())
	return cret
}

var xFileInfoGetAttributeAsString func(uintptr, string) string

// Gets the value of a attribute, formatted as a string.
// This escapes things as needed to make the string valid
// UTF-8.
func (x *FileInfo) GetAttributeAsString(AttributeVar string) string {

	cret := xFileInfoGetAttributeAsString(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetAttributeBoolean func(uintptr, string) bool

// Gets the value of a boolean attribute. If the attribute does not
// contain a boolean value, %FALSE will be returned.
func (x *FileInfo) GetAttributeBoolean(AttributeVar string) bool {

	cret := xFileInfoGetAttributeBoolean(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetAttributeByteString func(uintptr, string) string

// Gets the value of a byte string attribute. If the attribute does
// not contain a byte string, %NULL will be returned.
func (x *FileInfo) GetAttributeByteString(AttributeVar string) string {

	cret := xFileInfoGetAttributeByteString(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetAttributeData func(uintptr, string, *FileAttributeType, uintptr, *FileAttributeStatus) bool

// Gets the attribute type, value and status for an attribute key.
func (x *FileInfo) GetAttributeData(AttributeVar string, TypeVar *FileAttributeType, ValuePpVar uintptr, StatusVar *FileAttributeStatus) bool {

	cret := xFileInfoGetAttributeData(x.GoPointer(), AttributeVar, TypeVar, ValuePpVar, StatusVar)
	return cret
}

var xFileInfoGetAttributeInt32 func(uintptr, string) int32

// Gets a signed 32-bit integer contained within the attribute. If the
// attribute does not contain a signed 32-bit integer, or is invalid,
// 0 will be returned.
func (x *FileInfo) GetAttributeInt32(AttributeVar string) int32 {

	cret := xFileInfoGetAttributeInt32(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetAttributeInt64 func(uintptr, string) int64

// Gets a signed 64-bit integer contained within the attribute. If the
// attribute does not contain a signed 64-bit integer, or is invalid,
// 0 will be returned.
func (x *FileInfo) GetAttributeInt64(AttributeVar string) int64 {

	cret := xFileInfoGetAttributeInt64(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetAttributeObject func(uintptr, string) uintptr

// Gets the value of a #GObject attribute. If the attribute does
// not contain a #GObject, %NULL will be returned.
func (x *FileInfo) GetAttributeObject(AttributeVar string) *gobject.Object {
	var cls *gobject.Object

	cret := xFileInfoGetAttributeObject(x.GoPointer(), AttributeVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &gobject.Object{}
	cls.Ptr = cret
	return cls
}

var xFileInfoGetAttributeStatus func(uintptr, string) FileAttributeStatus

// Gets the attribute status for an attribute key.
func (x *FileInfo) GetAttributeStatus(AttributeVar string) FileAttributeStatus {

	cret := xFileInfoGetAttributeStatus(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetAttributeString func(uintptr, string) string

// Gets the value of a string attribute. If the attribute does
// not contain a string, %NULL will be returned.
func (x *FileInfo) GetAttributeString(AttributeVar string) string {

	cret := xFileInfoGetAttributeString(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetAttributeStringv func(uintptr, string) []string

// Gets the value of a stringv attribute. If the attribute does
// not contain a stringv, %NULL will be returned.
func (x *FileInfo) GetAttributeStringv(AttributeVar string) []string {

	cret := xFileInfoGetAttributeStringv(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetAttributeType func(uintptr, string) FileAttributeType

// Gets the attribute type for an attribute key.
func (x *FileInfo) GetAttributeType(AttributeVar string) FileAttributeType {

	cret := xFileInfoGetAttributeType(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetAttributeUint32 func(uintptr, string) uint32

// Gets an unsigned 32-bit integer contained within the attribute. If the
// attribute does not contain an unsigned 32-bit integer, or is invalid,
// 0 will be returned.
func (x *FileInfo) GetAttributeUint32(AttributeVar string) uint32 {

	cret := xFileInfoGetAttributeUint32(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetAttributeUint64 func(uintptr, string) uint64

// Gets a unsigned 64-bit integer contained within the attribute. If the
// attribute does not contain an unsigned 64-bit integer, or is invalid,
// 0 will be returned.
func (x *FileInfo) GetAttributeUint64(AttributeVar string) uint64 {

	cret := xFileInfoGetAttributeUint64(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoGetContentType func(uintptr) string

// Gets the file's content type.
func (x *FileInfo) GetContentType() string {

	cret := xFileInfoGetContentType(x.GoPointer())
	return cret
}

var xFileInfoGetCreationDateTime func(uintptr) *glib.DateTime

// Gets the creation time of the current @info and returns it as a
// #GDateTime.
//
// This requires the %G_FILE_ATTRIBUTE_TIME_CREATED attribute. If
// %G_FILE_ATTRIBUTE_TIME_CREATED_USEC is provided, the resulting #GDateTime
// will have microsecond precision.
func (x *FileInfo) GetCreationDateTime() *glib.DateTime {

	cret := xFileInfoGetCreationDateTime(x.GoPointer())
	return cret
}

var xFileInfoGetDeletionDate func(uintptr) *glib.DateTime

// Returns the #GDateTime representing the deletion date of the file, as
// available in G_FILE_ATTRIBUTE_TRASH_DELETION_DATE. If the
// G_FILE_ATTRIBUTE_TRASH_DELETION_DATE attribute is unset, %NULL is returned.
func (x *FileInfo) GetDeletionDate() *glib.DateTime {

	cret := xFileInfoGetDeletionDate(x.GoPointer())
	return cret
}

var xFileInfoGetDisplayName func(uintptr) string

// Gets a display name for a file. This is guaranteed to always be set.
func (x *FileInfo) GetDisplayName() string {

	cret := xFileInfoGetDisplayName(x.GoPointer())
	return cret
}

var xFileInfoGetEditName func(uintptr) string

// Gets the edit name for a file.
func (x *FileInfo) GetEditName() string {

	cret := xFileInfoGetEditName(x.GoPointer())
	return cret
}

var xFileInfoGetEtag func(uintptr) string

// Gets the [entity tag][gfile-etag] for a given
// #GFileInfo. See %G_FILE_ATTRIBUTE_ETAG_VALUE.
func (x *FileInfo) GetEtag() string {

	cret := xFileInfoGetEtag(x.GoPointer())
	return cret
}

var xFileInfoGetFileType func(uintptr) FileType

// Gets a file's type (whether it is a regular file, symlink, etc).
// This is different from the file's content type, see g_file_info_get_content_type().
func (x *FileInfo) GetFileType() FileType {

	cret := xFileInfoGetFileType(x.GoPointer())
	return cret
}

var xFileInfoGetIcon func(uintptr) uintptr

// Gets the icon for a file.
func (x *FileInfo) GetIcon() *IconBase {
	var cls *IconBase

	cret := xFileInfoGetIcon(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &IconBase{}
	cls.Ptr = cret
	return cls
}

var xFileInfoGetIsBackup func(uintptr) bool

// Checks if a file is a backup file.
func (x *FileInfo) GetIsBackup() bool {

	cret := xFileInfoGetIsBackup(x.GoPointer())
	return cret
}

var xFileInfoGetIsHidden func(uintptr) bool

// Checks if a file is hidden.
func (x *FileInfo) GetIsHidden() bool {

	cret := xFileInfoGetIsHidden(x.GoPointer())
	return cret
}

var xFileInfoGetIsSymlink func(uintptr) bool

// Checks if a file is a symlink.
func (x *FileInfo) GetIsSymlink() bool {

	cret := xFileInfoGetIsSymlink(x.GoPointer())
	return cret
}

var xFileInfoGetModificationDateTime func(uintptr) *glib.DateTime

// Gets the modification time of the current @info and returns it as a
// #GDateTime.
//
// This requires the %G_FILE_ATTRIBUTE_TIME_MODIFIED attribute. If
// %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC is provided, the resulting #GDateTime
// will have microsecond precision.
func (x *FileInfo) GetModificationDateTime() *glib.DateTime {

	cret := xFileInfoGetModificationDateTime(x.GoPointer())
	return cret
}

var xFileInfoGetModificationTime func(uintptr, *glib.TimeVal)

// Gets the modification time of the current @info and sets it
// in @result.
func (x *FileInfo) GetModificationTime(ResultVar *glib.TimeVal) {

	xFileInfoGetModificationTime(x.GoPointer(), ResultVar)

}

var xFileInfoGetName func(uintptr) string

// Gets the name for a file. This is guaranteed to always be set.
func (x *FileInfo) GetName() string {

	cret := xFileInfoGetName(x.GoPointer())
	return cret
}

var xFileInfoGetSize func(uintptr) int64

// Gets the file's size (in bytes). The size is retrieved through the value of
// the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute and is converted
// from #guint64 to #goffset before returning the result.
func (x *FileInfo) GetSize() int64 {

	cret := xFileInfoGetSize(x.GoPointer())
	return cret
}

var xFileInfoGetSortOrder func(uintptr) int32

// Gets the value of the sort_order attribute from the #GFileInfo.
// See %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
func (x *FileInfo) GetSortOrder() int32 {

	cret := xFileInfoGetSortOrder(x.GoPointer())
	return cret
}

var xFileInfoGetSymbolicIcon func(uintptr) uintptr

// Gets the symbolic icon for a file.
func (x *FileInfo) GetSymbolicIcon() *IconBase {
	var cls *IconBase

	cret := xFileInfoGetSymbolicIcon(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &IconBase{}
	cls.Ptr = cret
	return cls
}

var xFileInfoGetSymlinkTarget func(uintptr) string

// Gets the symlink target for a given #GFileInfo.
func (x *FileInfo) GetSymlinkTarget() string {

	cret := xFileInfoGetSymlinkTarget(x.GoPointer())
	return cret
}

var xFileInfoHasAttribute func(uintptr, string) bool

// Checks if a file info structure has an attribute named @attribute.
func (x *FileInfo) HasAttribute(AttributeVar string) bool {

	cret := xFileInfoHasAttribute(x.GoPointer(), AttributeVar)
	return cret
}

var xFileInfoHasNamespace func(uintptr, string) bool

// Checks if a file info structure has an attribute in the
// specified @name_space.
func (x *FileInfo) HasNamespace(NameSpaceVar string) bool {

	cret := xFileInfoHasNamespace(x.GoPointer(), NameSpaceVar)
	return cret
}

var xFileInfoListAttributes func(uintptr, string) []string

// Lists the file info structure's attributes.
func (x *FileInfo) ListAttributes(NameSpaceVar string) []string {

	cret := xFileInfoListAttributes(x.GoPointer(), NameSpaceVar)
	return cret
}

var xFileInfoRemoveAttribute func(uintptr, string)

// Removes all cases of @attribute from @info if it exists.
func (x *FileInfo) RemoveAttribute(AttributeVar string) {

	xFileInfoRemoveAttribute(x.GoPointer(), AttributeVar)

}

var xFileInfoSetAccessDateTime func(uintptr, *glib.DateTime)

// Sets the %G_FILE_ATTRIBUTE_TIME_ACCESS and
// %G_FILE_ATTRIBUTE_TIME_ACCESS_USEC attributes in the file info to the
// given date/time value.
func (x *FileInfo) SetAccessDateTime(AtimeVar *glib.DateTime) {

	xFileInfoSetAccessDateTime(x.GoPointer(), AtimeVar)

}

var xFileInfoSetAttribute func(uintptr, string, FileAttributeType, uintptr)

// Sets the @attribute to contain the given value, if possible. To unset the
// attribute, use %G_FILE_ATTRIBUTE_TYPE_INVALID for @type.
func (x *FileInfo) SetAttribute(AttributeVar string, TypeVar FileAttributeType, ValuePVar uintptr) {

	xFileInfoSetAttribute(x.GoPointer(), AttributeVar, TypeVar, ValuePVar)

}

var xFileInfoSetAttributeBoolean func(uintptr, string, bool)

// Sets the @attribute to contain the given @attr_value,
// if possible.
func (x *FileInfo) SetAttributeBoolean(AttributeVar string, AttrValueVar bool) {

	xFileInfoSetAttributeBoolean(x.GoPointer(), AttributeVar, AttrValueVar)

}

var xFileInfoSetAttributeByteString func(uintptr, string, string)

// Sets the @attribute to contain the given @attr_value,
// if possible.
func (x *FileInfo) SetAttributeByteString(AttributeVar string, AttrValueVar string) {

	xFileInfoSetAttributeByteString(x.GoPointer(), AttributeVar, AttrValueVar)

}

var xFileInfoSetAttributeInt32 func(uintptr, string, int32)

// Sets the @attribute to contain the given @attr_value,
// if possible.
func (x *FileInfo) SetAttributeInt32(AttributeVar string, AttrValueVar int32) {

	xFileInfoSetAttributeInt32(x.GoPointer(), AttributeVar, AttrValueVar)

}

var xFileInfoSetAttributeInt64 func(uintptr, string, int64)

// Sets the @attribute to contain the given @attr_value,
// if possible.
func (x *FileInfo) SetAttributeInt64(AttributeVar string, AttrValueVar int64) {

	xFileInfoSetAttributeInt64(x.GoPointer(), AttributeVar, AttrValueVar)

}

var xFileInfoSetAttributeMask func(uintptr, *FileAttributeMatcher)

// Sets @mask on @info to match specific attribute types.
func (x *FileInfo) SetAttributeMask(MaskVar *FileAttributeMatcher) {

	xFileInfoSetAttributeMask(x.GoPointer(), MaskVar)

}

var xFileInfoSetAttributeObject func(uintptr, string, uintptr)

// Sets the @attribute to contain the given @attr_value,
// if possible.
func (x *FileInfo) SetAttributeObject(AttributeVar string, AttrValueVar *gobject.Object) {

	xFileInfoSetAttributeObject(x.GoPointer(), AttributeVar, AttrValueVar.GoPointer())

}

var xFileInfoSetAttributeStatus func(uintptr, string, FileAttributeStatus) bool

// Sets the attribute status for an attribute key. This is only
// needed by external code that implement g_file_set_attributes_from_info()
// or similar functions.
//
// The attribute must exist in @info for this to work. Otherwise %FALSE
// is returned and @info is unchanged.
func (x *FileInfo) SetAttributeStatus(AttributeVar string, StatusVar FileAttributeStatus) bool {

	cret := xFileInfoSetAttributeStatus(x.GoPointer(), AttributeVar, StatusVar)
	return cret
}

var xFileInfoSetAttributeString func(uintptr, string, string)

// Sets the @attribute to contain the given @attr_value,
// if possible.
func (x *FileInfo) SetAttributeString(AttributeVar string, AttrValueVar string) {

	xFileInfoSetAttributeString(x.GoPointer(), AttributeVar, AttrValueVar)

}

var xFileInfoSetAttributeStringv func(uintptr, string, []string)

// Sets the @attribute to contain the given @attr_value,
// if possible.
//
// Sinze: 2.22
func (x *FileInfo) SetAttributeStringv(AttributeVar string, AttrValueVar []string) {

	xFileInfoSetAttributeStringv(x.GoPointer(), AttributeVar, AttrValueVar)

}

var xFileInfoSetAttributeUint32 func(uintptr, string, uint32)

// Sets the @attribute to contain the given @attr_value,
// if possible.
func (x *FileInfo) SetAttributeUint32(AttributeVar string, AttrValueVar uint32) {

	xFileInfoSetAttributeUint32(x.GoPointer(), AttributeVar, AttrValueVar)

}

var xFileInfoSetAttributeUint64 func(uintptr, string, uint64)

// Sets the @attribute to contain the given @attr_value,
// if possible.
func (x *FileInfo) SetAttributeUint64(AttributeVar string, AttrValueVar uint64) {

	xFileInfoSetAttributeUint64(x.GoPointer(), AttributeVar, AttrValueVar)

}

var xFileInfoSetContentType func(uintptr, string)

// Sets the content type attribute for a given #GFileInfo.
// See %G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE.
func (x *FileInfo) SetContentType(ContentTypeVar string) {

	xFileInfoSetContentType(x.GoPointer(), ContentTypeVar)

}

var xFileInfoSetCreationDateTime func(uintptr, *glib.DateTime)

// Sets the %G_FILE_ATTRIBUTE_TIME_CREATED and
// %G_FILE_ATTRIBUTE_TIME_CREATED_USEC attributes in the file info to the
// given date/time value.
func (x *FileInfo) SetCreationDateTime(CreationTimeVar *glib.DateTime) {

	xFileInfoSetCreationDateTime(x.GoPointer(), CreationTimeVar)

}

var xFileInfoSetDisplayName func(uintptr, string)

// Sets the display name for the current #GFileInfo.
// See %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME.
func (x *FileInfo) SetDisplayName(DisplayNameVar string) {

	xFileInfoSetDisplayName(x.GoPointer(), DisplayNameVar)

}

var xFileInfoSetEditName func(uintptr, string)

// Sets the edit name for the current file.
// See %G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME.
func (x *FileInfo) SetEditName(EditNameVar string) {

	xFileInfoSetEditName(x.GoPointer(), EditNameVar)

}

var xFileInfoSetFileType func(uintptr, FileType)

// Sets the file type in a #GFileInfo to @type.
// See %G_FILE_ATTRIBUTE_STANDARD_TYPE.
func (x *FileInfo) SetFileType(TypeVar FileType) {

	xFileInfoSetFileType(x.GoPointer(), TypeVar)

}

var xFileInfoSetIcon func(uintptr, uintptr)

// Sets the icon for a given #GFileInfo.
// See %G_FILE_ATTRIBUTE_STANDARD_ICON.
func (x *FileInfo) SetIcon(IconVar Icon) {

	xFileInfoSetIcon(x.GoPointer(), IconVar.GoPointer())

}

var xFileInfoSetIsHidden func(uintptr, bool)

// Sets the "is_hidden" attribute in a #GFileInfo according to @is_hidden.
// See %G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN.
func (x *FileInfo) SetIsHidden(IsHiddenVar bool) {

	xFileInfoSetIsHidden(x.GoPointer(), IsHiddenVar)

}

var xFileInfoSetIsSymlink func(uintptr, bool)

// Sets the "is_symlink" attribute in a #GFileInfo according to @is_symlink.
// See %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK.
func (x *FileInfo) SetIsSymlink(IsSymlinkVar bool) {

	xFileInfoSetIsSymlink(x.GoPointer(), IsSymlinkVar)

}

var xFileInfoSetModificationDateTime func(uintptr, *glib.DateTime)

// Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED and
// %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC attributes in the file info to the
// given date/time value.
func (x *FileInfo) SetModificationDateTime(MtimeVar *glib.DateTime) {

	xFileInfoSetModificationDateTime(x.GoPointer(), MtimeVar)

}

var xFileInfoSetModificationTime func(uintptr, *glib.TimeVal)

// Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED and
// %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC attributes in the file info to the
// given time value.
func (x *FileInfo) SetModificationTime(MtimeVar *glib.TimeVal) {

	xFileInfoSetModificationTime(x.GoPointer(), MtimeVar)

}

var xFileInfoSetName func(uintptr, string)

// Sets the name attribute for the current #GFileInfo.
// See %G_FILE_ATTRIBUTE_STANDARD_NAME.
func (x *FileInfo) SetName(NameVar string) {

	xFileInfoSetName(x.GoPointer(), NameVar)

}

var xFileInfoSetSize func(uintptr, int64)

// Sets the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute in the file info
// to the given size.
func (x *FileInfo) SetSize(SizeVar int64) {

	xFileInfoSetSize(x.GoPointer(), SizeVar)

}

var xFileInfoSetSortOrder func(uintptr, int32)

// Sets the sort order attribute in the file info structure. See
// %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
func (x *FileInfo) SetSortOrder(SortOrderVar int32) {

	xFileInfoSetSortOrder(x.GoPointer(), SortOrderVar)

}

var xFileInfoSetSymbolicIcon func(uintptr, uintptr)

// Sets the symbolic icon for a given #GFileInfo.
// See %G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON.
func (x *FileInfo) SetSymbolicIcon(IconVar Icon) {

	xFileInfoSetSymbolicIcon(x.GoPointer(), IconVar.GoPointer())

}

var xFileInfoSetSymlinkTarget func(uintptr, string)

// Sets the %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET attribute in the file info
// to the given symlink target.
func (x *FileInfo) SetSymlinkTarget(SymlinkTargetVar string) {

	xFileInfoSetSymlinkTarget(x.GoPointer(), SymlinkTargetVar)

}

var xFileInfoUnsetAttributeMask func(uintptr)

// Unsets a mask set by g_file_info_set_attribute_mask(), if one
// is set.
func (x *FileInfo) UnsetAttributeMask() {

	xFileInfoUnsetAttributeMask(x.GoPointer())

}

func (c *FileInfo) GoPointer() uintptr {
	return c.Ptr
}

func (c *FileInfo) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xFileInfoGLibType, lib, "g_file_info_get_type")

	core.PuregoSafeRegister(&xNewFileInfo, lib, "g_file_info_new")

	core.PuregoSafeRegister(&xFileInfoClearStatus, lib, "g_file_info_clear_status")
	core.PuregoSafeRegister(&xFileInfoCopyInto, lib, "g_file_info_copy_into")
	core.PuregoSafeRegister(&xFileInfoDup, lib, "g_file_info_dup")
	core.PuregoSafeRegister(&xFileInfoGetAccessDateTime, lib, "g_file_info_get_access_date_time")
	core.PuregoSafeRegister(&xFileInfoGetAttributeAsString, lib, "g_file_info_get_attribute_as_string")
	core.PuregoSafeRegister(&xFileInfoGetAttributeBoolean, lib, "g_file_info_get_attribute_boolean")
	core.PuregoSafeRegister(&xFileInfoGetAttributeByteString, lib, "g_file_info_get_attribute_byte_string")
	core.PuregoSafeRegister(&xFileInfoGetAttributeData, lib, "g_file_info_get_attribute_data")
	core.PuregoSafeRegister(&xFileInfoGetAttributeInt32, lib, "g_file_info_get_attribute_int32")
	core.PuregoSafeRegister(&xFileInfoGetAttributeInt64, lib, "g_file_info_get_attribute_int64")
	core.PuregoSafeRegister(&xFileInfoGetAttributeObject, lib, "g_file_info_get_attribute_object")
	core.PuregoSafeRegister(&xFileInfoGetAttributeStatus, lib, "g_file_info_get_attribute_status")
	core.PuregoSafeRegister(&xFileInfoGetAttributeString, lib, "g_file_info_get_attribute_string")
	core.PuregoSafeRegister(&xFileInfoGetAttributeStringv, lib, "g_file_info_get_attribute_stringv")
	core.PuregoSafeRegister(&xFileInfoGetAttributeType, lib, "g_file_info_get_attribute_type")
	core.PuregoSafeRegister(&xFileInfoGetAttributeUint32, lib, "g_file_info_get_attribute_uint32")
	core.PuregoSafeRegister(&xFileInfoGetAttributeUint64, lib, "g_file_info_get_attribute_uint64")
	core.PuregoSafeRegister(&xFileInfoGetContentType, lib, "g_file_info_get_content_type")
	core.PuregoSafeRegister(&xFileInfoGetCreationDateTime, lib, "g_file_info_get_creation_date_time")
	core.PuregoSafeRegister(&xFileInfoGetDeletionDate, lib, "g_file_info_get_deletion_date")
	core.PuregoSafeRegister(&xFileInfoGetDisplayName, lib, "g_file_info_get_display_name")
	core.PuregoSafeRegister(&xFileInfoGetEditName, lib, "g_file_info_get_edit_name")
	core.PuregoSafeRegister(&xFileInfoGetEtag, lib, "g_file_info_get_etag")
	core.PuregoSafeRegister(&xFileInfoGetFileType, lib, "g_file_info_get_file_type")
	core.PuregoSafeRegister(&xFileInfoGetIcon, lib, "g_file_info_get_icon")
	core.PuregoSafeRegister(&xFileInfoGetIsBackup, lib, "g_file_info_get_is_backup")
	core.PuregoSafeRegister(&xFileInfoGetIsHidden, lib, "g_file_info_get_is_hidden")
	core.PuregoSafeRegister(&xFileInfoGetIsSymlink, lib, "g_file_info_get_is_symlink")
	core.PuregoSafeRegister(&xFileInfoGetModificationDateTime, lib, "g_file_info_get_modification_date_time")
	core.PuregoSafeRegister(&xFileInfoGetModificationTime, lib, "g_file_info_get_modification_time")
	core.PuregoSafeRegister(&xFileInfoGetName, lib, "g_file_info_get_name")
	core.PuregoSafeRegister(&xFileInfoGetSize, lib, "g_file_info_get_size")
	core.PuregoSafeRegister(&xFileInfoGetSortOrder, lib, "g_file_info_get_sort_order")
	core.PuregoSafeRegister(&xFileInfoGetSymbolicIcon, lib, "g_file_info_get_symbolic_icon")
	core.PuregoSafeRegister(&xFileInfoGetSymlinkTarget, lib, "g_file_info_get_symlink_target")
	core.PuregoSafeRegister(&xFileInfoHasAttribute, lib, "g_file_info_has_attribute")
	core.PuregoSafeRegister(&xFileInfoHasNamespace, lib, "g_file_info_has_namespace")
	core.PuregoSafeRegister(&xFileInfoListAttributes, lib, "g_file_info_list_attributes")
	core.PuregoSafeRegister(&xFileInfoRemoveAttribute, lib, "g_file_info_remove_attribute")
	core.PuregoSafeRegister(&xFileInfoSetAccessDateTime, lib, "g_file_info_set_access_date_time")
	core.PuregoSafeRegister(&xFileInfoSetAttribute, lib, "g_file_info_set_attribute")
	core.PuregoSafeRegister(&xFileInfoSetAttributeBoolean, lib, "g_file_info_set_attribute_boolean")
	core.PuregoSafeRegister(&xFileInfoSetAttributeByteString, lib, "g_file_info_set_attribute_byte_string")
	core.PuregoSafeRegister(&xFileInfoSetAttributeInt32, lib, "g_file_info_set_attribute_int32")
	core.PuregoSafeRegister(&xFileInfoSetAttributeInt64, lib, "g_file_info_set_attribute_int64")
	core.PuregoSafeRegister(&xFileInfoSetAttributeMask, lib, "g_file_info_set_attribute_mask")
	core.PuregoSafeRegister(&xFileInfoSetAttributeObject, lib, "g_file_info_set_attribute_object")
	core.PuregoSafeRegister(&xFileInfoSetAttributeStatus, lib, "g_file_info_set_attribute_status")
	core.PuregoSafeRegister(&xFileInfoSetAttributeString, lib, "g_file_info_set_attribute_string")
	core.PuregoSafeRegister(&xFileInfoSetAttributeStringv, lib, "g_file_info_set_attribute_stringv")
	core.PuregoSafeRegister(&xFileInfoSetAttributeUint32, lib, "g_file_info_set_attribute_uint32")
	core.PuregoSafeRegister(&xFileInfoSetAttributeUint64, lib, "g_file_info_set_attribute_uint64")
	core.PuregoSafeRegister(&xFileInfoSetContentType, lib, "g_file_info_set_content_type")
	core.PuregoSafeRegister(&xFileInfoSetCreationDateTime, lib, "g_file_info_set_creation_date_time")
	core.PuregoSafeRegister(&xFileInfoSetDisplayName, lib, "g_file_info_set_display_name")
	core.PuregoSafeRegister(&xFileInfoSetEditName, lib, "g_file_info_set_edit_name")
	core.PuregoSafeRegister(&xFileInfoSetFileType, lib, "g_file_info_set_file_type")
	core.PuregoSafeRegister(&xFileInfoSetIcon, lib, "g_file_info_set_icon")
	core.PuregoSafeRegister(&xFileInfoSetIsHidden, lib, "g_file_info_set_is_hidden")
	core.PuregoSafeRegister(&xFileInfoSetIsSymlink, lib, "g_file_info_set_is_symlink")
	core.PuregoSafeRegister(&xFileInfoSetModificationDateTime, lib, "g_file_info_set_modification_date_time")
	core.PuregoSafeRegister(&xFileInfoSetModificationTime, lib, "g_file_info_set_modification_time")
	core.PuregoSafeRegister(&xFileInfoSetName, lib, "g_file_info_set_name")
	core.PuregoSafeRegister(&xFileInfoSetSize, lib, "g_file_info_set_size")
	core.PuregoSafeRegister(&xFileInfoSetSortOrder, lib, "g_file_info_set_sort_order")
	core.PuregoSafeRegister(&xFileInfoSetSymbolicIcon, lib, "g_file_info_set_symbolic_icon")
	core.PuregoSafeRegister(&xFileInfoSetSymlinkTarget, lib, "g_file_info_set_symlink_target")
	core.PuregoSafeRegister(&xFileInfoUnsetAttributeMask, lib, "g_file_info_unset_attribute_mask")

}
