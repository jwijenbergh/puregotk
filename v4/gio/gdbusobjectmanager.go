// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// Base type for D-Bus object managers.
type DBusObjectManagerIface struct {
	_ structs.HostLayout

	ParentIface uintptr
}

func (x *DBusObjectManagerIface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// The #GDBusObjectManager type is the base type for service- and
// client-side implementations of the standardized
// [org.freedesktop.DBus.ObjectManager](http://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces-objectmanager)
// interface.
//
// See #GDBusObjectManagerClient for the client-side implementation
// and #GDBusObjectManagerServer for the service-side implementation.
type DBusObjectManager interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	GetInterface(ObjectPathVar string, InterfaceNameVar string) *DBusInterfaceBase
	GetObject(ObjectPathVar string) *DBusObjectBase
	GetObjectPath() string
	GetObjects() *glib.List
}

var xDBusObjectManagerGLibType func() types.GType

func DBusObjectManagerGLibType() types.GType {
	return xDBusObjectManagerGLibType()
}

type DBusObjectManagerBase struct {
	Ptr uintptr
}

func (x *DBusObjectManagerBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *DBusObjectManagerBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Gets the interface proxy for @interface_name at @object_path, if
// any.
func (x *DBusObjectManagerBase) GetInterface(ObjectPathVar string, InterfaceNameVar string) *DBusInterfaceBase {
	var cls *DBusInterfaceBase

	cret := XGDbusObjectManagerGetInterface(x.GoPointer(), ObjectPathVar, InterfaceNameVar)

	if cret == 0 {
		return nil
	}
	cls = &DBusInterfaceBase{}
	cls.Ptr = cret
	return cls
}

// Gets the #GDBusObject at @object_path, if any.
func (x *DBusObjectManagerBase) GetObject(ObjectPathVar string) *DBusObjectBase {
	var cls *DBusObjectBase

	cret := XGDbusObjectManagerGetObject(x.GoPointer(), ObjectPathVar)

	if cret == 0 {
		return nil
	}
	cls = &DBusObjectBase{}
	cls.Ptr = cret
	return cls
}

// Gets the object path that @manager is for.
func (x *DBusObjectManagerBase) GetObjectPath() string {

	cret := XGDbusObjectManagerGetObjectPath(x.GoPointer())
	return cret
}

// Gets all #GDBusObject objects known to @manager.
func (x *DBusObjectManagerBase) GetObjects() *glib.List {

	cret := XGDbusObjectManagerGetObjects(x.GoPointer())
	return cret
}

var XGDbusObjectManagerGetInterface func(uintptr, string, string) uintptr
var XGDbusObjectManagerGetObject func(uintptr, string) uintptr
var XGDbusObjectManagerGetObjectPath func(uintptr) string
var XGDbusObjectManagerGetObjects func(uintptr) *glib.List

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xDBusObjectManagerGLibType, lib, "g_dbus_object_manager_get_type")

	core.PuregoSafeRegister(&XGDbusObjectManagerGetInterface, lib, "g_dbus_object_manager_get_interface")
	core.PuregoSafeRegister(&XGDbusObjectManagerGetObject, lib, "g_dbus_object_manager_get_object")
	core.PuregoSafeRegister(&XGDbusObjectManagerGetObjectPath, lib, "g_dbus_object_manager_get_object_path")
	core.PuregoSafeRegister(&XGDbusObjectManagerGetObjects, lib, "g_dbus_object_manager_get_objects")

}
