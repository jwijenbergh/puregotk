// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// The interface for pollable input streams.
//
// The default implementation of @can_poll always returns %TRUE.
//
// The default implementation of @read_nonblocking calls
// g_pollable_input_stream_is_readable(), and then calls
// g_input_stream_read() if it returns %TRUE. This means you only need
// to override it if it is possible that your @is_readable
// implementation may return %TRUE when the stream is not actually
// readable.
type PollableInputStreamInterface struct {
	_ structs.HostLayout

	GIface uintptr
}

func (x *PollableInputStreamInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// #GPollableInputStream is implemented by #GInputStreams that
// can be polled for readiness to read. This can be used when
// interfacing with a non-GIO API that expects
// UNIX-file-descriptor-style asynchronous I/O rather than GIO-style.
type PollableInputStream interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	CanPoll() bool
	CreateSource(CancellableVar *Cancellable) *glib.Source
	IsReadable() bool
	ReadNonblocking(BufferVar []byte, CountVar uint, CancellableVar *Cancellable) int
}

var xPollableInputStreamGLibType func() types.GType

func PollableInputStreamGLibType() types.GType {
	return xPollableInputStreamGLibType()
}

type PollableInputStreamBase struct {
	Ptr uintptr
}

func (x *PollableInputStreamBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *PollableInputStreamBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Checks if @stream is actually pollable. Some classes may implement
// #GPollableInputStream but have only certain instances of that class
// be pollable. If this method returns %FALSE, then the behavior of
// other #GPollableInputStream methods is undefined.
//
// For any given stream, the value returned by this method is constant;
// a stream cannot switch from pollable to non-pollable or vice versa.
func (x *PollableInputStreamBase) CanPoll() bool {

	cret := XGPollableInputStreamCanPoll(x.GoPointer())
	return cret
}

// Creates a #GSource that triggers when @stream can be read, or
// @cancellable is triggered or an error occurs. The callback on the
// source is of the #GPollableSourceFunc type.
//
// As with g_pollable_input_stream_is_readable(), it is possible that
// the stream may not actually be readable even after the source
// triggers, so you should use g_pollable_input_stream_read_nonblocking()
// rather than g_input_stream_read() from the callback.
func (x *PollableInputStreamBase) CreateSource(CancellableVar *Cancellable) *glib.Source {

	cret := XGPollableInputStreamCreateSource(x.GoPointer(), CancellableVar.GoPointer())
	return cret
}

// Checks if @stream can be read.
//
// Note that some stream types may not be able to implement this 100%
// reliably, and it is possible that a call to g_input_stream_read()
// after this returns %TRUE would still block. To guarantee
// non-blocking behavior, you should always use
// g_pollable_input_stream_read_nonblocking(), which will return a
// %G_IO_ERROR_WOULD_BLOCK error rather than blocking.
func (x *PollableInputStreamBase) IsReadable() bool {

	cret := XGPollableInputStreamIsReadable(x.GoPointer())
	return cret
}

// Attempts to read up to @count bytes from @stream into @buffer, as
// with g_input_stream_read(). If @stream is not currently readable,
// this will immediately return %G_IO_ERROR_WOULD_BLOCK, and you can
// use g_pollable_input_stream_create_source() to create a #GSource
// that will be triggered when @stream is readable.
//
// Note that since this method never blocks, you cannot actually
// use @cancellable to cancel it. However, it will return an error
// if @cancellable has already been cancelled when you call, which
// may happen if you call this method after a source triggers due
// to having been cancelled.
func (x *PollableInputStreamBase) ReadNonblocking(BufferVar []byte, CountVar uint, CancellableVar *Cancellable) (int, error) {
	var cerr *glib.Error

	cret := XGPollableInputStreamReadNonblocking(x.GoPointer(), BufferVar, CountVar, CancellableVar.GoPointer(), &cerr)
	if cerr == nil {
		return cret, nil
	}
	return cret, cerr

}

var XGPollableInputStreamCanPoll func(uintptr) bool
var XGPollableInputStreamCreateSource func(uintptr, uintptr) *glib.Source
var XGPollableInputStreamIsReadable func(uintptr) bool
var XGPollableInputStreamReadNonblocking func(uintptr, []byte, uint, uintptr, **glib.Error) int

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xPollableInputStreamGLibType, lib, "g_pollable_input_stream_get_type")

	core.PuregoSafeRegister(&XGPollableInputStreamCanPoll, lib, "g_pollable_input_stream_can_poll")
	core.PuregoSafeRegister(&XGPollableInputStreamCreateSource, lib, "g_pollable_input_stream_create_source")
	core.PuregoSafeRegister(&XGPollableInputStreamIsReadable, lib, "g_pollable_input_stream_is_readable")
	core.PuregoSafeRegister(&XGPollableInputStreamReadNonblocking, lib, "g_pollable_input_stream_read_nonblocking")

}
