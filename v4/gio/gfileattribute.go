// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// Information about a specific attribute.
type FileAttributeInfo struct {
	Name uintptr

	Type FileAttributeType

	Flags FileAttributeInfoFlags
}

func (x *FileAttributeInfo) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// Acts as a lightweight registry for possible valid file attributes.
// The registry stores Key-Value pair formats as #GFileAttributeInfos.
type FileAttributeInfoList struct {
	Infos *FileAttributeInfo

	NInfos int
}

var xFileAttributeInfoListGLibType func() types.GType

func FileAttributeInfoListGLibType() types.GType {
	return xFileAttributeInfoListGLibType()
}

func (x *FileAttributeInfoList) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xNewFileAttributeInfoList func() *FileAttributeInfoList

// Creates a new file attribute info list.
func NewFileAttributeInfoList() *FileAttributeInfoList {

	cret := xNewFileAttributeInfoList()
	return cret
}

var xFileAttributeInfoListAdd func(uintptr, string, FileAttributeType, FileAttributeInfoFlags)

// Adds a new attribute with @name to the @list, setting
// its @type and @flags.
func (x *FileAttributeInfoList) Add(NameVar string, TypeVar FileAttributeType, FlagsVar FileAttributeInfoFlags) {

	xFileAttributeInfoListAdd(x.GoPointer(), NameVar, TypeVar, FlagsVar)

}

var xFileAttributeInfoListDup func(uintptr) *FileAttributeInfoList

// Makes a duplicate of a file attribute info list.
func (x *FileAttributeInfoList) Dup() *FileAttributeInfoList {

	cret := xFileAttributeInfoListDup(x.GoPointer())
	return cret
}

var xFileAttributeInfoListLookup func(uintptr, string) *FileAttributeInfo

// Gets the file attribute with the name @name from @list.
func (x *FileAttributeInfoList) Lookup(NameVar string) *FileAttributeInfo {

	cret := xFileAttributeInfoListLookup(x.GoPointer(), NameVar)
	return cret
}

var xFileAttributeInfoListRef func(uintptr) *FileAttributeInfoList

// References a file attribute info list.
func (x *FileAttributeInfoList) Ref() *FileAttributeInfoList {

	cret := xFileAttributeInfoListRef(x.GoPointer())
	return cret
}

var xFileAttributeInfoListUnref func(uintptr)

// Removes a reference from the given @list. If the reference count
// falls to zero, the @list is deleted.
func (x *FileAttributeInfoList) Unref() {

	xFileAttributeInfoListUnref(x.GoPointer())

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xFileAttributeInfoListGLibType, lib, "g_file_attribute_info_list_get_type")

	core.PuregoSafeRegister(&xNewFileAttributeInfoList, lib, "g_file_attribute_info_list_new")

	core.PuregoSafeRegister(&xFileAttributeInfoListAdd, lib, "g_file_attribute_info_list_add")
	core.PuregoSafeRegister(&xFileAttributeInfoListDup, lib, "g_file_attribute_info_list_dup")
	core.PuregoSafeRegister(&xFileAttributeInfoListLookup, lib, "g_file_attribute_info_list_lookup")
	core.PuregoSafeRegister(&xFileAttributeInfoListRef, lib, "g_file_attribute_info_list_ref")
	core.PuregoSafeRegister(&xFileAttributeInfoListUnref, lib, "g_file_attribute_info_list_unref")

}
