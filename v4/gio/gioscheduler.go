// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
)

var xIoSchedulerCancelAllJobs func()

// Cancels all cancellable I/O jobs.
//
// A job is cancellable if a #GCancellable was passed into
// g_io_scheduler_push_job().
func IoSchedulerCancelAllJobs() {

	xIoSchedulerCancelAllJobs()

}

var xIoSchedulerPushJob func(uintptr, uintptr, uintptr, int, uintptr)

// Schedules the I/O job to run in another thread.
//
// @notify will be called on @user_data after @job_func has returned,
// regardless whether the job was cancelled or has run to completion.
//
// If @cancellable is not %NULL, it can be used to cancel the I/O job
// by calling g_cancellable_cancel() or by calling
// g_io_scheduler_cancel_all_jobs().
func IoSchedulerPushJob(JobFuncVar *IOSchedulerJobFunc, UserDataVar uintptr, NotifyVar *glib.DestroyNotify, IoPriorityVar int, CancellableVar *Cancellable) {

	xIoSchedulerPushJob(glib.NewCallback(JobFuncVar), UserDataVar, glib.NewCallback(NotifyVar), IoPriorityVar, CancellableVar.GoPointer())

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xIoSchedulerCancelAllJobs, lib, "g_io_scheduler_cancel_all_jobs")
	core.PuregoSafeRegister(&xIoSchedulerPushJob, lib, "g_io_scheduler_push_job")

}
