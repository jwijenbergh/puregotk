// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// vtable for a #GDtlsServerConnection implementation.
type DtlsServerConnectionInterface struct {
	GIface uintptr
}

func (x *DtlsServerConnectionInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// #GDtlsServerConnection is the server-side subclass of #GDtlsConnection,
// representing a server-side DTLS connection.
type DtlsServerConnection interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
}

var xDtlsServerConnectionGLibType func() types.GType

func DtlsServerConnectionGLibType() types.GType {
	return xDtlsServerConnectionGLibType()
}

type DtlsServerConnectionBase struct {
	Ptr uintptr
}

func (x *DtlsServerConnectionBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *DtlsServerConnectionBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

var xDtlsServerConnectionNew func(uintptr, uintptr, **glib.Error) uintptr

// Creates a new #GDtlsServerConnection wrapping @base_socket.
func DtlsServerConnectionNew(BaseSocketVar DatagramBased, CertificateVar *TlsCertificate) (*DtlsServerConnectionBase, error) {
	var cls *DtlsServerConnectionBase
	var cerr *glib.Error

	cret := xDtlsServerConnectionNew(BaseSocketVar.GoPointer(), CertificateVar.GoPointer(), &cerr)

	if cret == 0 {
		return nil, cerr
	}
	cls = &DtlsServerConnectionBase{}
	cls.Ptr = cret
	if cerr == nil {
		return cls, nil
	}
	return cls, cerr

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xDtlsServerConnectionNew, lib, "g_dtls_server_connection_new")

	core.PuregoSafeRegister(&xDtlsServerConnectionGLibType, lib, "g_dtls_server_connection_get_type")

}
