// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// The virtual function table for #GPowerProfileMonitor.
type PowerProfileMonitorInterface struct {
	GIface uintptr
}

func (x *PowerProfileMonitorInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// #GPowerProfileMonitor makes it possible for applications as well as OS components
// to monitor system power profiles and act upon them. It currently only exports
// whether the system is in “Power Saver” mode (known as “Low Power” mode on
// some systems).
//
// When in “Low Power” mode, it is recommended that applications:
//   - disabling automatic downloads
//   - reduce the rate of refresh from online sources such as calendar or
//     email synchronisation
//   - if the application has expensive visual effects, reduce them
//
// It is also likely that OS components providing services to applications will
// lower their own background activity, for the sake of the system.
//
// There are a variety of tools that exist for power consumption analysis, but those
// usually depend on the OS and hardware used. On Linux, one could use `upower` to
// monitor the battery discharge rate, `powertop` to check on the background activity
// or activity at all), `sysprof` to inspect CPU usage, and `intel_gpu_time` to
// profile GPU usage.
//
// Don't forget to disconnect the #GPowerProfileMonitor::notify::power-saver-enabled
// signal, and unref the #GPowerProfileMonitor itself when exiting.
type PowerProfileMonitor interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	GetPowerSaverEnabled() bool
}

var xPowerProfileMonitorGLibType func() types.GType

func PowerProfileMonitorGLibType() types.GType {
	return xPowerProfileMonitorGLibType()
}

type PowerProfileMonitorBase struct {
	Ptr uintptr
}

func (x *PowerProfileMonitorBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *PowerProfileMonitorBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Gets whether the system is in “Power Saver” mode.
//
// You are expected to listen to the
// #GPowerProfileMonitor::notify::power-saver-enabled signal to know when the profile has
// changed.
func (x *PowerProfileMonitorBase) GetPowerSaverEnabled() bool {

	cret := XGPowerProfileMonitorGetPowerSaverEnabled(x.GoPointer())
	return cret
}

var XGPowerProfileMonitorGetPowerSaverEnabled func(uintptr) bool

const (
	// Extension point for power profile usage monitoring functionality.
	// See [Extending GIO][extending-gio].
	POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME string = "gio-power-profile-monitor"
)

var xPowerProfileMonitorDupDefault func() uintptr

// Gets a reference to the default #GPowerProfileMonitor for the system.
func PowerProfileMonitorDupDefault() *PowerProfileMonitorBase {
	var cls *PowerProfileMonitorBase

	cret := xPowerProfileMonitorDupDefault()

	if cret == 0 {
		return nil
	}
	cls = &PowerProfileMonitorBase{}
	cls.Ptr = cret
	return cls
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xPowerProfileMonitorDupDefault, lib, "g_power_profile_monitor_dup_default")

	core.PuregoSafeRegister(&xPowerProfileMonitorGLibType, lib, "g_power_profile_monitor_get_type")

	core.PuregoSafeRegister(&XGPowerProfileMonitorGetPowerSaverEnabled, lib, "g_power_profile_monitor_get_power_saver_enabled")

}
