// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
)

type UnixInputStreamClass struct {
	ParentClass uintptr
}

func (x *UnixInputStreamClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type UnixInputStreamPrivate struct {
}

func (x *UnixInputStreamPrivate) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// #GUnixInputStream implements #GInputStream for reading from a UNIX
// file descriptor, including asynchronous operations. (If the file
// descriptor refers to a socket or pipe, this will use poll() to do
// asynchronous I/O. If it refers to a regular file, it will fall back
// to doing asynchronous I/O in another thread.)
//
// Note that `&lt;gio/gunixinputstream.h&gt;` belongs to the UNIX-specific GIO
// interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
// file when using it.
type UnixInputStream struct {
	InputStream
}

func UnixInputStreamNewFromInternalPtr(ptr uintptr) *UnixInputStream {
	cls := &UnixInputStream{}
	cls.Ptr = ptr
	return cls
}

var xNewUnixInputStream func(int, bool) uintptr

// Creates a new #GUnixInputStream for the given @fd.
//
// If @close_fd is %TRUE, the file descriptor will be closed
// when the stream is closed.
func NewUnixInputStream(FdVar int, CloseFdVar bool) *UnixInputStream {
	var cls *UnixInputStream

	cret := xNewUnixInputStream(FdVar, CloseFdVar)

	if cret == 0 {
		return nil
	}
	cls = &UnixInputStream{}
	cls.Ptr = cret
	return cls
}

var xUnixInputStreamGetCloseFd func(uintptr) bool

// Returns whether the file descriptor of @stream will be
// closed when the stream is closed.
func (x *UnixInputStream) GetCloseFd() bool {

	cret := xUnixInputStreamGetCloseFd(x.GoPointer())
	return cret
}

var xUnixInputStreamGetFd func(uintptr) int

// Return the UNIX file descriptor that the stream reads from.
func (x *UnixInputStream) GetFd() int {

	cret := xUnixInputStreamGetFd(x.GoPointer())
	return cret
}

var xUnixInputStreamSetCloseFd func(uintptr, bool)

// Sets whether the file descriptor of @stream shall be closed
// when the stream is closed.
func (x *UnixInputStream) SetCloseFd(CloseFdVar bool) {

	xUnixInputStreamSetCloseFd(x.GoPointer(), CloseFdVar)

}

func (c *UnixInputStream) GoPointer() uintptr {
	return c.Ptr
}

func (c *UnixInputStream) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Checks if @stream is actually pollable. Some classes may implement
// #GPollableInputStream but have only certain instances of that class
// be pollable. If this method returns %FALSE, then the behavior of
// other #GPollableInputStream methods is undefined.
//
// For any given stream, the value returned by this method is constant;
// a stream cannot switch from pollable to non-pollable or vice versa.
func (x *UnixInputStream) CanPoll() bool {

	cret := XGPollableInputStreamCanPoll(x.GoPointer())
	return cret
}

// Creates a #GSource that triggers when @stream can be read, or
// @cancellable is triggered or an error occurs. The callback on the
// source is of the #GPollableSourceFunc type.
//
// As with g_pollable_input_stream_is_readable(), it is possible that
// the stream may not actually be readable even after the source
// triggers, so you should use g_pollable_input_stream_read_nonblocking()
// rather than g_input_stream_read() from the callback.
func (x *UnixInputStream) CreateSource(CancellableVar *Cancellable) *glib.Source {

	cret := XGPollableInputStreamCreateSource(x.GoPointer(), CancellableVar.GoPointer())
	return cret
}

// Checks if @stream can be read.
//
// Note that some stream types may not be able to implement this 100%
// reliably, and it is possible that a call to g_input_stream_read()
// after this returns %TRUE would still block. To guarantee
// non-blocking behavior, you should always use
// g_pollable_input_stream_read_nonblocking(), which will return a
// %G_IO_ERROR_WOULD_BLOCK error rather than blocking.
func (x *UnixInputStream) IsReadable() bool {

	cret := XGPollableInputStreamIsReadable(x.GoPointer())
	return cret
}

// Attempts to read up to @count bytes from @stream into @buffer, as
// with g_input_stream_read(). If @stream is not currently readable,
// this will immediately return %G_IO_ERROR_WOULD_BLOCK, and you can
// use g_pollable_input_stream_create_source() to create a #GSource
// that will be triggered when @stream is readable.
//
// Note that since this method never blocks, you cannot actually
// use @cancellable to cancel it. However, it will return an error
// if @cancellable has already been cancelled when you call, which
// may happen if you call this method after a source triggers due
// to having been cancelled.
func (x *UnixInputStream) ReadNonblocking(BufferVar []byte, CountVar uint, CancellableVar *Cancellable) (int, error) {
	var cerr *glib.Error

	cret := XGPollableInputStreamReadNonblocking(x.GoPointer(), BufferVar, CountVar, CancellableVar.GoPointer(), &cerr)
	if cerr == nil {
		return cret, nil
	}
	return cret, cerr

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewUnixInputStream, lib, "g_unix_input_stream_new")

	core.PuregoSafeRegister(&xUnixInputStreamGetCloseFd, lib, "g_unix_input_stream_get_close_fd")
	core.PuregoSafeRegister(&xUnixInputStreamGetFd, lib, "g_unix_input_stream_get_fd")
	core.PuregoSafeRegister(&xUnixInputStreamSetCloseFd, lib, "g_unix_input_stream_set_close_fd")

}
