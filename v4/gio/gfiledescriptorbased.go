// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// An interface for file descriptor based io objects.
type FileDescriptorBasedIface struct {
	_ structs.HostLayout

	GIface uintptr
}

func (x *FileDescriptorBasedIface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// #GFileDescriptorBased is implemented by streams (implementations of
// #GInputStream or #GOutputStream) that are based on file descriptors.
//
// Note that `&lt;gio/gfiledescriptorbased.h&gt;` belongs to the UNIX-specific
// GIO interfaces, thus you have to use the `gio-unix-2.0.pc` pkg-config
// file when using it.
type FileDescriptorBased interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	GetFd() int
}

var xFileDescriptorBasedGLibType func() types.GType

func FileDescriptorBasedGLibType() types.GType {
	return xFileDescriptorBasedGLibType()
}

type FileDescriptorBasedBase struct {
	Ptr uintptr
}

func (x *FileDescriptorBasedBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *FileDescriptorBasedBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Gets the underlying file descriptor.
func (x *FileDescriptorBasedBase) GetFd() int {

	cret := XGFileDescriptorBasedGetFd(x.GoPointer())
	return cret
}

var XGFileDescriptorBasedGetFd func(uintptr) int

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xFileDescriptorBasedGLibType, lib, "g_file_descriptor_based_get_type")

	core.PuregoSafeRegister(&XGFileDescriptorBasedGetFd, lib, "g_file_descriptor_based_get_fd")

}
