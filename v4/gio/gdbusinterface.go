// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// Base type for D-Bus interfaces.
type DBusInterfaceIface struct {
	_ structs.HostLayout

	ParentIface uintptr
}

func (x *DBusInterfaceIface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// The #GDBusInterface type is the base type for D-Bus interfaces both
// on the service side (see #GDBusInterfaceSkeleton) and client side
// (see #GDBusProxy).
type DBusInterface interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	DupObject() *DBusObjectBase
	GetInfo() *DBusInterfaceInfo
	GetObject() *DBusObjectBase
	SetObject(ObjectVar DBusObject)
}

var xDBusInterfaceGLibType func() types.GType

func DBusInterfaceGLibType() types.GType {
	return xDBusInterfaceGLibType()
}

type DBusInterfaceBase struct {
	Ptr uintptr
}

func (x *DBusInterfaceBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *DBusInterfaceBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Gets the #GDBusObject that @interface_ belongs to, if any.
func (x *DBusInterfaceBase) DupObject() *DBusObjectBase {
	var cls *DBusObjectBase

	cret := XGDbusInterfaceDupObject(x.GoPointer())

	if cret == 0 {
		return nil
	}
	cls = &DBusObjectBase{}
	cls.Ptr = cret
	return cls
}

// Gets D-Bus introspection information for the D-Bus interface
// implemented by @interface_.
func (x *DBusInterfaceBase) GetInfo() *DBusInterfaceInfo {

	cret := XGDbusInterfaceGetInfo(x.GoPointer())
	return cret
}

// Gets the #GDBusObject that @interface_ belongs to, if any.
//
// It is not safe to use the returned object if @interface_ or
// the returned object is being used from other threads. See
// g_dbus_interface_dup_object() for a thread-safe alternative.
func (x *DBusInterfaceBase) GetObject() *DBusObjectBase {
	var cls *DBusObjectBase

	cret := XGDbusInterfaceGetObject(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &DBusObjectBase{}
	cls.Ptr = cret
	return cls
}

// Sets the #GDBusObject for @interface_ to @object.
//
// Note that @interface_ will hold a weak reference to @object.
func (x *DBusInterfaceBase) SetObject(ObjectVar DBusObject) {

	XGDbusInterfaceSetObject(x.GoPointer(), ObjectVar.GoPointer())

}

var XGDbusInterfaceDupObject func(uintptr) uintptr
var XGDbusInterfaceGetInfo func(uintptr) *DBusInterfaceInfo
var XGDbusInterfaceGetObject func(uintptr) uintptr
var XGDbusInterfaceSetObject func(uintptr, uintptr)

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xDBusInterfaceGLibType, lib, "g_dbus_interface_get_type")

	core.PuregoSafeRegister(&XGDbusInterfaceDupObject, lib, "g_dbus_interface_dup_object")
	core.PuregoSafeRegister(&XGDbusInterfaceGetInfo, lib, "g_dbus_interface_get_info")
	core.PuregoSafeRegister(&XGDbusInterfaceGetObject, lib, "g_dbus_interface_get_object")
	core.PuregoSafeRegister(&XGDbusInterfaceSetObject, lib, "g_dbus_interface_set_object")

}
