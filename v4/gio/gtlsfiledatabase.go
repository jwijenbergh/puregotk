// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// Provides an interface for #GTlsFileDatabase implementations.
type TlsFileDatabaseInterface struct {
	GIface uintptr

	Padding [8]uintptr
}

func (x *TlsFileDatabaseInterface) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// #GTlsFileDatabase is implemented by #GTlsDatabase objects which load
// their certificate information from a file. It is an interface which
// TLS library specific subtypes implement.
type TlsFileDatabase interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
}

var xTlsFileDatabaseGLibType func() types.GType

func TlsFileDatabaseGLibType() types.GType {
	return xTlsFileDatabaseGLibType()
}

type TlsFileDatabaseBase struct {
	Ptr uintptr
}

func (x *TlsFileDatabaseBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *TlsFileDatabaseBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

var xTlsFileDatabaseNew func(string, **glib.Error) uintptr

// Creates a new #GTlsFileDatabase which uses anchor certificate authorities
// in @anchors to verify certificate chains.
//
// The certificates in @anchors must be PEM encoded.
func TlsFileDatabaseNew(AnchorsVar string) (*TlsFileDatabaseBase, error) {
	var cls *TlsFileDatabaseBase
	var cerr *glib.Error

	cret := xTlsFileDatabaseNew(AnchorsVar, &cerr)

	if cret == 0 {
		return nil, cerr
	}
	cls = &TlsFileDatabaseBase{}
	cls.Ptr = cret
	if cerr == nil {
		return cls, nil
	}
	return cls, cerr

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xTlsFileDatabaseNew, lib, "g_tls_file_database_new")

	core.PuregoSafeRegister(&xTlsFileDatabaseGLibType, lib, "g_tls_file_database_get_type")

}
