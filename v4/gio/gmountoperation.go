// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type MountOperationClass struct {
	ParentClass uintptr
}

func (x *MountOperationClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type MountOperationPrivate struct {
}

func (x *MountOperationPrivate) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// #GMountOperation provides a mechanism for interacting with the user.
// It can be used for authenticating mountable operations, such as loop
// mounting files, hard drive partitions or server locations. It can
// also be used to ask the user questions or show a list of applications
// preventing unmount or eject operations from completing.
//
// Note that #GMountOperation is used for more than just #GMount
// objects – for example it is also used in g_drive_start() and
// g_drive_stop().
//
// Users should instantiate a subclass of this that implements all the
// various callbacks to show the required dialogs, such as
// #GtkMountOperation. If no user interaction is desired (for example
// when automounting filesystems at login time), usually %NULL can be
// passed, see each method taking a #GMountOperation for details.
//
// The term ‘TCRYPT’ is used to mean ‘compatible with TrueCrypt and VeraCrypt’.
// [TrueCrypt](https://en.wikipedia.org/wiki/TrueCrypt) is a discontinued system for
// encrypting file containers, partitions or whole disks, typically used with Windows.
// [VeraCrypt](https://www.veracrypt.fr/) is a maintained fork of TrueCrypt with various
// improvements and auditing fixes.
type MountOperation struct {
	gobject.Object
}

func MountOperationNewFromInternalPtr(ptr uintptr) *MountOperation {
	cls := &MountOperation{}
	cls.Ptr = ptr
	return cls
}

var xNewMountOperation func() uintptr

// Creates a new mount operation.
func NewMountOperation() *MountOperation {
	var cls *MountOperation

	cret := xNewMountOperation()

	if cret == 0 {
		return nil
	}
	cls = &MountOperation{}
	cls.Ptr = cret
	return cls
}

var xMountOperationGetAnonymous func(uintptr) bool

// Check to see whether the mount operation is being used
// for an anonymous user.
func (x *MountOperation) GetAnonymous() bool {

	cret := xMountOperationGetAnonymous(x.GoPointer())
	return cret
}

var xMountOperationGetChoice func(uintptr) int

// Gets a choice from the mount operation.
func (x *MountOperation) GetChoice() int {

	cret := xMountOperationGetChoice(x.GoPointer())
	return cret
}

var xMountOperationGetDomain func(uintptr) string

// Gets the domain of the mount operation.
func (x *MountOperation) GetDomain() string {

	cret := xMountOperationGetDomain(x.GoPointer())
	return cret
}

var xMountOperationGetIsTcryptHiddenVolume func(uintptr) bool

// Check to see whether the mount operation is being used
// for a TCRYPT hidden volume.
func (x *MountOperation) GetIsTcryptHiddenVolume() bool {

	cret := xMountOperationGetIsTcryptHiddenVolume(x.GoPointer())
	return cret
}

var xMountOperationGetIsTcryptSystemVolume func(uintptr) bool

// Check to see whether the mount operation is being used
// for a TCRYPT system volume.
func (x *MountOperation) GetIsTcryptSystemVolume() bool {

	cret := xMountOperationGetIsTcryptSystemVolume(x.GoPointer())
	return cret
}

var xMountOperationGetPassword func(uintptr) string

// Gets a password from the mount operation.
func (x *MountOperation) GetPassword() string {

	cret := xMountOperationGetPassword(x.GoPointer())
	return cret
}

var xMountOperationGetPasswordSave func(uintptr) PasswordSave

// Gets the state of saving passwords for the mount operation.
func (x *MountOperation) GetPasswordSave() PasswordSave {

	cret := xMountOperationGetPasswordSave(x.GoPointer())
	return cret
}

var xMountOperationGetPim func(uintptr) uint

// Gets a PIM from the mount operation.
func (x *MountOperation) GetPim() uint {

	cret := xMountOperationGetPim(x.GoPointer())
	return cret
}

var xMountOperationGetUsername func(uintptr) string

// Get the user name from the mount operation.
func (x *MountOperation) GetUsername() string {

	cret := xMountOperationGetUsername(x.GoPointer())
	return cret
}

var xMountOperationReply func(uintptr, MountOperationResult)

// Emits the #GMountOperation::reply signal.
func (x *MountOperation) Reply(ResultVar MountOperationResult) {

	xMountOperationReply(x.GoPointer(), ResultVar)

}

var xMountOperationSetAnonymous func(uintptr, bool)

// Sets the mount operation to use an anonymous user if @anonymous is %TRUE.
func (x *MountOperation) SetAnonymous(AnonymousVar bool) {

	xMountOperationSetAnonymous(x.GoPointer(), AnonymousVar)

}

var xMountOperationSetChoice func(uintptr, int)

// Sets a default choice for the mount operation.
func (x *MountOperation) SetChoice(ChoiceVar int) {

	xMountOperationSetChoice(x.GoPointer(), ChoiceVar)

}

var xMountOperationSetDomain func(uintptr, string)

// Sets the mount operation's domain.
func (x *MountOperation) SetDomain(DomainVar string) {

	xMountOperationSetDomain(x.GoPointer(), DomainVar)

}

var xMountOperationSetIsTcryptHiddenVolume func(uintptr, bool)

// Sets the mount operation to use a hidden volume if @hidden_volume is %TRUE.
func (x *MountOperation) SetIsTcryptHiddenVolume(HiddenVolumeVar bool) {

	xMountOperationSetIsTcryptHiddenVolume(x.GoPointer(), HiddenVolumeVar)

}

var xMountOperationSetIsTcryptSystemVolume func(uintptr, bool)

// Sets the mount operation to use a system volume if @system_volume is %TRUE.
func (x *MountOperation) SetIsTcryptSystemVolume(SystemVolumeVar bool) {

	xMountOperationSetIsTcryptSystemVolume(x.GoPointer(), SystemVolumeVar)

}

var xMountOperationSetPassword func(uintptr, string)

// Sets the mount operation's password to @password.
func (x *MountOperation) SetPassword(PasswordVar string) {

	xMountOperationSetPassword(x.GoPointer(), PasswordVar)

}

var xMountOperationSetPasswordSave func(uintptr, PasswordSave)

// Sets the state of saving passwords for the mount operation.
func (x *MountOperation) SetPasswordSave(SaveVar PasswordSave) {

	xMountOperationSetPasswordSave(x.GoPointer(), SaveVar)

}

var xMountOperationSetPim func(uintptr, uint)

// Sets the mount operation's PIM to @pim.
func (x *MountOperation) SetPim(PimVar uint) {

	xMountOperationSetPim(x.GoPointer(), PimVar)

}

var xMountOperationSetUsername func(uintptr, string)

// Sets the user name within @op to @username.
func (x *MountOperation) SetUsername(UsernameVar string) {

	xMountOperationSetUsername(x.GoPointer(), UsernameVar)

}

func (c *MountOperation) GoPointer() uintptr {
	return c.Ptr
}

func (c *MountOperation) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted by the backend when e.g. a device becomes unavailable
// while a mount operation is in progress.
//
// Implementations of GMountOperation should handle this signal
// by dismissing open password dialogs.
func (x *MountOperation) ConnectAborted(cb *func(MountOperation)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "aborted", cbRefPtr)
	}

	fcb := func(clsPtr uintptr) {
		fa := MountOperation{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "aborted", cbRefPtr)
}

// Emitted when a mount operation asks the user for a password.
//
// If the message contains a line break, the first line should be
// presented as a heading. For example, it may be used as the
// primary text in a #GtkMessageDialog.
func (x *MountOperation) ConnectAskPassword(cb *func(MountOperation, string, string, string, AskPasswordFlags)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "ask-password", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, MessageVarp string, DefaultUserVarp string, DefaultDomainVarp string, FlagsVarp AskPasswordFlags) {
		fa := MountOperation{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, MessageVarp, DefaultUserVarp, DefaultDomainVarp, FlagsVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "ask-password", cbRefPtr)
}

// Emitted when asking the user a question and gives a list of
// choices for the user to choose from.
//
// If the message contains a line break, the first line should be
// presented as a heading. For example, it may be used as the
// primary text in a #GtkMessageDialog.
func (x *MountOperation) ConnectAskQuestion(cb *func(MountOperation, string, []string)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "ask-question", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, MessageVarp string, ChoicesVarp []string) {
		fa := MountOperation{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, MessageVarp, ChoicesVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "ask-question", cbRefPtr)
}

// Emitted when the user has replied to the mount operation.
func (x *MountOperation) ConnectReply(cb *func(MountOperation, MountOperationResult)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "reply", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, ResultVarp MountOperationResult) {
		fa := MountOperation{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, ResultVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "reply", cbRefPtr)
}

// Emitted when one or more processes are blocking an operation
// e.g. unmounting/ejecting a #GMount or stopping a #GDrive.
//
// Note that this signal may be emitted several times to update the
// list of blocking processes as processes close files. The
// application should only respond with g_mount_operation_reply() to
// the latest signal (setting #GMountOperation:choice to the choice
// the user made).
//
// If the message contains a line break, the first line should be
// presented as a heading. For example, it may be used as the
// primary text in a #GtkMessageDialog.
func (x *MountOperation) ConnectShowProcesses(cb *func(MountOperation, string, []glib.Pid, []string)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "show-processes", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, MessageVarp string, ProcessesVarp []glib.Pid, ChoicesVarp []string) {
		fa := MountOperation{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, MessageVarp, ProcessesVarp, ChoicesVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "show-processes", cbRefPtr)
}

// Emitted when an unmount operation has been busy for more than some time
// (typically 1.5 seconds).
//
// When unmounting or ejecting a volume, the kernel might need to flush
// pending data in its buffers to the volume stable storage, and this operation
// can take a considerable amount of time. This signal may be emitted several
// times as long as the unmount operation is outstanding, and then one
// last time when the operation is completed, with @bytes_left set to zero.
//
// Implementations of GMountOperation should handle this signal by
// showing an UI notification, and then dismiss it, or show another notification
// of completion, when @bytes_left reaches zero.
//
// If the message contains a line break, the first line should be
// presented as a heading. For example, it may be used as the
// primary text in a #GtkMessageDialog.
func (x *MountOperation) ConnectShowUnmountProgress(cb *func(MountOperation, string, int64, int64)) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "show-unmount-progress", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, MessageVarp string, TimeLeftVarp int64, BytesLeftVarp int64) {
		fa := MountOperation{}
		fa.Ptr = clsPtr
		cbFn := *cb

		cbFn(fa, MessageVarp, TimeLeftVarp, BytesLeftVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "show-unmount-progress", cbRefPtr)
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewMountOperation, lib, "g_mount_operation_new")

	core.PuregoSafeRegister(&xMountOperationGetAnonymous, lib, "g_mount_operation_get_anonymous")
	core.PuregoSafeRegister(&xMountOperationGetChoice, lib, "g_mount_operation_get_choice")
	core.PuregoSafeRegister(&xMountOperationGetDomain, lib, "g_mount_operation_get_domain")
	core.PuregoSafeRegister(&xMountOperationGetIsTcryptHiddenVolume, lib, "g_mount_operation_get_is_tcrypt_hidden_volume")
	core.PuregoSafeRegister(&xMountOperationGetIsTcryptSystemVolume, lib, "g_mount_operation_get_is_tcrypt_system_volume")
	core.PuregoSafeRegister(&xMountOperationGetPassword, lib, "g_mount_operation_get_password")
	core.PuregoSafeRegister(&xMountOperationGetPasswordSave, lib, "g_mount_operation_get_password_save")
	core.PuregoSafeRegister(&xMountOperationGetPim, lib, "g_mount_operation_get_pim")
	core.PuregoSafeRegister(&xMountOperationGetUsername, lib, "g_mount_operation_get_username")
	core.PuregoSafeRegister(&xMountOperationReply, lib, "g_mount_operation_reply")
	core.PuregoSafeRegister(&xMountOperationSetAnonymous, lib, "g_mount_operation_set_anonymous")
	core.PuregoSafeRegister(&xMountOperationSetChoice, lib, "g_mount_operation_set_choice")
	core.PuregoSafeRegister(&xMountOperationSetDomain, lib, "g_mount_operation_set_domain")
	core.PuregoSafeRegister(&xMountOperationSetIsTcryptHiddenVolume, lib, "g_mount_operation_set_is_tcrypt_hidden_volume")
	core.PuregoSafeRegister(&xMountOperationSetIsTcryptSystemVolume, lib, "g_mount_operation_set_is_tcrypt_system_volume")
	core.PuregoSafeRegister(&xMountOperationSetPassword, lib, "g_mount_operation_set_password")
	core.PuregoSafeRegister(&xMountOperationSetPasswordSave, lib, "g_mount_operation_set_password_save")
	core.PuregoSafeRegister(&xMountOperationSetPim, lib, "g_mount_operation_set_pim")
	core.PuregoSafeRegister(&xMountOperationSetUsername, lib, "g_mount_operation_set_username")

}
