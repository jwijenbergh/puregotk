// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

type IOStreamClass struct {
	_ structs.HostLayout

	ParentClass uintptr
}

func (x *IOStreamClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type IOStreamPrivate struct {
	_ structs.HostLayout
}

func (x *IOStreamPrivate) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// GIOStream represents an object that has both read and write streams.
// Generally the two streams act as separate input and output streams,
// but they share some common resources and state. For instance, for
// seekable streams, both streams may use the same position.
//
// Examples of #GIOStream objects are #GSocketConnection, which represents
// a two-way network connection; and #GFileIOStream, which represents a
// file handle opened in read-write mode.
//
// To do the actual reading and writing you need to get the substreams
// with g_io_stream_get_input_stream() and g_io_stream_get_output_stream().
//
// The #GIOStream object owns the input and the output streams, not the other
// way around, so keeping the substreams alive will not keep the #GIOStream
// object alive. If the #GIOStream object is freed it will be closed, thus
// closing the substreams, so even if the substreams stay alive they will
// always return %G_IO_ERROR_CLOSED for all operations.
//
// To close a stream use g_io_stream_close() which will close the common
// stream object and also the individual substreams. You can also close
// the substreams themselves. In most cases this only marks the
// substream as closed, so further I/O on it fails but common state in the
// #GIOStream may still be open. However, some streams may support
// "half-closed" states where one direction of the stream is actually shut down.
//
// Operations on #GIOStreams cannot be started while another operation on the
// #GIOStream or its substreams is in progress. Specifically, an application can
// read from the #GInputStream and write to the #GOutputStream simultaneously
// (either in separate threads, or as asynchronous operations in the same
// thread), but an application cannot start any #GIOStream operation while there
// is a #GIOStream, #GInputStream or #GOutputStream operation in progress, and
// an application canâ€™t start any #GInputStream or #GOutputStream operation
// while there is a #GIOStream operation in progress.
//
// This is a product of individual stream operations being associated with a
// given #GMainContext (the thread-default context at the time the operation was
// started), rather than entire streams being associated with a single
// #GMainContext.
//
// GIO may run operations on #GIOStreams from other (worker) threads, and this
// may be exposed to application code in the behaviour of wrapper streams, such
// as #GBufferedInputStream or #GTlsConnection. With such wrapper APIs,
// application code may only run operations on the base (wrapped) stream when
// the wrapper stream is idle. Note that the semantics of such operations may
// not be well-defined due to the state the wrapper stream leaves the base
// stream in (though they are guaranteed not to crash).
type IOStream struct {
	gobject.Object
}

var xIOStreamGLibType func() types.GType

func IOStreamGLibType() types.GType {
	return xIOStreamGLibType()
}

func IOStreamNewFromInternalPtr(ptr uintptr) *IOStream {
	cls := &IOStream{}
	cls.Ptr = ptr
	return cls
}

var xIOStreamClearPending func(uintptr)

// Clears the pending flag on @stream.
func (x *IOStream) ClearPending() {

	xIOStreamClearPending(x.GoPointer())

}

var xIOStreamClose func(uintptr, uintptr, **glib.Error) bool

// Closes the stream, releasing resources related to it. This will also
// close the individual input and output streams, if they are not already
// closed.
//
// Once the stream is closed, all other operations will return
// %G_IO_ERROR_CLOSED. Closing a stream multiple times will not
// return an error.
//
// Closing a stream will automatically flush any outstanding buffers
// in the stream.
//
// Streams will be automatically closed when the last reference
// is dropped, but you might want to call this function to make sure
// resources are released as early as possible.
//
// Some streams might keep the backing store of the stream (e.g. a file
// descriptor) open after the stream is closed. See the documentation for
// the individual stream for details.
//
// On failure the first error that happened will be reported, but the
// close operation will finish as much as possible. A stream that failed
// to close will still return %G_IO_ERROR_CLOSED for all operations.
// Still, it is important to check and report the error to the user,
// otherwise there might be a loss of data as all data might not be written.
//
// If @cancellable is not NULL, then the operation can be cancelled by
// triggering the cancellable object from another thread. If the operation
// was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
// Cancelling a close will still leave the stream closed, but some streams
// can use a faster close that doesn't block to e.g. check errors.
//
// The default implementation of this method just calls close on the
// individual input/output streams.
func (x *IOStream) Close(CancellableVar *Cancellable) (bool, error) {
	var cerr *glib.Error

	cret := xIOStreamClose(x.GoPointer(), CancellableVar.GoPointer(), &cerr)
	if cerr == nil {
		return cret, nil
	}
	return cret, cerr

}

var xIOStreamCloseAsync func(uintptr, int, uintptr, uintptr, uintptr)

// Requests an asynchronous close of the stream, releasing resources
// related to it. When the operation is finished @callback will be
// called. You can then call g_io_stream_close_finish() to get
// the result of the operation.
//
// For behaviour details see g_io_stream_close().
//
// The asynchronous methods have a default fallback that uses threads
// to implement asynchronicity, so they are optional for inheriting
// classes. However, if you override one you must override all.
func (x *IOStream) CloseAsync(IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {

	xIOStreamCloseAsync(x.GoPointer(), IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)

}

var xIOStreamCloseFinish func(uintptr, uintptr, **glib.Error) bool

// Closes a stream.
func (x *IOStream) CloseFinish(ResultVar AsyncResult) (bool, error) {
	var cerr *glib.Error

	cret := xIOStreamCloseFinish(x.GoPointer(), ResultVar.GoPointer(), &cerr)
	if cerr == nil {
		return cret, nil
	}
	return cret, cerr

}

var xIOStreamGetInputStream func(uintptr) uintptr

// Gets the input stream for this object. This is used
// for reading.
func (x *IOStream) GetInputStream() *InputStream {
	var cls *InputStream

	cret := xIOStreamGetInputStream(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &InputStream{}
	cls.Ptr = cret
	return cls
}

var xIOStreamGetOutputStream func(uintptr) uintptr

// Gets the output stream for this object. This is used for
// writing.
func (x *IOStream) GetOutputStream() *OutputStream {
	var cls *OutputStream

	cret := xIOStreamGetOutputStream(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &OutputStream{}
	cls.Ptr = cret
	return cls
}

var xIOStreamHasPending func(uintptr) bool

// Checks if a stream has pending actions.
func (x *IOStream) HasPending() bool {

	cret := xIOStreamHasPending(x.GoPointer())
	return cret
}

var xIOStreamIsClosed func(uintptr) bool

// Checks if a stream is closed.
func (x *IOStream) IsClosed() bool {

	cret := xIOStreamIsClosed(x.GoPointer())
	return cret
}

var xIOStreamSetPending func(uintptr) bool

// Sets @stream to have actions pending. If the pending flag is
// already set or @stream is closed, it will return %FALSE and set
// @error.
func (x *IOStream) SetPending() (bool, error) {
	var cerr *glib.Error

	cret := xIOStreamSetPending(x.GoPointer())
	if cerr == nil {
		return cret, nil
	}
	return cret, cerr

}

var xIOStreamSpliceAsync func(uintptr, uintptr, IOStreamSpliceFlags, int, uintptr, uintptr, uintptr)

// Asynchronously splice the output stream of @stream1 to the input stream of
// @stream2, and splice the output stream of @stream2 to the input stream of
// @stream1.
//
// When the operation is finished @callback will be called.
// You can then call g_io_stream_splice_finish() to get the
// result of the operation.
func (x *IOStream) SpliceAsync(Stream2Var *IOStream, FlagsVar IOStreamSpliceFlags, IoPriorityVar int, CancellableVar *Cancellable, CallbackVar *AsyncReadyCallback, UserDataVar uintptr) {

	xIOStreamSpliceAsync(x.GoPointer(), Stream2Var.GoPointer(), FlagsVar, IoPriorityVar, CancellableVar.GoPointer(), glib.NewCallback(CallbackVar), UserDataVar)

}

func (c *IOStream) GoPointer() uintptr {
	return c.Ptr
}

func (c *IOStream) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

var xIOStreamSpliceFinish func(uintptr, **glib.Error) bool

// Finishes an asynchronous io stream splice operation.
func IOStreamSpliceFinish(ResultVar AsyncResult) (bool, error) {
	var cerr *glib.Error

	cret := xIOStreamSpliceFinish(ResultVar.GoPointer(), &cerr)
	if cerr == nil {
		return cret, nil
	}
	return cret, cerr

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xIOStreamGLibType, lib, "g_io_stream_get_type")

	core.PuregoSafeRegister(&xIOStreamClearPending, lib, "g_io_stream_clear_pending")
	core.PuregoSafeRegister(&xIOStreamClose, lib, "g_io_stream_close")
	core.PuregoSafeRegister(&xIOStreamCloseAsync, lib, "g_io_stream_close_async")
	core.PuregoSafeRegister(&xIOStreamCloseFinish, lib, "g_io_stream_close_finish")
	core.PuregoSafeRegister(&xIOStreamGetInputStream, lib, "g_io_stream_get_input_stream")
	core.PuregoSafeRegister(&xIOStreamGetOutputStream, lib, "g_io_stream_get_output_stream")
	core.PuregoSafeRegister(&xIOStreamHasPending, lib, "g_io_stream_has_pending")
	core.PuregoSafeRegister(&xIOStreamIsClosed, lib, "g_io_stream_is_closed")
	core.PuregoSafeRegister(&xIOStreamSetPending, lib, "g_io_stream_set_pending")
	core.PuregoSafeRegister(&xIOStreamSpliceAsync, lib, "g_io_stream_splice_async")

	core.PuregoSafeRegister(&xIOStreamSpliceFinish, lib, "g_io_stream_splice_finish")

}
