// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// Class structure for #GSocketService.
type SocketServiceClass struct {
	ParentClass uintptr
}

func (x *SocketServiceClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type SocketServicePrivate struct {
}

func (x *SocketServicePrivate) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A #GSocketService is an object that represents a service that
// is provided to the network or over local sockets.  When a new
// connection is made to the service the #GSocketService::incoming
// signal is emitted.
//
// A #GSocketService is a subclass of #GSocketListener and you need
// to add the addresses you want to accept connections on with the
// #GSocketListener APIs.
//
// There are two options for implementing a network service based on
// #GSocketService. The first is to create the service using
// g_socket_service_new() and to connect to the #GSocketService::incoming
// signal. The second is to subclass #GSocketService and override the
// default signal handler implementation.
//
// In either case, the handler must immediately return, or else it
// will block additional incoming connections from being serviced.
// If you are interested in writing connection handlers that contain
// blocking code then see #GThreadedSocketService.
//
// The socket service runs on the main loop of the
// [thread-default context][g-main-context-push-thread-default-context]
// of the thread it is created in, and is not
// threadsafe in general. However, the calls to start and stop the
// service are thread-safe so these can be used from threads that
// handle incoming clients.
type SocketService struct {
	SocketListener
}

var xSocketServiceGLibType func() types.GType

func SocketServiceGLibType() types.GType {
	return xSocketServiceGLibType()
}

func SocketServiceNewFromInternalPtr(ptr uintptr) *SocketService {
	cls := &SocketService{}
	cls.Ptr = ptr
	return cls
}

var xNewSocketService func() uintptr

// Creates a new #GSocketService with no sockets to listen for.
// New listeners can be added with e.g. g_socket_listener_add_address()
// or g_socket_listener_add_inet_port().
//
// New services are created active, there is no need to call
// g_socket_service_start(), unless g_socket_service_stop() has been
// called before.
func NewSocketService() *SocketService {
	var cls *SocketService

	cret := xNewSocketService()

	if cret == 0 {
		return nil
	}
	cls = &SocketService{}
	cls.Ptr = cret
	return cls
}

var xSocketServiceIsActive func(uintptr) bool

// Check whether the service is active or not. An active
// service will accept new clients that connect, while
// a non-active service will let connecting clients queue
// up until the service is started.
func (x *SocketService) IsActive() bool {

	cret := xSocketServiceIsActive(x.GoPointer())
	return cret
}

var xSocketServiceStart func(uintptr)

// Restarts the service, i.e. start accepting connections
// from the added sockets when the mainloop runs. This only needs
// to be called after the service has been stopped from
// g_socket_service_stop().
//
// This call is thread-safe, so it may be called from a thread
// handling an incoming client request.
func (x *SocketService) Start() {

	xSocketServiceStart(x.GoPointer())

}

var xSocketServiceStop func(uintptr)

// Stops the service, i.e. stops accepting connections
// from the added sockets when the mainloop runs.
//
// This call is thread-safe, so it may be called from a thread
// handling an incoming client request.
//
// Note that this only stops accepting new connections; it does not
// close the listening sockets, and you can call
// g_socket_service_start() again later to begin listening again. To
// close the listening sockets, call g_socket_listener_close(). (This
// will happen automatically when the #GSocketService is finalized.)
//
// This must be called before calling g_socket_listener_close() as
// the socket service will start accepting connections immediately
// when a new socket is added.
func (x *SocketService) Stop() {

	xSocketServiceStop(x.GoPointer())

}

func (c *SocketService) GoPointer() uintptr {
	return c.Ptr
}

func (c *SocketService) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// The ::incoming signal is emitted when a new incoming connection
// to @service needs to be handled. The handler must initiate the
// handling of @connection, but may not block; in essence,
// asynchronous operations must be used.
//
// @connection will be unreffed once the signal handler returns,
// so you need to ref it yourself if you are planning to use it.
func (x *SocketService) ConnectIncoming(cb *func(SocketService, uintptr, uintptr) bool) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "incoming", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, ConnectionVarp uintptr, SourceObjectVarp uintptr) bool {
		fa := SocketService{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa, ConnectionVarp, SourceObjectVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "incoming", cbRefPtr)
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xSocketServiceGLibType, lib, "g_socket_service_get_type")

	core.PuregoSafeRegister(&xNewSocketService, lib, "g_socket_service_new")

	core.PuregoSafeRegister(&xSocketServiceIsActive, lib, "g_socket_service_is_active")
	core.PuregoSafeRegister(&xSocketServiceStart, lib, "g_socket_service_start")
	core.PuregoSafeRegister(&xSocketServiceStop, lib, "g_socket_service_stop")

}
