// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// Class structure for #GDBusObjectSkeleton.
type DBusObjectSkeletonClass struct {
	_ structs.HostLayout

	ParentClass uintptr

	Padding [8]uintptr
}

func (x *DBusObjectSkeletonClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type DBusObjectSkeletonPrivate struct {
	_ structs.HostLayout
}

func (x *DBusObjectSkeletonPrivate) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A #GDBusObjectSkeleton instance is essentially a group of D-Bus
// interfaces. The set of exported interfaces on the object may be
// dynamic and change at runtime.
//
// This type is intended to be used with #GDBusObjectManager.
type DBusObjectSkeleton struct {
	gobject.Object
}

var xDBusObjectSkeletonGLibType func() types.GType

func DBusObjectSkeletonGLibType() types.GType {
	return xDBusObjectSkeletonGLibType()
}

func DBusObjectSkeletonNewFromInternalPtr(ptr uintptr) *DBusObjectSkeleton {
	cls := &DBusObjectSkeleton{}
	cls.Ptr = ptr
	return cls
}

var xNewDBusObjectSkeleton func(string) uintptr

// Creates a new #GDBusObjectSkeleton.
func NewDBusObjectSkeleton(ObjectPathVar string) *DBusObjectSkeleton {
	var cls *DBusObjectSkeleton

	cret := xNewDBusObjectSkeleton(ObjectPathVar)

	if cret == 0 {
		return nil
	}
	cls = &DBusObjectSkeleton{}
	cls.Ptr = cret
	return cls
}

var xDBusObjectSkeletonAddInterface func(uintptr, uintptr)

// Adds @interface_ to @object.
//
// If @object already contains a #GDBusInterfaceSkeleton with the same
// interface name, it is removed before @interface_ is added.
//
// Note that @object takes its own reference on @interface_ and holds
// it until removed.
func (x *DBusObjectSkeleton) AddInterface(InterfaceVar *DBusInterfaceSkeleton) {

	xDBusObjectSkeletonAddInterface(x.GoPointer(), InterfaceVar.GoPointer())

}

var xDBusObjectSkeletonFlush func(uintptr)

// This method simply calls g_dbus_interface_skeleton_flush() on all
// interfaces belonging to @object. See that method for when flushing
// is useful.
func (x *DBusObjectSkeleton) Flush() {

	xDBusObjectSkeletonFlush(x.GoPointer())

}

var xDBusObjectSkeletonRemoveInterface func(uintptr, uintptr)

// Removes @interface_ from @object.
func (x *DBusObjectSkeleton) RemoveInterface(InterfaceVar *DBusInterfaceSkeleton) {

	xDBusObjectSkeletonRemoveInterface(x.GoPointer(), InterfaceVar.GoPointer())

}

var xDBusObjectSkeletonRemoveInterfaceByName func(uintptr, string)

// Removes the #GDBusInterface with @interface_name from @object.
//
// If no D-Bus interface of the given interface exists, this function
// does nothing.
func (x *DBusObjectSkeleton) RemoveInterfaceByName(InterfaceNameVar string) {

	xDBusObjectSkeletonRemoveInterfaceByName(x.GoPointer(), InterfaceNameVar)

}

var xDBusObjectSkeletonSetObjectPath func(uintptr, string)

// Sets the object path for @object.
func (x *DBusObjectSkeleton) SetObjectPath(ObjectPathVar string) {

	xDBusObjectSkeletonSetObjectPath(x.GoPointer(), ObjectPathVar)

}

func (c *DBusObjectSkeleton) GoPointer() uintptr {
	return c.Ptr
}

func (c *DBusObjectSkeleton) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted when a method is invoked by a remote caller and used to
// determine if the method call is authorized.
//
// This signal is like #GDBusInterfaceSkeleton's
// #GDBusInterfaceSkeleton::g-authorize-method signal,
// except that it is for the enclosing object.
//
// The default class handler just returns %TRUE.
func (x *DBusObjectSkeleton) ConnectAuthorizeMethod(cb *func(DBusObjectSkeleton, uintptr, uintptr) bool) uint32 {
	cbPtr := uintptr(unsafe.Pointer(cb))
	if cbRefPtr, ok := glib.GetCallback(cbPtr); ok {
		return gobject.SignalConnect(x.GoPointer(), "authorize-method", cbRefPtr)
	}

	fcb := func(clsPtr uintptr, InterfaceVarp uintptr, InvocationVarp uintptr) bool {
		fa := DBusObjectSkeleton{}
		fa.Ptr = clsPtr
		cbFn := *cb

		return cbFn(fa, InterfaceVarp, InvocationVarp)

	}
	cbRefPtr := purego.NewCallback(fcb)
	glib.SaveCallback(cbPtr, cbRefPtr)
	return gobject.SignalConnect(x.GoPointer(), "authorize-method", cbRefPtr)
}

// Gets the D-Bus interface with name @interface_name associated with
// @object, if any.
func (x *DBusObjectSkeleton) GetInterface(InterfaceNameVar string) *DBusInterfaceBase {
	var cls *DBusInterfaceBase

	cret := XGDbusObjectGetInterface(x.GoPointer(), InterfaceNameVar)

	if cret == 0 {
		return nil
	}
	cls = &DBusInterfaceBase{}
	cls.Ptr = cret
	return cls
}

// Gets the D-Bus interfaces associated with @object.
func (x *DBusObjectSkeleton) GetInterfaces() *glib.List {

	cret := XGDbusObjectGetInterfaces(x.GoPointer())
	return cret
}

// Gets the object path for @object.
func (x *DBusObjectSkeleton) GetObjectPath() string {

	cret := XGDbusObjectGetObjectPath(x.GoPointer())
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xDBusObjectSkeletonGLibType, lib, "g_dbus_object_skeleton_get_type")

	core.PuregoSafeRegister(&xNewDBusObjectSkeleton, lib, "g_dbus_object_skeleton_new")

	core.PuregoSafeRegister(&xDBusObjectSkeletonAddInterface, lib, "g_dbus_object_skeleton_add_interface")
	core.PuregoSafeRegister(&xDBusObjectSkeletonFlush, lib, "g_dbus_object_skeleton_flush")
	core.PuregoSafeRegister(&xDBusObjectSkeletonRemoveInterface, lib, "g_dbus_object_skeleton_remove_interface")
	core.PuregoSafeRegister(&xDBusObjectSkeletonRemoveInterfaceByName, lib, "g_dbus_object_skeleton_remove_interface_by_name")
	core.PuregoSafeRegister(&xDBusObjectSkeletonSetObjectPath, lib, "g_dbus_object_skeleton_set_object_path")

}
