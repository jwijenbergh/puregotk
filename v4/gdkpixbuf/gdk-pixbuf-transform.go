// Package gdkpixbuf was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gdkpixbuf

import "github.com/jwijenbergh/puregotk/v4/gobject/types"

// Interpolation modes for scaling functions.
//
// The `GDK_INTERP_NEAREST` mode is the fastest scaling method, but has
// horrible quality when scaling down; `GDK_INTERP_BILINEAR` is the best
// choice if you aren't sure what to choose, it has a good speed/quality
// balance.
//
// **Note**: Cubic filtering is missing from the list; hyperbolic
// interpolation is just as fast and results in higher quality.
type InterpType int

var xInterpTypeGLibType func() types.GType

func InterpTypeGLibType() types.GType {
	return xInterpTypeGLibType()
}

const (

	// Nearest neighbor sampling; this is the fastest
	//  and lowest quality mode. Quality is normally unacceptable when scaling
	//  down, but may be OK when scaling up.
	GdkInterpNearestValue InterpType = 0
	// This is an accurate simulation of the PostScript
	//  image operator without any interpolation enabled.  Each pixel is
	//  rendered as a tiny parallelogram of solid color, the edges of which
	//  are implemented with antialiasing.  It resembles nearest neighbor for
	//  enlargement, and bilinear for reduction.
	GdkInterpTilesValue InterpType = 1
	// Best quality/speed balance; use this mode by
	//  default. Bilinear interpolation.  For enlargement, it is
	//  equivalent to point-sampling the ideal bilinear-interpolated image.
	//  For reduction, it is equivalent to laying down small tiles and
	//  integrating over the coverage area.
	GdkInterpBilinearValue InterpType = 2
	// This is the slowest and highest quality
	//  reconstruction function. It is derived from the hyperbolic filters in
	//  Wolberg's "Digital Image Warping", and is formally defined as the
	//  hyperbolic-filter sampling the ideal hyperbolic-filter interpolated
	//  image (the filter is designed to be idempotent for 1:1 pixel mapping).
	//  **Deprecated**: this interpolation filter is deprecated, as in reality
	//  it has a lower quality than the @GDK_INTERP_BILINEAR filter
	//  (Since: 2.38)
	GdkInterpHyperValue InterpType = 3
)

// The possible rotations which can be passed to gdk_pixbuf_rotate_simple().
//
// To make them easier to use, their numerical values are the actual degrees.
type PixbufRotation int

var xPixbufRotationGLibType func() types.GType

func PixbufRotationGLibType() types.GType {
	return xPixbufRotationGLibType()
}

const (

	// No rotation.
	GdkPixbufRotateNoneValue PixbufRotation = 0
	// Rotate by 90 degrees.
	GdkPixbufRotateCounterclockwiseValue PixbufRotation = 90
	// Rotate by 180 degrees.
	GdkPixbufRotateUpsidedownValue PixbufRotation = 180
	// Rotate by 270 degrees.
	GdkPixbufRotateClockwiseValue PixbufRotation = 270
)
