// Package pango was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package pango

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// A `PangoTabArray` contains an array of tab stops.
//
// `PangoTabArray` can be used to set tab stops in a `PangoLayout`.
// Each tab stop has an alignment, a position, and optionally
// a character to use as decimal point.
type TabArray struct {
}

var xTabArrayGLibType func() types.GType

func TabArrayGLibType() types.GType {
	return xTabArrayGLibType()
}

func (x *TabArray) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xNewTabArray func(int, bool) *TabArray

// Creates an array of @initial_size tab stops.
//
// Tab stops are specified in pixel units if @positions_in_pixels is %TRUE,
// otherwise in Pango units. All stops are initially at position 0.
func NewTabArray(InitialSizeVar int, PositionsInPixelsVar bool) *TabArray {

	cret := xNewTabArray(InitialSizeVar, PositionsInPixelsVar)
	return cret
}

var xNewTabArrayWithPositions func(int, bool, TabAlign, int, ...interface{}) *TabArray

// Creates a `PangoTabArray` and allows you to specify the alignment
// and position of each tab stop.
//
// You **must** provide an alignment and position for @size tab stops.
func NewTabArrayWithPositions(SizeVar int, PositionsInPixelsVar bool, FirstAlignmentVar TabAlign, FirstPositionVar int, varArgs ...interface{}) *TabArray {

	cret := xNewTabArrayWithPositions(SizeVar, PositionsInPixelsVar, FirstAlignmentVar, FirstPositionVar, varArgs...)
	return cret
}

var xTabArrayCopy func(uintptr) *TabArray

// Copies a `PangoTabArray`.
func (x *TabArray) Copy() *TabArray {

	cret := xTabArrayCopy(x.GoPointer())
	return cret
}

var xTabArrayFree func(uintptr)

// Frees a tab array and associated resources.
func (x *TabArray) Free() {

	xTabArrayFree(x.GoPointer())

}

var xTabArrayGetDecimalPoint func(uintptr, int) uint32

// Gets the Unicode character to use as decimal point.
//
// This is only relevant for tabs with %PANGO_TAB_DECIMAL alignment,
// which align content at the first occurrence of the decimal point
// character.
//
// The default value of 0 means that Pango will use the
// decimal point according to the current locale.
func (x *TabArray) GetDecimalPoint(TabIndexVar int) uint32 {

	cret := xTabArrayGetDecimalPoint(x.GoPointer(), TabIndexVar)
	return cret
}

var xTabArrayGetPositionsInPixels func(uintptr) bool

// Returns %TRUE if the tab positions are in pixels,
// %FALSE if they are in Pango units.
func (x *TabArray) GetPositionsInPixels() bool {

	cret := xTabArrayGetPositionsInPixels(x.GoPointer())
	return cret
}

var xTabArrayGetSize func(uintptr) int

// Gets the number of tab stops in @tab_array.
func (x *TabArray) GetSize() int {

	cret := xTabArrayGetSize(x.GoPointer())
	return cret
}

var xTabArrayGetTab func(uintptr, int, *TabAlign, int)

// Gets the alignment and position of a tab stop.
func (x *TabArray) GetTab(TabIndexVar int, AlignmentVar *TabAlign, LocationVar int) {

	xTabArrayGetTab(x.GoPointer(), TabIndexVar, AlignmentVar, LocationVar)

}

var xTabArrayGetTabs func(uintptr, **TabAlign, []int)

// If non-%NULL, @alignments and @locations are filled with allocated
// arrays.
//
// The arrays are of length [method@Pango.TabArray.get_size].
// You must free the returned array.
func (x *TabArray) GetTabs(AlignmentsVar **TabAlign, LocationsVar []int) {

	xTabArrayGetTabs(x.GoPointer(), AlignmentsVar, LocationsVar)

}

var xTabArrayResize func(uintptr, int)

// Resizes a tab array.
//
// You must subsequently initialize any tabs
// that were added as a result of growing the array.
func (x *TabArray) Resize(NewSizeVar int) {

	xTabArrayResize(x.GoPointer(), NewSizeVar)

}

var xTabArraySetDecimalPoint func(uintptr, int, uint32)

// Sets the Unicode character to use as decimal point.
//
// This is only relevant for tabs with %PANGO_TAB_DECIMAL alignment,
// which align content at the first occurrence of the decimal point
// character.
//
// By default, Pango uses the decimal point according
// to the current locale.
func (x *TabArray) SetDecimalPoint(TabIndexVar int, DecimalPointVar uint32) {

	xTabArraySetDecimalPoint(x.GoPointer(), TabIndexVar, DecimalPointVar)

}

var xTabArraySetPositionsInPixels func(uintptr, bool)

// Sets whether positions in this array are specified in
// pixels.
func (x *TabArray) SetPositionsInPixels(PositionsInPixelsVar bool) {

	xTabArraySetPositionsInPixels(x.GoPointer(), PositionsInPixelsVar)

}

var xTabArraySetTab func(uintptr, int, TabAlign, int)

// Sets the alignment and location of a tab stop.
func (x *TabArray) SetTab(TabIndexVar int, AlignmentVar TabAlign, LocationVar int) {

	xTabArraySetTab(x.GoPointer(), TabIndexVar, AlignmentVar, LocationVar)

}

var xTabArraySort func(uintptr)

// Utility function to ensure that the tab stops are in increasing order.
func (x *TabArray) Sort() {

	xTabArraySort(x.GoPointer())

}

var xTabArrayToString func(uintptr) string

// Serializes a `PangoTabArray` to a string.
//
// No guarantees are made about the format of the string,
// it may change between Pango versions.
//
// The intended use of this function is testing and
// debugging. The format is not meant as a permanent
// storage format.
func (x *TabArray) ToString() string {

	cret := xTabArrayToString(x.GoPointer())
	return cret
}

// `PangoTabAlign` specifies where the text appears relative to the tab stop
// position.
//
// Support for tab alignments other than %PANGO_TAB_LEFT was added
// in Pango 1.50.
type TabAlign int

var xTabAlignGLibType func() types.GType

func TabAlignGLibType() types.GType {
	return xTabAlignGLibType()
}

const (

	// the text appears to the right of the tab stop position
	TabLeftValue TabAlign = 0
	// the text appears to the left of the tab stop position
	//   until the available space is filled
	TabRightValue TabAlign = 1
	// the text is centered at the tab stop position
	//   until the available space is filled
	TabCenterValue TabAlign = 2
	// text before the first occurrence of the decimal point
	//   character appears to the left of the tab stop position (until the available
	//   space is filled), the rest to the right
	TabDecimalValue TabAlign = 3
)

var xTabArrayFromString func(string) *TabArray

// Deserializes a `PangoTabArray` from a string.
//
// This is the counterpart to [method@Pango.TabArray.to_string].
// See that functions for details about the format.
func TabArrayFromString(TextVar string) *TabArray {

	cret := xTabArrayFromString(TextVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xTabAlignGLibType, lib, "pango_tab_align_get_type")

	core.PuregoSafeRegister(&xTabArrayFromString, lib, "pango_tab_array_from_string")

	core.PuregoSafeRegister(&xTabArrayGLibType, lib, "pango_tab_array_get_type")

	core.PuregoSafeRegister(&xNewTabArray, lib, "pango_tab_array_new")
	core.PuregoSafeRegister(&xNewTabArrayWithPositions, lib, "pango_tab_array_new_with_positions")

	core.PuregoSafeRegister(&xTabArrayCopy, lib, "pango_tab_array_copy")
	core.PuregoSafeRegister(&xTabArrayFree, lib, "pango_tab_array_free")
	core.PuregoSafeRegister(&xTabArrayGetDecimalPoint, lib, "pango_tab_array_get_decimal_point")
	core.PuregoSafeRegister(&xTabArrayGetPositionsInPixels, lib, "pango_tab_array_get_positions_in_pixels")
	core.PuregoSafeRegister(&xTabArrayGetSize, lib, "pango_tab_array_get_size")
	core.PuregoSafeRegister(&xTabArrayGetTab, lib, "pango_tab_array_get_tab")
	core.PuregoSafeRegister(&xTabArrayGetTabs, lib, "pango_tab_array_get_tabs")
	core.PuregoSafeRegister(&xTabArrayResize, lib, "pango_tab_array_resize")
	core.PuregoSafeRegister(&xTabArraySetDecimalPoint, lib, "pango_tab_array_set_decimal_point")
	core.PuregoSafeRegister(&xTabArraySetPositionsInPixels, lib, "pango_tab_array_set_positions_in_pixels")
	core.PuregoSafeRegister(&xTabArraySetTab, lib, "pango_tab_array_set_tab")
	core.PuregoSafeRegister(&xTabArraySort, lib, "pango_tab_array_sort")
	core.PuregoSafeRegister(&xTabArrayToString, lib, "pango_tab_array_to_string")

}
