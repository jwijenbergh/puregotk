// Package pango was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package pango

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type FontClass struct {
	ParentClass uintptr
}

func (x *FontClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A `PangoFontDescription` describes a font in an implementation-independent
// manner.
//
// `PangoFontDescription` structures are used both to list what fonts are
// available on the system and also for specifying the characteristics of
// a font to load.
type FontDescription struct {
}

func (x *FontDescription) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xNewFontDescription func() *FontDescription

// Creates a new font description structure with all fields unset.
func NewFontDescription() *FontDescription {

	cret := xNewFontDescription()
	return cret
}

var xFontDescriptionBetterMatch func(uintptr, *FontDescription, *FontDescription) bool

// Determines if the style attributes of @new_match are a closer match
// for @desc than those of @old_match are, or if @old_match is %NULL,
// determines if @new_match is a match at all.
//
// Approximate matching is done for weight and style; other style attributes
// must match exactly. Style attributes are all attributes other than family
// and size-related attributes. Approximate matching for style considers
// %PANGO_STYLE_OBLIQUE and %PANGO_STYLE_ITALIC as matches, but not as good
// a match as when the styles are equal.
//
// Note that @old_match must match @desc.
func (x *FontDescription) BetterMatch(OldMatchVar *FontDescription, NewMatchVar *FontDescription) bool {

	cret := xFontDescriptionBetterMatch(x.GoPointer(), OldMatchVar, NewMatchVar)
	return cret
}

var xFontDescriptionCopy func(uintptr) *FontDescription

// Make a copy of a `PangoFontDescription`.
func (x *FontDescription) Copy() *FontDescription {

	cret := xFontDescriptionCopy(x.GoPointer())
	return cret
}

var xFontDescriptionCopyStatic func(uintptr) *FontDescription

// Make a copy of a `PangoFontDescription`, but don't duplicate
// allocated fields.
//
// This is like [method@Pango.FontDescription.copy], but only a shallow
// copy is made of the family name and other allocated fields. The result
// can only be used until @desc is modified or freed. This is meant
// to be used when the copy is only needed temporarily.
func (x *FontDescription) CopyStatic() *FontDescription {

	cret := xFontDescriptionCopyStatic(x.GoPointer())
	return cret
}

var xFontDescriptionEqual func(uintptr, *FontDescription) bool

// Compares two font descriptions for equality.
//
// Two font descriptions are considered equal if the fonts they describe
// are provably identical. This means that their masks do not have to match,
// as long as other fields are all the same. (Two font descriptions may
// result in identical fonts being loaded, but still compare %FALSE.)
func (x *FontDescription) Equal(Desc2Var *FontDescription) bool {

	cret := xFontDescriptionEqual(x.GoPointer(), Desc2Var)
	return cret
}

var xFontDescriptionFree func(uintptr)

// Frees a font description.
func (x *FontDescription) Free() {

	xFontDescriptionFree(x.GoPointer())

}

var xFontDescriptionGetFamily func(uintptr) string

// Gets the family name field of a font description.
//
// See [method@Pango.FontDescription.set_family].
func (x *FontDescription) GetFamily() string {

	cret := xFontDescriptionGetFamily(x.GoPointer())
	return cret
}

var xFontDescriptionGetGravity func(uintptr) Gravity

// Gets the gravity field of a font description.
//
// See [method@Pango.FontDescription.set_gravity].
func (x *FontDescription) GetGravity() Gravity {

	cret := xFontDescriptionGetGravity(x.GoPointer())
	return cret
}

var xFontDescriptionGetSetFields func(uintptr) FontMask

// Determines which fields in a font description have been set.
func (x *FontDescription) GetSetFields() FontMask {

	cret := xFontDescriptionGetSetFields(x.GoPointer())
	return cret
}

var xFontDescriptionGetSize func(uintptr) int

// Gets the size field of a font description.
//
// See [method@Pango.FontDescription.set_size].
func (x *FontDescription) GetSize() int {

	cret := xFontDescriptionGetSize(x.GoPointer())
	return cret
}

var xFontDescriptionGetSizeIsAbsolute func(uintptr) bool

// Determines whether the size of the font is in points (not absolute)
// or device units (absolute).
//
// See [method@Pango.FontDescription.set_size]
// and [method@Pango.FontDescription.set_absolute_size].
func (x *FontDescription) GetSizeIsAbsolute() bool {

	cret := xFontDescriptionGetSizeIsAbsolute(x.GoPointer())
	return cret
}

var xFontDescriptionGetStretch func(uintptr) Stretch

// Gets the stretch field of a font description.
//
// See [method@Pango.FontDescription.set_stretch].
func (x *FontDescription) GetStretch() Stretch {

	cret := xFontDescriptionGetStretch(x.GoPointer())
	return cret
}

var xFontDescriptionGetStyle func(uintptr) Style

// Gets the style field of a `PangoFontDescription`.
//
// See [method@Pango.FontDescription.set_style].
func (x *FontDescription) GetStyle() Style {

	cret := xFontDescriptionGetStyle(x.GoPointer())
	return cret
}

var xFontDescriptionGetVariant func(uintptr) Variant

// Gets the variant field of a `PangoFontDescription`.
//
// See [method@Pango.FontDescription.set_variant].
func (x *FontDescription) GetVariant() Variant {

	cret := xFontDescriptionGetVariant(x.GoPointer())
	return cret
}

var xFontDescriptionGetVariations func(uintptr) string

// Gets the variations field of a font description.
//
// See [method@Pango.FontDescription.set_variations].
func (x *FontDescription) GetVariations() string {

	cret := xFontDescriptionGetVariations(x.GoPointer())
	return cret
}

var xFontDescriptionGetWeight func(uintptr) Weight

// Gets the weight field of a font description.
//
// See [method@Pango.FontDescription.set_weight].
func (x *FontDescription) GetWeight() Weight {

	cret := xFontDescriptionGetWeight(x.GoPointer())
	return cret
}

var xFontDescriptionHash func(uintptr) uint

// Computes a hash of a `PangoFontDescription` structure.
//
// This is suitable to be used, for example, as an argument
// to g_hash_table_new(). The hash value is independent of @desc-&gt;mask.
func (x *FontDescription) Hash() uint {

	cret := xFontDescriptionHash(x.GoPointer())
	return cret
}

var xFontDescriptionMerge func(uintptr, *FontDescription, bool)

// Merges the fields that are set in @desc_to_merge into the fields in
// @desc.
//
// If @replace_existing is %FALSE, only fields in @desc that
// are not already set are affected. If %TRUE, then fields that are
// already set will be replaced as well.
//
// If @desc_to_merge is %NULL, this function performs nothing.
func (x *FontDescription) Merge(DescToMergeVar *FontDescription, ReplaceExistingVar bool) {

	xFontDescriptionMerge(x.GoPointer(), DescToMergeVar, ReplaceExistingVar)

}

var xFontDescriptionMergeStatic func(uintptr, *FontDescription, bool)

// Merges the fields that are set in @desc_to_merge into the fields in
// @desc, without copying allocated fields.
//
// This is like [method@Pango.FontDescription.merge], but only a shallow copy
// is made of the family name and other allocated fields. @desc can only
// be used until @desc_to_merge is modified or freed. This is meant to
// be used when the merged font description is only needed temporarily.
func (x *FontDescription) MergeStatic(DescToMergeVar *FontDescription, ReplaceExistingVar bool) {

	xFontDescriptionMergeStatic(x.GoPointer(), DescToMergeVar, ReplaceExistingVar)

}

var xFontDescriptionSetAbsoluteSize func(uintptr, float64)

// Sets the size field of a font description, in device units.
//
// This is mutually exclusive with [method@Pango.FontDescription.set_size]
// which sets the font size in points.
func (x *FontDescription) SetAbsoluteSize(SizeVar float64) {

	xFontDescriptionSetAbsoluteSize(x.GoPointer(), SizeVar)

}

var xFontDescriptionSetFamily func(uintptr, string)

// Sets the family name field of a font description.
//
// The family
// name represents a family of related font styles, and will
// resolve to a particular `PangoFontFamily`. In some uses of
// `PangoFontDescription`, it is also possible to use a comma
// separated list of family names for this field.
func (x *FontDescription) SetFamily(FamilyVar string) {

	xFontDescriptionSetFamily(x.GoPointer(), FamilyVar)

}

var xFontDescriptionSetFamilyStatic func(uintptr, string)

// Sets the family name field of a font description, without copying the string.
//
// This is like [method@Pango.FontDescription.set_family], except that no
// copy of @family is made. The caller must make sure that the
// string passed in stays around until @desc has been freed or the
// name is set again. This function can be used if @family is a static
// string such as a C string literal, or if @desc is only needed temporarily.
func (x *FontDescription) SetFamilyStatic(FamilyVar string) {

	xFontDescriptionSetFamilyStatic(x.GoPointer(), FamilyVar)

}

var xFontDescriptionSetGravity func(uintptr, Gravity)

// Sets the gravity field of a font description.
//
// The gravity field
// specifies how the glyphs should be rotated. If @gravity is
// %PANGO_GRAVITY_AUTO, this actually unsets the gravity mask on
// the font description.
//
// This function is seldom useful to the user. Gravity should normally
// be set on a `PangoContext`.
func (x *FontDescription) SetGravity(GravityVar Gravity) {

	xFontDescriptionSetGravity(x.GoPointer(), GravityVar)

}

var xFontDescriptionSetSize func(uintptr, int)

// Sets the size field of a font description in fractional points.
//
// This is mutually exclusive with
// [method@Pango.FontDescription.set_absolute_size].
func (x *FontDescription) SetSize(SizeVar int) {

	xFontDescriptionSetSize(x.GoPointer(), SizeVar)

}

var xFontDescriptionSetStretch func(uintptr, Stretch)

// Sets the stretch field of a font description.
//
// The [enum@Pango.Stretch] field specifies how narrow or
// wide the font should be.
func (x *FontDescription) SetStretch(StretchVar Stretch) {

	xFontDescriptionSetStretch(x.GoPointer(), StretchVar)

}

var xFontDescriptionSetStyle func(uintptr, Style)

// Sets the style field of a `PangoFontDescription`.
//
// The [enum@Pango.Style] enumeration describes whether the font is
// slanted and the manner in which it is slanted; it can be either
// %PANGO_STYLE_NORMAL, %PANGO_STYLE_ITALIC, or %PANGO_STYLE_OBLIQUE.
//
// Most fonts will either have a italic style or an oblique style,
// but not both, and font matching in Pango will match italic
// specifications with oblique fonts and vice-versa if an exact
// match is not found.
func (x *FontDescription) SetStyle(StyleVar Style) {

	xFontDescriptionSetStyle(x.GoPointer(), StyleVar)

}

var xFontDescriptionSetVariant func(uintptr, Variant)

// Sets the variant field of a font description.
//
// The [enum@Pango.Variant] can either be %PANGO_VARIANT_NORMAL
// or %PANGO_VARIANT_SMALL_CAPS.
func (x *FontDescription) SetVariant(VariantVar Variant) {

	xFontDescriptionSetVariant(x.GoPointer(), VariantVar)

}

var xFontDescriptionSetVariations func(uintptr, string)

// Sets the variations field of a font description.
//
// OpenType font variations allow to select a font instance by
// specifying values for a number of axes, such as width or weight.
//
// The format of the variations string is
//
//	AXIS1=VALUE,AXIS2=VALUE...
//
// with each AXIS a 4 character tag that identifies a font axis,
// and each VALUE a floating point number. Unknown axes are ignored,
// and values are clamped to their allowed range.
//
// Pango does not currently have a way to find supported axes of
// a font. Both harfbuzz and freetype have API for this. See
// for example [hb_ot_var_get_axis_infos](https://harfbuzz.github.io/harfbuzz-hb-ot-var.html#hb-ot-var-get-axis-infos).
func (x *FontDescription) SetVariations(VariationsVar string) {

	xFontDescriptionSetVariations(x.GoPointer(), VariationsVar)

}

var xFontDescriptionSetVariationsStatic func(uintptr, string)

// Sets the variations field of a font description.
//
// This is like [method@Pango.FontDescription.set_variations], except
// that no copy of @variations is made. The caller must make sure that
// the string passed in stays around until @desc has been freed
// or the name is set again. This function can be used if
// @variations is a static string such as a C string literal,
// or if @desc is only needed temporarily.
func (x *FontDescription) SetVariationsStatic(VariationsVar string) {

	xFontDescriptionSetVariationsStatic(x.GoPointer(), VariationsVar)

}

var xFontDescriptionSetWeight func(uintptr, Weight)

// Sets the weight field of a font description.
//
// The weight field
// specifies how bold or light the font should be. In addition
// to the values of the [enum@Pango.Weight] enumeration, other
// intermediate numeric values are possible.
func (x *FontDescription) SetWeight(WeightVar Weight) {

	xFontDescriptionSetWeight(x.GoPointer(), WeightVar)

}

var xFontDescriptionToFilename func(uintptr) string

// Creates a filename representation of a font description.
//
// The filename is identical to the result from calling
// [method@Pango.FontDescription.to_string], but with underscores
// instead of characters that are untypical in filenames, and in
// lower case only.
func (x *FontDescription) ToFilename() string {

	cret := xFontDescriptionToFilename(x.GoPointer())
	return cret
}

var xFontDescriptionToString func(uintptr) string

// Creates a string representation of a font description.
//
// See [func@Pango.FontDescription.from_string] for a description
// of the format of the string representation. The family list in
// the string description will only have a terminating comma if
// the last word of the list is a valid style option.
func (x *FontDescription) ToString() string {

	cret := xFontDescriptionToString(x.GoPointer())
	return cret
}

var xFontDescriptionUnsetFields func(uintptr, FontMask)

// Unsets some of the fields in a `PangoFontDescription`.
//
// The unset fields will get back to their default values.
func (x *FontDescription) UnsetFields(ToUnsetVar FontMask) {

	xFontDescriptionUnsetFields(x.GoPointer(), ToUnsetVar)

}

type FontFaceClass struct {
	ParentClass uintptr
}

func (x *FontFaceClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

type FontFamilyClass struct {
	ParentClass uintptr
}

func (x *FontFamilyClass) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

// A `PangoFontMetrics` structure holds the overall metric information
// for a font.
//
// The information in a `PangoFontMetrics` structure may be restricted
// to a script. The fields of this structure are private to implementations
// of a font backend. See the documentation of the corresponding getters
// for documentation of their meaning.
//
// For an overview of the most important metrics, see:
//
// &lt;picture&gt;
//
//	&lt;source srcset="fontmetrics-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img alt="Font metrics" src="fontmetrics-light.png"&gt;
//
// &lt;/picture&gt;
type FontMetrics struct {
	RefCount uint

	Ascent int

	Descent int

	Height int

	ApproximateCharWidth int

	ApproximateDigitWidth int

	UnderlinePosition int

	UnderlineThickness int

	StrikethroughPosition int

	StrikethroughThickness int
}

func (x *FontMetrics) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xFontMetricsGetApproximateCharWidth func(uintptr) int

// Gets the approximate character width for a font metrics structure.
//
// This is merely a representative value useful, for example, for
// determining the initial size for a window. Actual characters in
// text will be wider and narrower than this.
func (x *FontMetrics) GetApproximateCharWidth() int {

	cret := xFontMetricsGetApproximateCharWidth(x.GoPointer())
	return cret
}

var xFontMetricsGetApproximateDigitWidth func(uintptr) int

// Gets the approximate digit width for a font metrics structure.
//
// This is merely a representative value useful, for example, for
// determining the initial size for a window. Actual digits in
// text can be wider or narrower than this, though this value
// is generally somewhat more accurate than the result of
// pango_font_metrics_get_approximate_char_width() for digits.
func (x *FontMetrics) GetApproximateDigitWidth() int {

	cret := xFontMetricsGetApproximateDigitWidth(x.GoPointer())
	return cret
}

var xFontMetricsGetAscent func(uintptr) int

// Gets the ascent from a font metrics structure.
//
// The ascent is the distance from the baseline to the logical top
// of a line of text. (The logical top may be above or below the top
// of the actual drawn ink. It is necessary to lay out the text to
// figure where the ink will be.)
func (x *FontMetrics) GetAscent() int {

	cret := xFontMetricsGetAscent(x.GoPointer())
	return cret
}

var xFontMetricsGetDescent func(uintptr) int

// Gets the descent from a font metrics structure.
//
// The descent is the distance from the baseline to the logical bottom
// of a line of text. (The logical bottom may be above or below the
// bottom of the actual drawn ink. It is necessary to lay out the text
// to figure where the ink will be.)
func (x *FontMetrics) GetDescent() int {

	cret := xFontMetricsGetDescent(x.GoPointer())
	return cret
}

var xFontMetricsGetHeight func(uintptr) int

// Gets the line height from a font metrics structure.
//
// The line height is the recommended distance between successive
// baselines in wrapped text using this font.
//
// If the line height is not available, 0 is returned.
func (x *FontMetrics) GetHeight() int {

	cret := xFontMetricsGetHeight(x.GoPointer())
	return cret
}

var xFontMetricsGetStrikethroughPosition func(uintptr) int

// Gets the suggested position to draw the strikethrough.
//
// The value returned is the distance *above* the
// baseline of the top of the strikethrough.
func (x *FontMetrics) GetStrikethroughPosition() int {

	cret := xFontMetricsGetStrikethroughPosition(x.GoPointer())
	return cret
}

var xFontMetricsGetStrikethroughThickness func(uintptr) int

// Gets the suggested thickness to draw for the strikethrough.
func (x *FontMetrics) GetStrikethroughThickness() int {

	cret := xFontMetricsGetStrikethroughThickness(x.GoPointer())
	return cret
}

var xFontMetricsGetUnderlinePosition func(uintptr) int

// Gets the suggested position to draw the underline.
//
// The value returned is the distance *above* the baseline of the top
// of the underline. Since most fonts have underline positions beneath
// the baseline, this value is typically negative.
func (x *FontMetrics) GetUnderlinePosition() int {

	cret := xFontMetricsGetUnderlinePosition(x.GoPointer())
	return cret
}

var xFontMetricsGetUnderlineThickness func(uintptr) int

// Gets the suggested thickness to draw for the underline.
func (x *FontMetrics) GetUnderlineThickness() int {

	cret := xFontMetricsGetUnderlineThickness(x.GoPointer())
	return cret
}

var xFontMetricsRef func(uintptr) *FontMetrics

// Increase the reference count of a font metrics structure by one.
func (x *FontMetrics) Ref() *FontMetrics {

	cret := xFontMetricsRef(x.GoPointer())
	return cret
}

var xFontMetricsUnref func(uintptr)

// Decrease the reference count of a font metrics structure by one.
//
// If the result is zero, frees the structure and any associated memory.
func (x *FontMetrics) Unref() {

	xFontMetricsUnref(x.GoPointer())

}

const (
	// A `PangoGlyph` value that indicates a zero-width empty glpyh.
	//
	// This is useful for example in shaper modules, to use as the glyph for
	// various zero-width Unicode characters (those passing [func@is_zero_width]).
	GLYPH_EMPTY Glyph = 268435455
	// A `PangoGlyph` value for invalid input.
	//
	// `PangoLayout` produces one such glyph per invalid input UTF-8 byte and such
	// a glyph is rendered as a crossed box.
	//
	// Note that this value is defined such that it has the %PANGO_GLYPH_UNKNOWN_FLAG
	// set.
	GLYPH_INVALID_INPUT Glyph = 4294967295
	// Flag used in `PangoGlyph` to turn a `gunichar` value of a valid Unicode
	// character into an unknown-character glyph for that `gunichar`.
	//
	// Such unknown-character glyphs may be rendered as a 'hex box'.
	GLYPH_UNKNOWN_FLAG Glyph = 268435456
)

// The bits in a `PangoFontMask` correspond to the set fields in a
// `PangoFontDescription`.
type FontMask int

const (

	// the font family is specified.
	FontMaskFamilyValue FontMask = 1
	// the font style is specified.
	FontMaskStyleValue FontMask = 2
	// the font variant is specified.
	FontMaskVariantValue FontMask = 4
	// the font weight is specified.
	FontMaskWeightValue FontMask = 8
	// the font stretch is specified.
	FontMaskStretchValue FontMask = 16
	// the font size is specified.
	FontMaskSizeValue FontMask = 32
	// the font gravity is specified (Since: 1.16.)
	FontMaskGravityValue FontMask = 64
	// OpenType font variations are specified (Since: 1.42)
	FontMaskVariationsValue FontMask = 128
)

// An enumeration specifying the width of the font relative to other designs
// within a family.
type Stretch int

const (

	// ultra condensed width
	StretchUltraCondensedValue Stretch = 0
	// extra condensed width
	StretchExtraCondensedValue Stretch = 1
	// condensed width
	StretchCondensedValue Stretch = 2
	// semi condensed width
	StretchSemiCondensedValue Stretch = 3
	// the normal width
	StretchNormalValue Stretch = 4
	// semi expanded width
	StretchSemiExpandedValue Stretch = 5
	// expanded width
	StretchExpandedValue Stretch = 6
	// extra expanded width
	StretchExtraExpandedValue Stretch = 7
	// ultra expanded width
	StretchUltraExpandedValue Stretch = 8
)

// An enumeration specifying the various slant styles possible for a font.
type Style int

const (

	// the font is upright.
	StyleNormalValue Style = 0
	// the font is slanted, but in a roman style.
	StyleObliqueValue Style = 1
	// the font is slanted in an italic style.
	StyleItalicValue Style = 2
)

// An enumeration specifying capitalization variant of the font.
//
// Values other than `PANGO_VARIANT_NORMAL` and `PANGO_VARIANT_SMALL_CAPS` are
// available since 1.50.
type Variant int

const (

	// A normal font.
	VariantNormalValue Variant = 0
	// A font with the lower case characters
	//   replaced by smaller variants of the capital characters.
	VariantSmallCapsValue Variant = 1
	// A font with all characters
	//   replaced by smaller variants of the capital characters.
	VariantAllSmallCapsValue Variant = 2
	// A font with the lower case characters
	//   replaced by smaller variants of the capital characters.
	//   Petite Caps can be even smaller than Small Caps.
	VariantPetiteCapsValue Variant = 3
	// A font with all characters
	//   replaced by smaller variants of the capital characters.
	//   Petite Caps can be even smaller than Small Caps.
	VariantAllPetiteCapsValue Variant = 4
	// A font with the upper case characters
	//   replaced by smaller variants of the capital letters.
	VariantUnicaseValue Variant = 5
	// A font with capital letters that
	//   are more suitable for all-uppercase titles.
	VariantTitleCapsValue Variant = 6
)

// An enumeration specifying the weight (boldness) of a font.
//
// Weight is specified as a numeric value ranging from 100 to 1000.
// This enumeration simply provides some common, predefined values.
type Weight int

const (

	// the thin weight (= 100) Since: 1.24
	WeightThinValue Weight = 100
	// the ultralight weight (= 200)
	WeightUltralightValue Weight = 200
	// the light weight (= 300)
	WeightLightValue Weight = 300
	// the semilight weight (= 350) Since: 1.36.7
	WeightSemilightValue Weight = 350
	// the book weight (= 380) Since: 1.24)
	WeightBookValue Weight = 380
	// the default weight (= 400)
	WeightNormalValue Weight = 400
	// the normal weight (= 500) Since: 1.24
	WeightMediumValue Weight = 500
	// the semibold weight (= 600)
	WeightSemiboldValue Weight = 600
	// the bold weight (= 700)
	WeightBoldValue Weight = 700
	// the ultrabold weight (= 800)
	WeightUltraboldValue Weight = 800
	// the heavy weight (= 900)
	WeightHeavyValue Weight = 900
	// the ultraheavy weight (= 1000) Since: 1.24
	WeightUltraheavyValue Weight = 1000
)

var xFontDescriptionFromString func(string) *FontDescription

// Creates a new font description from a string representation.
//
// The string must have the form
//
//	"\[FAMILY-LIST] \[STYLE-OPTIONS] \[SIZE] \[VARIATIONS]",
//
// where FAMILY-LIST is a comma-separated list of families optionally
// terminated by a comma, STYLE_OPTIONS is a whitespace-separated list
// of words where each word describes one of style, variant, weight,
// stretch, or gravity, and SIZE is a decimal number (size in points)
// or optionally followed by the unit modifier "px" for absolute size.
// VARIATIONS is a comma-separated list of font variation
// specifications of the form "\@axis=value" (the = sign is optional).
//
// The following words are understood as styles:
// "Normal", "Roman", "Oblique", "Italic".
//
// The following words are understood as variants:
// "Small-Caps", "All-Small-Caps", "Petite-Caps", "All-Petite-Caps",
// "Unicase", "Title-Caps".
//
// The following words are understood as weights:
// "Thin", "Ultra-Light", "Extra-Light", "Light", "Semi-Light",
// "Demi-Light", "Book", "Regular", "Medium", "Semi-Bold", "Demi-Bold",
// "Bold", "Ultra-Bold", "Extra-Bold", "Heavy", "Black", "Ultra-Black",
// "Extra-Black".
//
// The following words are understood as stretch values:
// "Ultra-Condensed", "Extra-Condensed", "Condensed", "Semi-Condensed",
// "Semi-Expanded", "Expanded", "Extra-Expanded", "Ultra-Expanded".
//
// The following words are understood as gravity values:
// "Not-Rotated", "South", "Upside-Down", "North", "Rotated-Left",
// "East", "Rotated-Right", "West".
//
// Any one of the options may be absent. If FAMILY-LIST is absent, then
// the family_name field of the resulting font description will be
// initialized to %NULL. If STYLE-OPTIONS is missing, then all style
// options will be set to the default values. If SIZE is missing, the
// size in the resulting font description will be set to 0.
//
// A typical example:
//
//	"Cantarell Italic Light 15 \@wght=200"
func FontDescriptionFromString(StrVar string) *FontDescription {

	cret := xFontDescriptionFromString(StrVar)
	return cret
}

// A `PangoFont` is used to represent a font in a
// rendering-system-independent manner.
type Font struct {
	gobject.Object
}

func FontNewFromInternalPtr(ptr uintptr) *Font {
	cls := &Font{}
	cls.Ptr = ptr
	return cls
}

var xFontDescribe func(uintptr) *FontDescription

// Returns a description of the font, with font size set in points.
//
// Use [method@Pango.Font.describe_with_absolute_size] if you want
// the font size in device units.
func (x *Font) Describe() *FontDescription {

	cret := xFontDescribe(x.GoPointer())
	return cret
}

var xFontDescribeWithAbsoluteSize func(uintptr) *FontDescription

// Returns a description of the font, with absolute font size set
// in device units.
//
// Use [method@Pango.Font.describe] if you want the font size in points.
func (x *Font) DescribeWithAbsoluteSize() *FontDescription {

	cret := xFontDescribeWithAbsoluteSize(x.GoPointer())
	return cret
}

var xFontGetCoverage func(uintptr, *Language) uintptr

// Computes the coverage map for a given font and language tag.
func (x *Font) GetCoverage(LanguageVar *Language) *Coverage {
	var cls *Coverage

	cret := xFontGetCoverage(x.GoPointer(), LanguageVar)

	if cret == 0 {
		return nil
	}
	cls = &Coverage{}
	cls.Ptr = cret
	return cls
}

var xFontGetFace func(uintptr) uintptr

// Gets the `PangoFontFace` to which @font belongs.
func (x *Font) GetFace() *FontFace {
	var cls *FontFace

	cret := xFontGetFace(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &FontFace{}
	cls.Ptr = cret
	return cls
}

var xFontGetFeatures func(uintptr, []uintptr, uint, uint)

// Obtain the OpenType features that are provided by the font.
//
// These are passed to the rendering system, together with features
// that have been explicitly set via attributes.
//
// Note that this does not include OpenType features which the
// rendering system enables by default.
func (x *Font) GetFeatures(FeaturesVar []uintptr, LenVar uint, NumFeaturesVar uint) {

	xFontGetFeatures(x.GoPointer(), FeaturesVar, LenVar, NumFeaturesVar)

}

var xFontGetFontMap func(uintptr) uintptr

// Gets the font map for which the font was created.
//
// Note that the font maintains a *weak* reference to
// the font map, so if all references to font map are
// dropped, the font map will be finalized even if there
// are fonts created with the font map that are still alive.
// In that case this function will return %NULL.
//
// It is the responsibility of the user to ensure that the
// font map is kept alive. In most uses this is not an issue
// as a `PangoContext` holds a reference to the font map.
func (x *Font) GetFontMap() *FontMap {
	var cls *FontMap

	cret := xFontGetFontMap(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &FontMap{}
	cls.Ptr = cret
	return cls
}

var xFontGetGlyphExtents func(uintptr, Glyph, *Rectangle, *Rectangle)

// Gets the logical and ink extents of a glyph within a font.
//
// The coordinate system for each rectangle has its origin at the
// base line and horizontal origin of the character with increasing
// coordinates extending to the right and down. The macros PANGO_ASCENT(),
// PANGO_DESCENT(), PANGO_LBEARING(), and PANGO_RBEARING() can be used to convert
// from the extents rectangle to more traditional font metrics. The units
// of the rectangles are in 1/PANGO_SCALE of a device unit.
//
// If @font is %NULL, this function gracefully sets some sane values in the
// output variables and returns.
func (x *Font) GetGlyphExtents(GlyphVar Glyph, InkRectVar *Rectangle, LogicalRectVar *Rectangle) {

	xFontGetGlyphExtents(x.GoPointer(), GlyphVar, InkRectVar, LogicalRectVar)

}

var xFontGetHbFont func(uintptr) uintptr

// Get a `hb_font_t` object backing this font.
//
// Note that the objects returned by this function are cached
// and immutable. If you need to make changes to the `hb_font_t`,
// use [hb_font_create_sub_font()](https://harfbuzz.github.io/harfbuzz-hb-font.html#hb-font-create-sub-font).
func (x *Font) GetHbFont() uintptr {

	cret := xFontGetHbFont(x.GoPointer())
	return cret
}

var xFontGetLanguages func(uintptr) []Language

// Returns the languages that are supported by @font.
//
// If the font backend does not provide this information,
// %NULL is returned. For the fontconfig backend, this
// corresponds to the FC_LANG member of the FcPattern.
//
// The returned array is only valid as long as the font
// and its fontmap are valid.
func (x *Font) GetLanguages() []Language {

	cret := xFontGetLanguages(x.GoPointer())
	return cret
}

var xFontGetMetrics func(uintptr, *Language) *FontMetrics

// Gets overall metric information for a font.
//
// Since the metrics may be substantially different for different scripts,
// a language tag can be provided to indicate that the metrics should be
// retrieved that correspond to the script(s) used by that language.
//
// If @font is %NULL, this function gracefully sets some sane values in the
// output variables and returns.
func (x *Font) GetMetrics(LanguageVar *Language) *FontMetrics {

	cret := xFontGetMetrics(x.GoPointer(), LanguageVar)
	return cret
}

var xFontHasChar func(uintptr, uint32) bool

// Returns whether the font provides a glyph for this character.
//
// Returns %TRUE if @font can render @wc
func (x *Font) HasChar(WcVar uint32) bool {

	cret := xFontHasChar(x.GoPointer(), WcVar)
	return cret
}

var xFontSerialize func(uintptr) *glib.Bytes

// Serializes the @font in a way that can be uniquely identified.
//
// There are no guarantees about the format of the output across different
// versions of Pango.
//
// The intended use of this function is testing, benchmarking and debugging.
// The format is not meant as a permanent storage format.
//
// To recreate a font from its serialized form, use [func@Pango.Font.deserialize].
func (x *Font) Serialize() *glib.Bytes {

	cret := xFontSerialize(x.GoPointer())
	return cret
}

func (c *Font) GoPointer() uintptr {
	return c.Ptr
}

func (c *Font) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

var xFontDescriptionsFree func(uintptr, int)

// Frees an array of font descriptions.
func FontDescriptionsFree(DescsVar uintptr, NDescsVar int) {

	xFontDescriptionsFree(DescsVar, NDescsVar)

}

var xFontDeserialize func(uintptr, *glib.Bytes, **glib.Error) uintptr

// Loads data previously created via [method@Pango.Font.serialize].
//
// For a discussion of the supported format, see that function.
//
// Note: to verify that the returned font is identical to
// the one that was serialized, you can compare @bytes to the
// result of serializing the font again.
func FontDeserialize(ContextVar *Context, BytesVar *glib.Bytes) (*Font, error) {
	var cls *Font
	var cerr *glib.Error

	cret := xFontDeserialize(ContextVar.GoPointer(), BytesVar, &cerr)

	if cret == 0 {
		return nil, cerr
	}
	cls = &Font{}
	cls.Ptr = cret
	if cerr == nil {
		return cls, nil
	}
	return cls, cerr

}

// A `PangoFontFace` is used to represent a group of fonts with
// the same family, slant, weight, and width, but varying sizes.
type FontFace struct {
	gobject.Object
}

func FontFaceNewFromInternalPtr(ptr uintptr) *FontFace {
	cls := &FontFace{}
	cls.Ptr = ptr
	return cls
}

var xFontFaceDescribe func(uintptr) *FontDescription

// Returns a font description that matches the face.
//
// The resulting font description will have the family, style,
// variant, weight and stretch of the face, but its size field
// will be unset.
func (x *FontFace) Describe() *FontDescription {

	cret := xFontFaceDescribe(x.GoPointer())
	return cret
}

var xFontFaceGetFaceName func(uintptr) string

// Gets a name representing the style of this face.
//
// The name identifies the face among the different faces
// in the `PangoFontFamily` for the face. It is suitable
// for displaying to users.
func (x *FontFace) GetFaceName() string {

	cret := xFontFaceGetFaceName(x.GoPointer())
	return cret
}

var xFontFaceGetFamily func(uintptr) uintptr

// Gets the `PangoFontFamily` that @face belongs to.
func (x *FontFace) GetFamily() *FontFamily {
	var cls *FontFamily

	cret := xFontFaceGetFamily(x.GoPointer())

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &FontFamily{}
	cls.Ptr = cret
	return cls
}

var xFontFaceIsSynthesized func(uintptr) bool

// Returns whether a `PangoFontFace` is synthesized.
//
// This will be the case if the underlying font rendering engine
// creates this face from another face, by shearing, emboldening,
// lightening or modifying it in some other way.
func (x *FontFace) IsSynthesized() bool {

	cret := xFontFaceIsSynthesized(x.GoPointer())
	return cret
}

var xFontFaceListSizes func(uintptr, []int, int)

// List the available sizes for a font.
//
// This is only applicable to bitmap fonts. For scalable fonts, stores
// %NULL at the location pointed to by @sizes and 0 at the location pointed
// to by @n_sizes. The sizes returned are in Pango units and are sorted
// in ascending order.
func (x *FontFace) ListSizes(SizesVar []int, NSizesVar int) {

	xFontFaceListSizes(x.GoPointer(), SizesVar, NSizesVar)

}

func (c *FontFace) GoPointer() uintptr {
	return c.Ptr
}

func (c *FontFace) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A `PangoFontFamily` is used to represent a family of related
// font faces.
//
// The font faces in a family share a common design, but differ in
// slant, weight, width or other aspects.
type FontFamily struct {
	gobject.Object
}

func FontFamilyNewFromInternalPtr(ptr uintptr) *FontFamily {
	cls := &FontFamily{}
	cls.Ptr = ptr
	return cls
}

var xFontFamilyGetFace func(uintptr, string) uintptr

// Gets the `PangoFontFace` of @family with the given name.
func (x *FontFamily) GetFace(NameVar string) *FontFace {
	var cls *FontFace

	cret := xFontFamilyGetFace(x.GoPointer(), NameVar)

	if cret == 0 {
		return nil
	}
	gobject.IncreaseRef(cret)
	cls = &FontFace{}
	cls.Ptr = cret
	return cls
}

var xFontFamilyGetName func(uintptr) string

// Gets the name of the family.
//
// The name is unique among all fonts for the font backend and can
// be used in a `PangoFontDescription` to specify that a face from
// this family is desired.
func (x *FontFamily) GetName() string {

	cret := xFontFamilyGetName(x.GoPointer())
	return cret
}

var xFontFamilyIsMonospace func(uintptr) bool

// A monospace font is a font designed for text display where the the
// characters form a regular grid.
//
// For Western languages this would
// mean that the advance width of all characters are the same, but
// this categorization also includes Asian fonts which include
// double-width characters: characters that occupy two grid cells.
// g_unichar_iswide() returns a result that indicates whether a
// character is typically double-width in a monospace font.
//
// The best way to find out the grid-cell size is to call
// [method@Pango.FontMetrics.get_approximate_digit_width], since the
// results of [method@Pango.FontMetrics.get_approximate_char_width] may
// be affected by double-width characters.
func (x *FontFamily) IsMonospace() bool {

	cret := xFontFamilyIsMonospace(x.GoPointer())
	return cret
}

var xFontFamilyIsVariable func(uintptr) bool

// A variable font is a font which has axes that can be modified to
// produce different faces.
//
// Such axes are also known as _variations_; see
// [method@Pango.FontDescription.set_variations] for more information.
func (x *FontFamily) IsVariable() bool {

	cret := xFontFamilyIsVariable(x.GoPointer())
	return cret
}

var xFontFamilyListFaces func(uintptr, uintptr, int)

// Lists the different font faces that make up @family.
//
// The faces in a family share a common design, but differ in slant, weight,
// width and other aspects.
func (x *FontFamily) ListFaces(FacesVar uintptr, NFacesVar int) {

	xFontFamilyListFaces(x.GoPointer(), FacesVar, NFacesVar)

}

func (c *FontFamily) GoPointer() uintptr {
	return c.Ptr
}

func (c *FontFamily) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xFontDescriptionFromString, lib, "pango_font_description_from_string")

	core.PuregoSafeRegister(&xNewFontDescription, lib, "pango_font_description_new")

	core.PuregoSafeRegister(&xFontDescriptionBetterMatch, lib, "pango_font_description_better_match")
	core.PuregoSafeRegister(&xFontDescriptionCopy, lib, "pango_font_description_copy")
	core.PuregoSafeRegister(&xFontDescriptionCopyStatic, lib, "pango_font_description_copy_static")
	core.PuregoSafeRegister(&xFontDescriptionEqual, lib, "pango_font_description_equal")
	core.PuregoSafeRegister(&xFontDescriptionFree, lib, "pango_font_description_free")
	core.PuregoSafeRegister(&xFontDescriptionGetFamily, lib, "pango_font_description_get_family")
	core.PuregoSafeRegister(&xFontDescriptionGetGravity, lib, "pango_font_description_get_gravity")
	core.PuregoSafeRegister(&xFontDescriptionGetSetFields, lib, "pango_font_description_get_set_fields")
	core.PuregoSafeRegister(&xFontDescriptionGetSize, lib, "pango_font_description_get_size")
	core.PuregoSafeRegister(&xFontDescriptionGetSizeIsAbsolute, lib, "pango_font_description_get_size_is_absolute")
	core.PuregoSafeRegister(&xFontDescriptionGetStretch, lib, "pango_font_description_get_stretch")
	core.PuregoSafeRegister(&xFontDescriptionGetStyle, lib, "pango_font_description_get_style")
	core.PuregoSafeRegister(&xFontDescriptionGetVariant, lib, "pango_font_description_get_variant")
	core.PuregoSafeRegister(&xFontDescriptionGetVariations, lib, "pango_font_description_get_variations")
	core.PuregoSafeRegister(&xFontDescriptionGetWeight, lib, "pango_font_description_get_weight")
	core.PuregoSafeRegister(&xFontDescriptionHash, lib, "pango_font_description_hash")
	core.PuregoSafeRegister(&xFontDescriptionMerge, lib, "pango_font_description_merge")
	core.PuregoSafeRegister(&xFontDescriptionMergeStatic, lib, "pango_font_description_merge_static")
	core.PuregoSafeRegister(&xFontDescriptionSetAbsoluteSize, lib, "pango_font_description_set_absolute_size")
	core.PuregoSafeRegister(&xFontDescriptionSetFamily, lib, "pango_font_description_set_family")
	core.PuregoSafeRegister(&xFontDescriptionSetFamilyStatic, lib, "pango_font_description_set_family_static")
	core.PuregoSafeRegister(&xFontDescriptionSetGravity, lib, "pango_font_description_set_gravity")
	core.PuregoSafeRegister(&xFontDescriptionSetSize, lib, "pango_font_description_set_size")
	core.PuregoSafeRegister(&xFontDescriptionSetStretch, lib, "pango_font_description_set_stretch")
	core.PuregoSafeRegister(&xFontDescriptionSetStyle, lib, "pango_font_description_set_style")
	core.PuregoSafeRegister(&xFontDescriptionSetVariant, lib, "pango_font_description_set_variant")
	core.PuregoSafeRegister(&xFontDescriptionSetVariations, lib, "pango_font_description_set_variations")
	core.PuregoSafeRegister(&xFontDescriptionSetVariationsStatic, lib, "pango_font_description_set_variations_static")
	core.PuregoSafeRegister(&xFontDescriptionSetWeight, lib, "pango_font_description_set_weight")
	core.PuregoSafeRegister(&xFontDescriptionToFilename, lib, "pango_font_description_to_filename")
	core.PuregoSafeRegister(&xFontDescriptionToString, lib, "pango_font_description_to_string")
	core.PuregoSafeRegister(&xFontDescriptionUnsetFields, lib, "pango_font_description_unset_fields")

	core.PuregoSafeRegister(&xFontMetricsGetApproximateCharWidth, lib, "pango_font_metrics_get_approximate_char_width")
	core.PuregoSafeRegister(&xFontMetricsGetApproximateDigitWidth, lib, "pango_font_metrics_get_approximate_digit_width")
	core.PuregoSafeRegister(&xFontMetricsGetAscent, lib, "pango_font_metrics_get_ascent")
	core.PuregoSafeRegister(&xFontMetricsGetDescent, lib, "pango_font_metrics_get_descent")
	core.PuregoSafeRegister(&xFontMetricsGetHeight, lib, "pango_font_metrics_get_height")
	core.PuregoSafeRegister(&xFontMetricsGetStrikethroughPosition, lib, "pango_font_metrics_get_strikethrough_position")
	core.PuregoSafeRegister(&xFontMetricsGetStrikethroughThickness, lib, "pango_font_metrics_get_strikethrough_thickness")
	core.PuregoSafeRegister(&xFontMetricsGetUnderlinePosition, lib, "pango_font_metrics_get_underline_position")
	core.PuregoSafeRegister(&xFontMetricsGetUnderlineThickness, lib, "pango_font_metrics_get_underline_thickness")
	core.PuregoSafeRegister(&xFontMetricsRef, lib, "pango_font_metrics_ref")
	core.PuregoSafeRegister(&xFontMetricsUnref, lib, "pango_font_metrics_unref")

	core.PuregoSafeRegister(&xFontDescribe, lib, "pango_font_describe")
	core.PuregoSafeRegister(&xFontDescribeWithAbsoluteSize, lib, "pango_font_describe_with_absolute_size")
	core.PuregoSafeRegister(&xFontGetCoverage, lib, "pango_font_get_coverage")
	core.PuregoSafeRegister(&xFontGetFace, lib, "pango_font_get_face")
	core.PuregoSafeRegister(&xFontGetFeatures, lib, "pango_font_get_features")
	core.PuregoSafeRegister(&xFontGetFontMap, lib, "pango_font_get_font_map")
	core.PuregoSafeRegister(&xFontGetGlyphExtents, lib, "pango_font_get_glyph_extents")
	core.PuregoSafeRegister(&xFontGetHbFont, lib, "pango_font_get_hb_font")
	core.PuregoSafeRegister(&xFontGetLanguages, lib, "pango_font_get_languages")
	core.PuregoSafeRegister(&xFontGetMetrics, lib, "pango_font_get_metrics")
	core.PuregoSafeRegister(&xFontHasChar, lib, "pango_font_has_char")
	core.PuregoSafeRegister(&xFontSerialize, lib, "pango_font_serialize")

	core.PuregoSafeRegister(&xFontDescriptionsFree, lib, "pango_font_descriptions_free")
	core.PuregoSafeRegister(&xFontDeserialize, lib, "pango_font_deserialize")

	core.PuregoSafeRegister(&xFontFaceDescribe, lib, "pango_font_face_describe")
	core.PuregoSafeRegister(&xFontFaceGetFaceName, lib, "pango_font_face_get_face_name")
	core.PuregoSafeRegister(&xFontFaceGetFamily, lib, "pango_font_face_get_family")
	core.PuregoSafeRegister(&xFontFaceIsSynthesized, lib, "pango_font_face_is_synthesized")
	core.PuregoSafeRegister(&xFontFaceListSizes, lib, "pango_font_face_list_sizes")

	core.PuregoSafeRegister(&xFontFamilyGetFace, lib, "pango_font_family_get_face")
	core.PuregoSafeRegister(&xFontFamilyGetName, lib, "pango_font_family_get_name")
	core.PuregoSafeRegister(&xFontFamilyIsMonospace, lib, "pango_font_family_is_monospace")
	core.PuregoSafeRegister(&xFontFamilyIsVariable, lib, "pango_font_family_is_variable")
	core.PuregoSafeRegister(&xFontFamilyListFaces, lib, "pango_font_family_list_faces")

}
