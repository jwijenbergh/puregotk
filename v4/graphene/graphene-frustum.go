// Package graphene was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package graphene

import (
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// A 3D volume delimited by 2D clip planes.
//
// The contents of the `graphene_frustum_t` are private, and should not be
// modified directly.
type Frustum struct {
	Planes [6]Plane
}

var xFrustumGLibType func() types.GType

func FrustumGLibType() types.GType {
	return xFrustumGLibType()
}

func (x *Frustum) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xFrustumAlloc func() *Frustum

// Allocates a new #graphene_frustum_t structure.
//
// The contents of the returned structure are undefined.
func FrustumAlloc() *Frustum {

	cret := xFrustumAlloc()
	return cret
}

var xFrustumContainsPoint func(uintptr, *Point3D) bool

// Checks whether a point is inside the volume defined by the given
// #graphene_frustum_t.
func (x *Frustum) ContainsPoint(PointVar *Point3D) bool {

	cret := xFrustumContainsPoint(x.GoPointer(), PointVar)
	return cret
}

var xFrustumEqual func(uintptr, *Frustum) bool

// Checks whether the two given #graphene_frustum_t are equal.
func (x *Frustum) Equal(BVar *Frustum) bool {

	cret := xFrustumEqual(x.GoPointer(), BVar)
	return cret
}

var xFrustumFree func(uintptr)

// Frees the resources allocated by graphene_frustum_alloc().
func (x *Frustum) Free() {

	xFrustumFree(x.GoPointer())

}

var xFrustumGetPlanes func(uintptr, [6]Plane)

// Retrieves the planes that define the given #graphene_frustum_t.
func (x *Frustum) GetPlanes(PlanesVar [6]Plane) {

	xFrustumGetPlanes(x.GoPointer(), PlanesVar)

}

var xFrustumInit func(uintptr, *Plane, *Plane, *Plane, *Plane, *Plane, *Plane) *Frustum

// Initializes the given #graphene_frustum_t using the provided
// clipping planes.
func (x *Frustum) Init(P0Var *Plane, P1Var *Plane, P2Var *Plane, P3Var *Plane, P4Var *Plane, P5Var *Plane) *Frustum {

	cret := xFrustumInit(x.GoPointer(), P0Var, P1Var, P2Var, P3Var, P4Var, P5Var)
	return cret
}

var xFrustumInitFromFrustum func(uintptr, *Frustum) *Frustum

// Initializes the given #graphene_frustum_t using the clipping
// planes of another #graphene_frustum_t.
func (x *Frustum) InitFromFrustum(SrcVar *Frustum) *Frustum {

	cret := xFrustumInitFromFrustum(x.GoPointer(), SrcVar)
	return cret
}

var xFrustumInitFromMatrix func(uintptr, *Matrix) *Frustum

// Initializes a #graphene_frustum_t using the given @matrix.
func (x *Frustum) InitFromMatrix(MatrixVar *Matrix) *Frustum {

	cret := xFrustumInitFromMatrix(x.GoPointer(), MatrixVar)
	return cret
}

var xFrustumIntersectsBox func(uintptr, *Box) bool

// Checks whether the given @box intersects a plane of
// a #graphene_frustum_t.
func (x *Frustum) IntersectsBox(BoxVar *Box) bool {

	cret := xFrustumIntersectsBox(x.GoPointer(), BoxVar)
	return cret
}

var xFrustumIntersectsSphere func(uintptr, *Sphere) bool

// Checks whether the given @sphere intersects a plane of
// a #graphene_frustum_t.
func (x *Frustum) IntersectsSphere(SphereVar *Sphere) bool {

	cret := xFrustumIntersectsSphere(x.GoPointer(), SphereVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xFrustumGLibType, lib, "graphene_frustum_get_type")

	core.PuregoSafeRegister(&xFrustumAlloc, lib, "graphene_frustum_alloc")

	core.PuregoSafeRegister(&xFrustumContainsPoint, lib, "graphene_frustum_contains_point")
	core.PuregoSafeRegister(&xFrustumEqual, lib, "graphene_frustum_equal")
	core.PuregoSafeRegister(&xFrustumFree, lib, "graphene_frustum_free")
	core.PuregoSafeRegister(&xFrustumGetPlanes, lib, "graphene_frustum_get_planes")
	core.PuregoSafeRegister(&xFrustumInit, lib, "graphene_frustum_init")
	core.PuregoSafeRegister(&xFrustumInitFromFrustum, lib, "graphene_frustum_init_from_frustum")
	core.PuregoSafeRegister(&xFrustumInitFromMatrix, lib, "graphene_frustum_init_from_matrix")
	core.PuregoSafeRegister(&xFrustumIntersectsBox, lib, "graphene_frustum_intersects_box")
	core.PuregoSafeRegister(&xFrustumIntersectsSphere, lib, "graphene_frustum_intersects_sphere")

}
