// Package graphene was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package graphene

import (
	"structs"
	"unsafe"

	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject/types"
)

// A quaternion.
//
// The contents of the #graphene_quaternion_t structure are private
// and should never be accessed directly.
type Quaternion struct {
	_ structs.HostLayout

	X float32

	Y float32

	Z float32

	W float32
}

var xQuaternionGLibType func() types.GType

func QuaternionGLibType() types.GType {
	return xQuaternionGLibType()
}

func (x *Quaternion) GoPointer() uintptr {
	return uintptr(unsafe.Pointer(x))
}

var xQuaternionAlloc func() *Quaternion

// Allocates a new #graphene_quaternion_t.
//
// The contents of the returned value are undefined.
func QuaternionAlloc() *Quaternion {

	cret := xQuaternionAlloc()
	return cret
}

var xQuaternionAdd func(uintptr, *Quaternion, *Quaternion)

// Adds two #graphene_quaternion_t @a and @b.
func (x *Quaternion) Add(BVar *Quaternion, ResVar *Quaternion) {

	xQuaternionAdd(x.GoPointer(), BVar, ResVar)

}

var xQuaternionDot func(uintptr, *Quaternion) float32

// Computes the dot product of two #graphene_quaternion_t.
func (x *Quaternion) Dot(BVar *Quaternion) float32 {

	cret := xQuaternionDot(x.GoPointer(), BVar)
	return cret
}

var xQuaternionEqual func(uintptr, *Quaternion) bool

// Checks whether the given quaternions are equal.
func (x *Quaternion) Equal(BVar *Quaternion) bool {

	cret := xQuaternionEqual(x.GoPointer(), BVar)
	return cret
}

var xQuaternionFree func(uintptr)

// Releases the resources allocated by graphene_quaternion_alloc().
func (x *Quaternion) Free() {

	xQuaternionFree(x.GoPointer())

}

var xQuaternionInit func(uintptr, float32, float32, float32, float32) *Quaternion

// Initializes a #graphene_quaternion_t using the given four values.
func (x *Quaternion) Init(XVar float32, YVar float32, ZVar float32, WVar float32) *Quaternion {

	cret := xQuaternionInit(x.GoPointer(), XVar, YVar, ZVar, WVar)
	return cret
}

var xQuaternionInitFromAngleVec3 func(uintptr, float32, *Vec3) *Quaternion

// Initializes a #graphene_quaternion_t using an @angle on a
// specific @axis.
func (x *Quaternion) InitFromAngleVec3(AngleVar float32, AxisVar *Vec3) *Quaternion {

	cret := xQuaternionInitFromAngleVec3(x.GoPointer(), AngleVar, AxisVar)
	return cret
}

var xQuaternionInitFromAngles func(uintptr, float32, float32, float32) *Quaternion

// Initializes a #graphene_quaternion_t using the values of
// the [Euler angles](http://en.wikipedia.org/wiki/Euler_angles)
// on each axis.
//
// See also: graphene_quaternion_init_from_euler()
func (x *Quaternion) InitFromAngles(DegXVar float32, DegYVar float32, DegZVar float32) *Quaternion {

	cret := xQuaternionInitFromAngles(x.GoPointer(), DegXVar, DegYVar, DegZVar)
	return cret
}

var xQuaternionInitFromEuler func(uintptr, *Euler) *Quaternion

// Initializes a #graphene_quaternion_t using the given #graphene_euler_t.
func (x *Quaternion) InitFromEuler(EVar *Euler) *Quaternion {

	cret := xQuaternionInitFromEuler(x.GoPointer(), EVar)
	return cret
}

var xQuaternionInitFromMatrix func(uintptr, *Matrix) *Quaternion

// Initializes a #graphene_quaternion_t using the rotation components
// of a transformation matrix.
func (x *Quaternion) InitFromMatrix(MVar *Matrix) *Quaternion {

	cret := xQuaternionInitFromMatrix(x.GoPointer(), MVar)
	return cret
}

var xQuaternionInitFromQuaternion func(uintptr, *Quaternion) *Quaternion

// Initializes a #graphene_quaternion_t with the values from @src.
func (x *Quaternion) InitFromQuaternion(SrcVar *Quaternion) *Quaternion {

	cret := xQuaternionInitFromQuaternion(x.GoPointer(), SrcVar)
	return cret
}

var xQuaternionInitFromRadians func(uintptr, float32, float32, float32) *Quaternion

// Initializes a #graphene_quaternion_t using the values of
// the [Euler angles](http://en.wikipedia.org/wiki/Euler_angles)
// on each axis.
//
// See also: graphene_quaternion_init_from_euler()
func (x *Quaternion) InitFromRadians(RadXVar float32, RadYVar float32, RadZVar float32) *Quaternion {

	cret := xQuaternionInitFromRadians(x.GoPointer(), RadXVar, RadYVar, RadZVar)
	return cret
}

var xQuaternionInitFromVec4 func(uintptr, *Vec4) *Quaternion

// Initializes a #graphene_quaternion_t with the values from @src.
func (x *Quaternion) InitFromVec4(SrcVar *Vec4) *Quaternion {

	cret := xQuaternionInitFromVec4(x.GoPointer(), SrcVar)
	return cret
}

var xQuaternionInitIdentity func(uintptr) *Quaternion

// Initializes a #graphene_quaternion_t using the identity
// transformation.
func (x *Quaternion) InitIdentity() *Quaternion {

	cret := xQuaternionInitIdentity(x.GoPointer())
	return cret
}

var xQuaternionInvert func(uintptr, *Quaternion)

// Inverts a #graphene_quaternion_t, and returns the conjugate
// quaternion of @q.
func (x *Quaternion) Invert(ResVar *Quaternion) {

	xQuaternionInvert(x.GoPointer(), ResVar)

}

var xQuaternionMultiply func(uintptr, *Quaternion, *Quaternion)

// Multiplies two #graphene_quaternion_t @a and @b.
func (x *Quaternion) Multiply(BVar *Quaternion, ResVar *Quaternion) {

	xQuaternionMultiply(x.GoPointer(), BVar, ResVar)

}

var xQuaternionNormalize func(uintptr, *Quaternion)

// Normalizes a #graphene_quaternion_t.
func (x *Quaternion) Normalize(ResVar *Quaternion) {

	xQuaternionNormalize(x.GoPointer(), ResVar)

}

var xQuaternionScale func(uintptr, float32, *Quaternion)

// Scales all the elements of a #graphene_quaternion_t @q using
// the given scalar factor.
func (x *Quaternion) Scale(FactorVar float32, ResVar *Quaternion) {

	xQuaternionScale(x.GoPointer(), FactorVar, ResVar)

}

var xQuaternionSlerp func(uintptr, *Quaternion, float32, *Quaternion)

// Interpolates between the two given quaternions using a spherical
// linear interpolation, or [SLERP](http://en.wikipedia.org/wiki/Slerp),
// using the given interpolation @factor.
func (x *Quaternion) Slerp(BVar *Quaternion, FactorVar float32, ResVar *Quaternion) {

	xQuaternionSlerp(x.GoPointer(), BVar, FactorVar, ResVar)

}

var xQuaternionToAngleVec3 func(uintptr, float32, *Vec3)

// Converts a quaternion into an @angle, @axis pair.
func (x *Quaternion) ToAngleVec3(AngleVar float32, AxisVar *Vec3) {

	xQuaternionToAngleVec3(x.GoPointer(), AngleVar, AxisVar)

}

var xQuaternionToAngles func(uintptr, float32, float32, float32)

// Converts a #graphene_quaternion_t to its corresponding rotations
// on the [Euler angles](http://en.wikipedia.org/wiki/Euler_angles)
// on each axis.
func (x *Quaternion) ToAngles(DegXVar float32, DegYVar float32, DegZVar float32) {

	xQuaternionToAngles(x.GoPointer(), DegXVar, DegYVar, DegZVar)

}

var xQuaternionToMatrix func(uintptr, *Matrix)

// Converts a quaternion into a transformation matrix expressing
// the rotation defined by the #graphene_quaternion_t.
func (x *Quaternion) ToMatrix(MVar *Matrix) {

	xQuaternionToMatrix(x.GoPointer(), MVar)

}

var xQuaternionToRadians func(uintptr, float32, float32, float32)

// Converts a #graphene_quaternion_t to its corresponding rotations
// on the [Euler angles](http://en.wikipedia.org/wiki/Euler_angles)
// on each axis.
func (x *Quaternion) ToRadians(RadXVar float32, RadYVar float32, RadZVar float32) {

	xQuaternionToRadians(x.GoPointer(), RadXVar, RadYVar, RadZVar)

}

var xQuaternionToVec4 func(uintptr, *Vec4)

// Copies the components of a #graphene_quaternion_t into a
// #graphene_vec4_t.
func (x *Quaternion) ToVec4(ResVar *Vec4) {

	xQuaternionToVec4(x.GoPointer(), ResVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xQuaternionGLibType, lib, "graphene_quaternion_get_type")

	core.PuregoSafeRegister(&xQuaternionAlloc, lib, "graphene_quaternion_alloc")

	core.PuregoSafeRegister(&xQuaternionAdd, lib, "graphene_quaternion_add")
	core.PuregoSafeRegister(&xQuaternionDot, lib, "graphene_quaternion_dot")
	core.PuregoSafeRegister(&xQuaternionEqual, lib, "graphene_quaternion_equal")
	core.PuregoSafeRegister(&xQuaternionFree, lib, "graphene_quaternion_free")
	core.PuregoSafeRegister(&xQuaternionInit, lib, "graphene_quaternion_init")
	core.PuregoSafeRegister(&xQuaternionInitFromAngleVec3, lib, "graphene_quaternion_init_from_angle_vec3")
	core.PuregoSafeRegister(&xQuaternionInitFromAngles, lib, "graphene_quaternion_init_from_angles")
	core.PuregoSafeRegister(&xQuaternionInitFromEuler, lib, "graphene_quaternion_init_from_euler")
	core.PuregoSafeRegister(&xQuaternionInitFromMatrix, lib, "graphene_quaternion_init_from_matrix")
	core.PuregoSafeRegister(&xQuaternionInitFromQuaternion, lib, "graphene_quaternion_init_from_quaternion")
	core.PuregoSafeRegister(&xQuaternionInitFromRadians, lib, "graphene_quaternion_init_from_radians")
	core.PuregoSafeRegister(&xQuaternionInitFromVec4, lib, "graphene_quaternion_init_from_vec4")
	core.PuregoSafeRegister(&xQuaternionInitIdentity, lib, "graphene_quaternion_init_identity")
	core.PuregoSafeRegister(&xQuaternionInvert, lib, "graphene_quaternion_invert")
	core.PuregoSafeRegister(&xQuaternionMultiply, lib, "graphene_quaternion_multiply")
	core.PuregoSafeRegister(&xQuaternionNormalize, lib, "graphene_quaternion_normalize")
	core.PuregoSafeRegister(&xQuaternionScale, lib, "graphene_quaternion_scale")
	core.PuregoSafeRegister(&xQuaternionSlerp, lib, "graphene_quaternion_slerp")
	core.PuregoSafeRegister(&xQuaternionToAngleVec3, lib, "graphene_quaternion_to_angle_vec3")
	core.PuregoSafeRegister(&xQuaternionToAngles, lib, "graphene_quaternion_to_angles")
	core.PuregoSafeRegister(&xQuaternionToMatrix, lib, "graphene_quaternion_to_matrix")
	core.PuregoSafeRegister(&xQuaternionToRadians, lib, "graphene_quaternion_to_radians")
	core.PuregoSafeRegister(&xQuaternionToVec4, lib, "graphene_quaternion_to_vec4")

}
