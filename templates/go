// Package {{.PkgName}} was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package {{.PkgName}}

{{ $NotGObject := ne .PkgName "gobject" }}
{{ $NotGLib := ne .PkgName "glib" }}

{{if .NeedsInit}}
import (
       {{if .NeedsInit}}
       "github.com/jwijenbergh/purego"
       "github.com/jwijenbergh/puregotk/internal/core"
       {{end}}
)
{{end}}

{{$outer := .}}

{{range .Callbacks -}}
{{.Doc}}
type {{.Name}} func({{ conv .Args.Pure.Types }}) {{.Ret.Raw}}
{{end}}

{{range .Records -}}
{{.Doc}}
type {{.Name}} struct {
     {{range .Fields}}
     {{.Name}} {{.Type}}
     {{end}}
}

func (x *{{.Name}}) GoPointer() uintptr {
     return uintptr(unsafe.Pointer(x))
}

{{$outer := .}}

{{range .Constructors -}}
var x{{.Name}} func({{conv .Args.Pure.Types}}) {{.Ret.Raw}}


{{.Doc}}
func {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
     {{.Ret.Preamble $NotGLib}}
     {{if .Ret.Value}}cret :={{end}}x{{.Name}}({{conv .Args.API.Call}})
     {{.Ret.Fmt $NotGObject}}
}
{{end}}

{{$outer := .}}
{{range .Receivers -}}
var x{{$outer.Name}}{{.Name}} func(uintptr {{convc .Args.Pure.Types}}) {{.Ret.Raw}}

{{.Doc}}
func (x *{{$outer.Name}}) {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
     {{.Ret.Preamble $NotGLib}}
     {{if .Ret.Value}}cret :={{end}}x{{$outer.Name}}{{.Name}}(x.GoPointer() {{convc .Args.API.Call}})
     {{.Ret.Fmt $NotGObject}}
}
{{end}}

{{end}}

{{range .Interfaces -}}
{{.Doc}}
type {{.Name}} interface {
     GoPointer() uintptr
     SetGoPointer(uintptr)
     {{range .Methods -}}
     {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Value}}
     {{end}}
}
type {{.Name}}Base struct {
     Ptr uintptr
}

func (x *{{.Name}}Base) GoPointer() uintptr {
     return x.Ptr
}

func (x *{{.Name}}Base) SetGoPointer(ptr uintptr) {
     x.Ptr = ptr
}

{{$outer := .}}
{{range .Methods -}}
{{.Doc}}
func (x *{{$outer.Name}}Base) {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
     {{.Ret.Preamble $NotGLib}}
     {{if .Ret.Value}}cret := {{end}}{{.Namespace}}X{{.FullName}}(x.GoPointer() {{convc .Args.API.Call}})
     {{.Ret.Fmt $NotGObject}}
}
{{end}}

{{range .Methods -}}
var {{.Namespace}}X{{.FullName}} func(uintptr {{convc .Args.Pure.Types}}) {{.Ret.Raw}}
{{end}}
{{end}}

{{range .Aliases -}}
{{.Doc}}
type {{.Name}} = {{.Value}}
{{end}}

{{if .Constants -}}
const (
{{range .Constants -}}
	{{.Doc}}
	{{.Name}} {{.Type}} = {{.Value}}
{{end}}
)
{{end}}

{{range .Enums -}}
{{.Doc}}
type {{.Name}} int
const (
{{$outer := .}}
{{range .Values -}}
	{{.Doc}}
	{{.Name}} {{$outer.Name}} = {{.Value}}
{{end}}
)
{{end}}

{{range .Functions -}}
var x{{.Name}} func({{conv .Args.Pure.Types}}) {{.Ret.Raw}}

{{.Doc}}
func {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
     {{.Ret.Preamble $NotGLib}}
     {{if .Ret.Value}}cret := {{end}}x{{.Name}}({{conv .Args.API.Call}})
     {{.Ret.Fmt $NotGObject}}
}
{{end}}

{{range .Classes -}}
{{.Doc}}
type {{.Name}} struct {
     {{.Parent}}
     {{if not .Parent}}
     Ptr uintptr
     {{end}}
}

{{$outer := .}}
func {{.Name}}NewFromInternalPtr(ptr uintptr) *{{.Name}} {
     cls := &{{.Name}}{}
     cls.Ptr = ptr
     return cls
}

{{range .Constructors -}}
var x{{.Name}} func({{conv .Args.Pure.Types}}) {{.Ret.Raw}}


{{.Doc}}
func {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
     {{.Ret.Preamble $NotGLib}}
     {{if .Ret.Value}}cret :={{end}}x{{.Name}}({{conv .Args.API.Call}})
     {{.Ret.Fmt $NotGObject}}
}
{{end}}

{{$outer := .}}
{{range .Receivers -}}
var x{{$outer.Name}}{{.Name}} func(uintptr {{convc .Args.Pure.Types}}) {{.Ret.Raw}}

{{.Doc}}
func (x *{{$outer.Name}}) {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
     {{.Ret.Preamble $NotGLib}}
     {{if .Ret.Value}}cret :={{end}}x{{$outer.Name}}{{.Name}}(x.GoPointer() {{convc .Args.API.Call}})
     {{.Ret.Fmt $NotGObject}}
}
{{end}}

func (c *{{.Name}}) GoPointer() uintptr {
     return c.Ptr
}

func (c *{{.Name}}) SetGoPointer(ptr uintptr) {
     c.Ptr = ptr
}

{{range .Signals -}}

{{.Doc}}
func (x *{{$outer.Name}}) Connect{{.Name}}(cb func({{$outer.Name}} {{convc .Args.API.Types}}) {{.Ret.Value}}) uint32 {
     cbPtr := reflect.ValueOf(cb).Pointer()
     cbRefPtr, ok := {{if $NotGLib}}glib.{{end}}GetCallback(cbPtr)
     if !ok {
          fcb := func(clsPtr uintptr {{convc .Args.Pure.Full}}) {{.Ret.Raw}} {
               fa := {{$outer.Name}}{}
               fa.Ptr = clsPtr
               {{if .Ret.Class}}
               {{.Name}}Cls := cb(fa {{convc .Args.Pure.Call}})
               return {{.Name}}Cls.Ptr
               {{else if .Ret.Value}}
               return cb(fa {{convc .Args.Pure.Call}})
               {{else}}
               cb(fa {{convc .Args.Pure.Call}})
               {{end}}
          }
          cbRefPtr = purego.NewCallback(fcb)
          {{if $NotGLib}}glib.{{end}}SaveCallback(cbPtr, cbRefPtr)
     }
     return {{if $NotGObject}}gobject.{{end}}SignalConnect(x.GoPointer(), "{{.CName}}", cbRefPtr)
}
{{end}}

{{range .Interfaces -}}
{{range .Methods -}}
{{.Doc}}
func (x *{{$outer.Name}}) {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
     {{.Ret.Preamble $NotGLib}}
     {{if .Ret.Value}}cret := {{end}} {{.Namespace}}X{{.FullName}}(x.GoPointer() {{convc .Args.API.Call}})
     {{.Ret.Fmt $NotGObject}}
}
{{end}}
{{end}}

{{range .Functions -}}
var x{{.Name}} func({{conv .Args.Pure.Types}}) {{.Ret.Raw}}

{{.Doc}}
func {{.Name}}({{conv .Args.API.Full}}) {{.Ret.Return}} {
     {{.Ret.Preamble $NotGLib}}
     {{if .Ret.Value}}cret := {{end}}x{{.Name}}({{conv .Args.API.Call}})
     {{.Ret.Fmt $NotGObject}}
}
{{end}}

{{end}}


{{if .NeedsInit}}

func init() {
    lib, err := purego.Dlopen(core.GetPath("{{.PkgEnv}}"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
    if err != nil {
            panic(err)
    }
    {{range .Functions -}}
    core.PuregoSafeRegister(&x{{.Name}}, lib, "{{.CName}}")
    {{end}}

    {{range .Records -}}
    {{$rec := .}}
    {{range .Constructors -}}
    core.PuregoSafeRegister(&x{{.Name}}, lib, "{{.CName}}")
    {{end}}
    {{range .Receivers -}}
    core.PuregoSafeRegister(&x{{$rec.Name}}{{.Name}}, lib, "{{.CName}}")
    {{end}}
    {{end}}

    {{range .Classes -}}
    {{$cls := .}}
    {{range .Constructors -}}
    core.PuregoSafeRegister(&x{{.Name}}, lib, "{{.CName}}")
    {{end}}
    {{range .Receivers -}}
    core.PuregoSafeRegister(&x{{$cls.Name}}{{.Name}}, lib, "{{.CName}}")
    {{end}}
    {{range .Functions -}}
    core.PuregoSafeRegister(&x{{.Name}}, lib, "{{.CName}}")
    {{end}}
    {{end}}

    {{range .Interfaces -}}
    {{range .Methods -}}
    core.PuregoSafeRegister(&{{.Namespace}}X{{.FullName}}, lib, "{{.CName}}")
    {{end}}
    {{end}}
}
{{end}}
